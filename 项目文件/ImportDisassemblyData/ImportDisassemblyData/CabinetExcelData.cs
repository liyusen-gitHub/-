using OfficeOpenXml;
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.IO;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using ImportDisassemblyData;
using System.Net;


namespace ImportDisassemblyData
{
    /// <summary>
    /// 柜体导入数据库2018.7.3
    /// </summary>
    public class CabinetExcelData : ExcelData
    {

        public override void ReadExcelData(string Path, string ParentId)
        {
            //bool TheWorksheetExists = true;
            //存储数据流
            FileStream Fs = new FileStream(Path, FileMode.Open, FileAccess.Read);
            try
            {
                DataSet DS = new DataSet();
                //读取Excel
                using (ExcelPackage pck = new ExcelPackage(Fs))
                {
                    //下料单
                    #region
                    //数据所在Sheet
                    ExcelWorksheet Sheet = null;
                    //打开的Sheet名
                    Sheet = pck.Workbook.Worksheets["下料单"];
                    if (Sheet != null)
                    {
                        if (Sheet.Hidden.ToString() == "Visible")
                        {
                            try
                            {
                                //最大列
                                int maxColumnNum = Sheet.Dimension.End.Column;
                                //最小列
                                int minColumnNum = Sheet.Dimension.Start.Column;
                                //最小行
                                int minRowNum = Sheet.Dimension.Start.Row;
                                //最大行
                                int maxRowNum = Sheet.Dimension.End.Row;
                                //开始行
                                int sRowNum = 4;
                                //结束行
                                int eRowNum = 0;
                                //区域A的开始栏位
                                int sAColNum = 1;
                                //区域A的结束栏位
                                int eAColNum = 5;
                                //区域B的开始栏位
                                int sBColNum = 6;
                                //区域B的结束栏位
                                int eBColNum = 41;
                                //合计所在行
                                int hJRowNum = 0;
                                //读取Excel内容
                                //修改开始行
                                sRowNum = 4;
                                //修改结束行
                                eRowNum = 23;
                                //标题行
                                int ExcelTitle1 = 0;
                                int ExcelTitle2 = 0;
                                int ExcelTitle = 0;
                                string str = null;
                                //找到结束行
                                for (int d = 1; d < maxRowNum; d++)
                                {
                                    if ((CStr(Sheet.Cells[d, 1].Value)).Trim() == "总合计：")
                                    {
                                        eRowNum = d - 2;
                                        break;
                                    }
                                }
                                //找到吊柜所在行
                                for (int d = 1; d < eRowNum; d++)
                                {
                                    if ((CStr(Sheet.Cells[d, 1].Value)).Trim() == "吊柜")
                                    {
                                        ExcelTitle2 = d;
                                        break;
                                    }
                                }
                                //找到地柜所在行
                                for (int i = 1; i < eRowNum; i++)
                                {
                                    if ((CStr(Sheet.Cells[i, 1].Value)).Trim() == "地柜")
                                    {
                                        ExcelTitle1 = i;
                                        break;
                                    }
                                }
                                //找到抽屉备用条所在行
                                for (int i = 1; i < eRowNum; i++)
                                {
                                    if ((CStr(Sheet.Cells[i, 1].Value)).Trim() == "抽屉、备用条等")
                                    {
                                        ExcelTitle = i;
                                        break;
                                    }
                                }

                                string MaterialNote = "";
                                for (int i = 12; i < 16; i++)
                                {
                                    MaterialNote = CStr(Sheet.Cells[2, i].Value);
                                    if (MaterialNote.Length == 0)
                                    {
                                        continue;
                                    }
                                    else
                                    {
                                        break;
                                    }
                                }

                                //sRowNum
                                //循环遍历每一行
                                for (int i = sRowNum; i <= eRowNum; i++)
                                {
                                    object OrderName = Sheet.Cells[i, 1].Value;
                                    if (OrderName == null || OrderName.ToString().Trim() == "合计:" || OrderName.ToString().Trim() == "吊柜" || OrderName.ToString().Trim() == "地柜" || OrderName.ToString().Trim() == "抽屉、备用条等")
                                    {
                                        continue;
                                    }
                                    object PlateNum = Sheet.Cells[i, 5].Value;
                                    {
                                        if (PlateNum == null || PlateNum.ToString() == "")
                                        {
                                            continue;
                                        }
                                        if (System.Text.RegularExpressions.Regex.IsMatch(PlateNum.ToString(), @"^[-+]?[0-9]*\.?[0-9]+$"))
                                        {
                                            if (Convert.ToSingle(PlateNum) > 0)
                                            {
                                                string excelValue1 = null;
                                                //读取A区域内容
                                                DataRow newARow = null;
                                                DataRow newBRow = null;
                                                newARow = orderDetailDataTable.NewRow();
                                                //newBRow = DtB.NewRow();
                                                int ABlankRow = 0;//A区域全白行
                                                int AColumnsCount = orderDetailDataTable.Columns.Count;//A区域栏位数
                                                str = Guid.NewGuid().ToString().Substring(0, 12);
                                                newARow[string.Format("OrderDetailId")] = str.ToUpper();
                                                //循环遍历每一列
                                                for (int j = sAColNum; j <= eAColNum; j++)
                                                {
                                                    //合计所在行
                                                    hJRowNum = ExcelTitle2 - 1;
                                                    //去除标题行和合计行
                                                    if (i == ExcelTitle2 || i == ExcelTitle1 || i == hJRowNum || i == ExcelTitle)
                                                    {
                                                        break;
                                                    }
                                                    //获取地柜名
                                                    excelValue1 = CStr(Sheet.Cells[i, 1].Value);
                                                    //判断地柜名是否为空
                                                    if (excelValue1 == "" || excelValue1 == null)
                                                    {
                                                        ABlankRow++;
                                                        break;
                                                    }
                                                    //表头不读了但是要把第一列替换成表头 + 第一列的值
                                                    if (j == sAColNum)
                                                    {
                                                        //地柜
                                                        if (i < hJRowNum)
                                                        {
                                                            excelValue1 = CStr(Sheet.Cells[sRowNum, sAColNum].Value + CStr(Sheet.Cells[i, j].Value));
                                                        }
                                                        //吊柜
                                                        else if (i > hJRowNum && i < ExcelTitle)
                                                        {
                                                            excelValue1 = CStr(Sheet.Cells[hJRowNum + 1, sAColNum].Value + CStr(Sheet.Cells[i, j].Value));
                                                        }
                                                        else if (i > ExcelTitle)//抽屉、备用条等
                                                        {
                                                            excelValue1 = CStr(Sheet.Cells[ExcelTitle, 1].Value + CStr(Sheet.Cells[i, j].Value));
                                                        }
                                                    }
                                                    switch (j)
                                                    {
                                                        case 1: newARow[string.Format("ProductDescription")] = excelValue1; break;
                                                        case 2:
                                                            object Wide = Sheet.Cells[i, j].Value;
                                                            if (Wide == null || Wide.ToString() == "")
                                                            {
                                                                Wide = "0";
                                                                Convert.ToSingle(Wide);
                                                                newARow["Wide"] = Wide;
                                                            }
                                                            else
                                                            {
                                                                if (System.Text.RegularExpressions.Regex.IsMatch(Wide.ToString(), @"^[-+]?[0-9]*\.?[0-9]+$"))
                                                                {

                                                                    newARow["Wide"] = Wide;
                                                                }
                                                                else
                                                                {
                                                                    MessageBox.Show("请检查工作表" + Sheet.Name + "第" + i + "行第" + j + "列数据是否正确");
                                                                    //TheWorksheetExists = false;
                                                                }
                                                            }
                                                            //newARow["FWide"] = CellValue;
                                                            break;
                                                        //newARow[string.Format("Wide")] = excelValue1;
                                                        //break;
                                                        case 3:
                                                            object High = Sheet.Cells[i, j].Value;
                                                            if (High == null || High.ToString() == "")
                                                            {
                                                                High = "0";
                                                                Convert.ToSingle(High);
                                                                newARow["High"] = High;
                                                            }
                                                            else
                                                            {
                                                                if (System.Text.RegularExpressions.Regex.IsMatch(High.ToString(), @"^[-+]?[0-9]*\.?[0-9]+$"))
                                                                {

                                                                    newARow["High"] = High;
                                                                }
                                                                else
                                                                {
                                                                    MessageBox.Show("请检查工作表" + Sheet.Name + "第" + i + "行第" + j + "列数据是否正确");
                                                                    //TheWorksheetExists = false;
                                                                }
                                                            }
                                                            //newARow[string.Format("High")] = excelValue2; 
                                                            break;
                                                        case 4:
                                                            object Deth = Sheet.Cells[i, j].Value;
                                                            if (Deth == null || Deth.ToString() == "")
                                                            {
                                                                Deth = "0";
                                                                Convert.ToSingle(Deth);
                                                                newARow["Deth"] = Deth;
                                                            }
                                                            else
                                                            {
                                                                if (System.Text.RegularExpressions.Regex.IsMatch(Deth.ToString(), @"^[-+]?[0-9]*\.?[0-9]+$"))
                                                                {

                                                                    newARow["Deth"] = Deth;
                                                                }
                                                                else
                                                                {
                                                                    MessageBox.Show("请检查工作表" + Sheet.Name + "第" + i + "行第" + j + "列数据是否正确");
                                                                    //TheWorksheetExists = false;
                                                                }
                                                            }
                                                            break;
                                                        case 5:
                                                            object Qty = Sheet.Cells[i, j].Value;
                                                            if (Qty == null || Qty.ToString() == "")
                                                            {
                                                                Qty = "0";
                                                                Convert.ToSingle(Qty);
                                                                newARow["Qty"] = Qty;
                                                            }
                                                            else
                                                            {
                                                                if (System.Text.RegularExpressions.Regex.IsMatch(Qty.ToString(), @"^[-+]?[0-9]*\.?[0-9]+$"))
                                                                {

                                                                    newARow["Qty"] = Qty;
                                                                }
                                                                else
                                                                {
                                                                    MessageBox.Show("请检查工作表" + Sheet.Name + "第" + i + "行第" + j + "列数据是否正确");
                                                                    //TheWorksheetExists = false;
                                                                }
                                                            }
                                                            break;
                                                    }

                                                    newARow[string.Format("ProductOrderId")] = ParentId;

                                                }
                                                //空白行和表头不添加到datatable中
                                                if (i == ExcelTitle2 || i == ExcelTitle1 || i == hJRowNum || ABlankRow != AColumnsCount)
                                                {
                                                    if (excelValue1 == "" || excelValue1 == null)
                                                    {
                                                        continue;
                                                    }
                                                }
                                                //将读取到的行添加到datatable中
                                                orderDetailDataTable.Rows.Add(newARow);
                                                //明细分割位
                                                int Detail = 1;

                                                //确认备注所在栏位
                                                int RemarkColum = 41;
                                                //循环遍历读取Excel数据
                                                for (int z = sBColNum; z <= eBColNum; z++)
                                                {
                                                    object PlateQty = Sheet.Cells[i, z - Detail + 5].Value;
                                                    if (PlateQty == null || PlateQty.ToString() == "")
                                                    {
                                                        z = z + 3;
                                                        continue;
                                                    }
                                                    if (Detail == 1)
                                                    {
                                                        if (System.Text.RegularExpressions.Regex.IsMatch(PlateQty.ToString(), @"^[-+]?[0-9]*\.?[0-9]+$"))
                                                        {
                                                            if (Convert.ToSingle(PlateQty) > 0)
                                                            {
                                                                if (Detail == 1)
                                                                {
                                                                    //为datatable创建一个新行
                                                                    newBRow = materialBillsDataTable.NewRow();
                                                                    string IssueMaterialBillsId = Guid.NewGuid().ToString().Substring(0, 12);
                                                                    newBRow["IssueMaterialBillsId"] = IssueMaterialBillsId.ToUpper();
                                                                    newBRow["ProductOrderId"] = ParentId;
                                                                    newBRow["PlateType"] = Sheet.Cells[1, 1].Value.ToString().Substring(3, 2);
                                                                    newBRow[string.Format("OrderDetailId")] = str.ToUpper();
                                                                    string PlateName = "";
                                                                    if (Sheet.Cells[i, z].Value == null)
                                                                    {
                                                                        PlateName = "";
                                                                    }
                                                                    else
                                                                    {
                                                                        PlateName = Sheet.Cells[i, z].Value.ToString();
                                                                    }
                                                                    if (PlateName == null || PlateName == "")
                                                                    {
                                                                        z = z + 4;
                                                                        continue;
                                                                    }
                                                                    else
                                                                    {
                                                                        newBRow[string.Format("PlateName")] = Sheet.Cells[i, z].Value;
                                                                        Detail++;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        else
                                                        {
                                                            z = z + 4;
                                                        }
                                                    }
                                                    else
                                                    {
                                                        if (System.Text.RegularExpressions.Regex.IsMatch(PlateQty.ToString(), @"^[-+]?[0-9]*\.?[0-9]+$"))
                                                        {
                                                            if (Convert.ToSingle(PlateQty) > 0)
                                                            {
                                                                if (Detail == 2)
                                                                {
                                                                    object CutThick = Sheet.Cells[i, z].Value;
                                                                    if (CutThick == null || CutThick.ToString() == "")
                                                                    {
                                                                        CutThick = "0";
                                                                        Convert.ToSingle(CutThick);
                                                                        newBRow["CutThick"] = CutThick;
                                                                        Detail++;
                                                                    }
                                                                    else
                                                                    {
                                                                        if (System.Text.RegularExpressions.Regex.IsMatch(CutThick.ToString(), @"^[-+]?[0-9]*\.?[0-9]+$"))
                                                                        {
                                                                            newBRow["CutThick"] = CutThick;
                                                                            Detail++;
                                                                        }
                                                                        else
                                                                        {
                                                                            MessageBox.Show("请检查工作表" + Sheet.Name + "第" + i + "行第" + z + "列数据是否正确");
                                                                            //TheWorksheetExists = false;
                                                                        }
                                                                    }
                                                                }
                                                                else if (Detail == 3)
                                                                {
                                                                    object CutLong = Sheet.Cells[i, z].Value;
                                                                    if (CutLong == null || CutLong.ToString() == "")
                                                                    {
                                                                        CutLong = "0";
                                                                        Convert.ToSingle(CutLong);
                                                                        newBRow["CutWide"] = CutLong;
                                                                        Detail++;
                                                                    }
                                                                    else
                                                                    {
                                                                        if (System.Text.RegularExpressions.Regex.IsMatch(CutLong.ToString(), @"^[-+]?[0-9]*\.?[0-9]+$"))
                                                                        {

                                                                            newBRow["CutWide"] = CutLong;
                                                                            Detail++;
                                                                        }
                                                                        else
                                                                        {
                                                                            MessageBox.Show("请检查工作表" + Sheet.Name + "第" + i + "行第" + z + "列数据是否正确");
                                                                            //TheWorksheetExists = false;
                                                                        }
                                                                    }
                                                                    //newBRow[string.Format("CutLong")] = Sheet.Cells[i, z].Value;

                                                                    //Detail++;
                                                                }
                                                                else if (Detail == 4)
                                                                {
                                                                    object CutWide = Sheet.Cells[i, z].Value;

                                                                    if (CutWide == null || CutWide.ToString() == "")
                                                                    {
                                                                        CutWide = "0";
                                                                        Convert.ToSingle(CutWide);
                                                                        newBRow["CutHigh"] = CutWide;
                                                                        Detail++;
                                                                    }
                                                                    else
                                                                    {
                                                                        if (System.Text.RegularExpressions.Regex.IsMatch(CutWide.ToString(), @"^[-+]?[0-9]*\.?[0-9]+$"))
                                                                        {

                                                                            newBRow["CutHigh"] = CutWide;
                                                                            Detail++;
                                                                        }
                                                                        else
                                                                        {
                                                                            MessageBox.Show("请检查工作表" + Sheet.Name + "第" + i + "行第" + z + "列数据是否正确");
                                                                            //TheWorksheetExists = false;
                                                                        }
                                                                    }
                                                                    //newBRow[string.Format("CutWide")] = Sheet.Cells[i, z].Value;

                                                                    //Detail++;
                                                                }
                                                                else
                                                                {
                                                                    object Qty = Sheet.Cells[i, z].Value;
                                                                    if (Qty == null || Qty.ToString() == "")
                                                                    {
                                                                        Qty = "0";
                                                                        Convert.ToSingle(Qty);
                                                                        newBRow["CutQty"] = Qty;
                                                                        Detail = 1;
                                                                    }
                                                                    else
                                                                    {
                                                                        if (System.Text.RegularExpressions.Regex.IsMatch(Qty.ToString(), @"^[-+]?[0-9]*\.?[0-9]+$"))
                                                                        {

                                                                            newBRow["CutQty"] = Qty; //RemarkColum
                                                                            newBRow[string.Format("MaterialNote")] = MaterialNote;
                                                                            newBRow["Remark"] = CStr(Sheet.Cells[i, RemarkColum].Value);
                                                                            //for (int q = 0; q <Convert.ToInt32(Qty); q++)
                                                                            //{
                                                                            materialBillsDataTable.Rows.Add(newBRow.ItemArray);
                                                                            //}
                                                                            Detail = 1;
                                                                        }
                                                                        else
                                                                        {
                                                                            MessageBox.Show("请检查工作表" + Sheet.Name + "第" + i + "行第" + z + "列数据是否正确");
                                                                            //TheWorksheetExists = false;
                                                                        }
                                                                    }
                                                                }

                                                            }
                                                        }
                                                    }

                                                }
                                            }
                                        }
                                    }
                                }
                                orderDetailDataTable.TableName = "OrderDetail";
                                DS.Tables.Add(orderDetailDataTable);
                                materialBillsDataTable.TableName = "IssueMaterialBills";
                                DS.Tables.Add(materialBillsDataTable);
                            }
                            catch (Exception ex)
                            {
                                MessageBox.Show(ex.Message);
                            }
                        }
                    }
                    //else
                    //{
                    //    MessageBox.Show("下料单工作表不存在");
                    //    TheWorksheetExists = false;
                    //}

                    #endregion
                    //铝材玻璃单
                    #region
                    //if (TheWorksheetExists)
                    //{
                    //铝材玻璃单读取
                    ExcelWorksheet Sheet2 = null;//数据所在Sheet
                    Sheet2 = pck.Workbook.Worksheets["铝材玻璃单"];
                    if (Sheet2.Hidden.ToString() == "Visible")
                    {
                        if (Sheet2.Name == "铝材玻璃单")
                        {
                            try
                            {
                                int maxColumnNum2 = Sheet2.Dimension.End.Column;//最大列
                                int minColumnNum2 = Sheet2.Dimension.Start.Column;//最小列
                                int minRowNum2 = Sheet2.Dimension.Start.Row;//最小行
                                int maxRowNum2 = Sheet2.Dimension.End.Row;//最大行
                                int sRowNum2 = 5;//开始行
                                int eRowNum2 = 0;//结束行
                                int sAColNum2 = 1;//区域A的开始栏位
                                int eAColNum2 = 7;//区域A的结束栏位
                                int sBColNum2 = 8;//区域B的开始栏位
                                int eBColNum2 = 12;//区域B的结束栏位

                                string ExcelNameValue = "";
                                //获取结束行
                                for (int d = sRowNum2; d < maxRowNum2; d++)
                                {
                                    if ((CStr(Sheet2.Cells[d, 1].Value)).Trim() == "制单人：")
                                    {
                                        eRowNum2 = d - 1;
                                        break;
                                    }
                                }
                                //铝材玻璃单左侧读取
                                for (int i = sRowNum2; i < eRowNum2; i++)
                                {
                                    decimal ExcelNameValue1 = 0;
                                    int ExcelNameValue2 = 0;
                                    string AluminiumSheetGlassId = Guid.NewGuid().ToString().Substring(0, 12);
                                    DataRow newARow = GlassIssueMaterialBills1Table.NewRow();
                                    for (int j = sAColNum2; j <= eAColNum2; j++)
                                    {
                                        newARow["GlassIssueMaterialBillsId"] = AluminiumSheetGlassId;
                                        newARow["ProductOrderId"] = ParentId;
                                        //获取铝材玻璃数量
                                        ExcelNameValue = CStr(Sheet2.Cells[i, 5].Value);
                                        if (ExcelNameValue == "" || ExcelNameValue == null)
                                        {
                                            break;
                                        }
                                        ExcelNameValue1 = Convert.ToDecimal(ExcelNameValue);
                                        ExcelNameValue2 = Convert.ToInt32(ExcelNameValue1);
                                        //判断铝材玻璃数量是否为0
                                        if (ExcelNameValue2 <= 0)
                                        {
                                            break;
                                        }
                                        //判断单元格是否是合并单元格并获取值
                                        ExcelRange Rang = Sheet2.Cells[i, j];
                                        object objectCellValue = Sheet2.GetValue(i, j);//单元格数据
                                        string CellValue = objectCellValue != null ? objectCellValue.ToString().Trim() : "";
                                        if (Rang.Merge)
                                        {
                                            CellValue = GetMergeValue(Sheet2, i, j);
                                        }

                                        switch (j)
                                        {
                                            case 2: newARow["MaterialName"] = CellValue; break;
                                            case 3:
                                                newARow["StandardsName"] = CellValue;
                                                break;
                                            case 5:
                                                if (CellValue == "" || CellValue == null)
                                                {
                                                    CellValue = "0";
                                                    Convert.ToSingle(CellValue);
                                                    newARow["Qty"] = CellValue;
                                                }
                                                else
                                                {
                                                    if (System.Text.RegularExpressions.Regex.IsMatch(CellValue.ToString(), @"^[-+]?[0-9]*\.?[0-9]+$"))
                                                    {
                                                        newARow["Qty"] = CellValue;
                                                    }
                                                    else
                                                    {
                                                        MessageBox.Show("请检查工作表" + Sheet2.Name + "第" + i + "行第" + j + "列数据是否正确");
                                                        //TheWorksheetExists = false;
                                                    }
                                                }
                                                break;
                                            case 6: newARow["Unit"] = CellValue; break;
                                            case 7: newARow["Remark"] = CellValue; break;
                                        }
                                    }
                                    if (ExcelNameValue == "" || ExcelNameValue == null || ExcelNameValue2 <= 0)
                                    {
                                        continue;
                                    }
                                    GlassIssueMaterialBills1Table.Rows.Add(newARow);
                                }
                                GlassIssueMaterialBills1Table.TableName = "GlassIssueMaterialBills";
                                DS.Tables.Add(GlassIssueMaterialBills1Table);
                                //铝材玻璃单右侧读取
                                for (int i = sRowNum2; i <= eRowNum2; i++)
                                {
                                    decimal ExcelNameValue3 = 0;
                                    int ExcelNameValue4 = 0;
                                    string AluminiumSheetGlassId2 = Guid.NewGuid().ToString().Substring(0, 12);
                                    DataRow newARow = GlassIssueMaterialBills2Table.NewRow();

                                    ExcelNameValue = CStr(Sheet2.Cells[i, 11].Value);

                                    //string ExcelValue1 = Sheet.GetValue(i, 3).ToString();
                                    if ((ExcelNameValue == "") || (ExcelNameValue == null))
                                    {
                                        continue;
                                    }
                                    ExcelNameValue3 = Convert.ToDecimal(ExcelNameValue);
                                    ExcelNameValue4 = Convert.ToInt32(ExcelNameValue3);
                                    if (ExcelNameValue4 <= 0)
                                    {
                                        continue;
                                    }
                                    //读取数据
                                    for (int j = sBColNum2; j <= eBColNum2; j++)
                                    {
                                        newARow["GlassIssueMaterialBillsId"] = AluminiumSheetGlassId2.ToUpper();
                                        newARow["ProductOrderId"] = ParentId;
                                        //判断单元格是否是合并单元格并获取值
                                        ExcelRange Rang = Sheet2.Cells[i, j];
                                        object objectCellValue = Sheet2.GetValue(i, j);//单元格数据
                                        string CellValue = objectCellValue != null ? objectCellValue.ToString().Trim() : "";
                                        if (Rang.Merge)
                                        {
                                            CellValue = GetMergeValue(Sheet2, i, j);

                                        }

                                        switch (j)
                                        {
                                            case 9: newARow["MaterialName"] = CellValue; break;
                                            case 10:
                                                newARow["StandardsName"] = CellValue;
                                                //if (CellValue == "" || CellValue == null)
                                                //{
                                                //    CellValue = "0";
                                                //    Convert.ToSingle(CellValue);
                                                //    newARow["AluminiumSheetGlassSize"] = CellValue;
                                                //}
                                                //else
                                                //{
                                                //    if (System.Text.RegularExpressions.Regex.IsMatch(CellValue.ToString(), @"^[-+]?[0-9]*\.?[0-9]+$"))
                                                //    {
                                                //        newARow["AluminiumSheetGlassSize"] = CellValue;
                                                //    }
                                                //    else
                                                //    {
                                                //        MessageBox.Show("请检查工作表" + Sheet2.Name + "第" + i + "行第" + j + "列数据是否正确");
                                                //        TheWorksheetExists = false;
                                                //    }
                                                //}
                                                break;
                                            case 11:
                                                if (CellValue == "" || CellValue == null)
                                                {
                                                    CellValue = "0";
                                                    Convert.ToSingle(CellValue);
                                                    newARow["Qty"] = CellValue;
                                                }
                                                else
                                                {
                                                    if (System.Text.RegularExpressions.Regex.IsMatch(CellValue.ToString(), @"^[-+]?[0-9]*\.?[0-9]+$"))
                                                    {
                                                        newARow["Qty"] = CellValue;
                                                    }
                                                    else
                                                    {
                                                        MessageBox.Show("请检查工作表" + Sheet2.Name + "第" + i + "行第" + j + "列数据是否正确");
                                                        //TheWorksheetExists = false;
                                                    }
                                                }
                                                break;
                                            case 12: newARow["Unit"] = CellValue; break;
                                        }
                                    }
                                    //if (TheWorksheetExists == false)
                                    //{
                                    //    break;
                                    //}

                                    GlassIssueMaterialBills2Table.Rows.Add(newARow);
                                }
                                GlassIssueMaterialBills2Table.TableName = "GlassIssueMaterialBills1";
                                DS.Tables.Add(GlassIssueMaterialBills2Table);
                            }
                            catch (Exception ex)
                            {
                                MessageBox.Show(ex.Message);
                            }
                            finally
                            {

                            }

                        }
                        //}
                        //else
                        //{
                        //    MessageBox.Show("铝材玻璃单");
                        //    TheWorksheetExists = false;
                        //}

                    }
                    #endregion
                    //领料单
                    #region
                    //if (TheWorksheetExists)
                    //{
                    //装箱单读取
                    ExcelWorksheet Sheet1 = null;//数据所在Sheet
                    Sheet1 = pck.Workbook.Worksheets["领料单"];
                    if (Sheet1 != null)
                    {
                        if (Sheet1.Name == "领料单")
                        {
                            try
                            {
                                int maxColumnNum1 = Sheet1.Dimension.End.Column;//最大列
                                int minColumnNum1 = Sheet1.Dimension.Start.Column;//最小列
                                int minRowNum1 = Sheet1.Dimension.Start.Row;//最小行
                                int maxRowNum1 = Sheet1.Dimension.End.Row;//最大行
                                int sRowNum1 = 5;//开始行
                                int eRowNum1 = 0;//结束行
                                int sAColNum1 = 1;//区域A的开始栏位
                                int eAColNum1 = 6;//区域A的结束栏位
                                int ZhuangXiangEndId = 0;//装箱清单结束行
                                bool IsNumber = true;
                                string ExcelValue2 = "";

                                //获取领料单结束行
                                for (int d = sRowNum1; d < maxRowNum1; d++)
                                {
                                    string Identifier = CStr(Sheet1.Cells[d, 1].Value);
                                    if (Identifier.Trim() == "拆解员：")
                                    {
                                        eRowNum1 = d - 1;
                                        break;
                                    }
                                }
                                //获取装箱单结束行
                                for (int d = eRowNum1 + 7; d < maxRowNum1; d++)
                                {
                                    if (CStr(Sheet1.Cells[d, 1].Value) == "拆解人")
                                    {
                                        ZhuangXiangEndId = d - 1;
                                        break;
                                    }
                                }
                                //装箱单数据读取

                                if (IsNumber == true)
                                {
                                    //创建datatable存放物料描述信息
                                    DataTable dt = new DataTable();
                                    dt.Columns.Add(string.Format("ProductDescription"), Type.GetType("System.String"));//物料描述
                                    dt.Columns.Add(string.Format("ProductName"), Type.GetType("System.String"));
                                    DataRow rows = dt.NewRow();
                                    //循环读取物料描述信息存放在datatable中
                                    for (int i = (eRowNum1 + 7); i < ZhuangXiangEndId; i++)
                                    {
                                        string ProductDescription = CStr(Sheet1.Cells[i, 3].Value);
                                        string Qty = CStr(Sheet1.Cells[i, 4].Value);
                                        if (Qty == "" || Qty == null)
                                        {
                                            Qty = "0";
                                        }
                                        int QTY = Convert.ToInt32(Qty);
                                        if (ProductDescription == "" || ProductDescription == null || QTY == 0 || QTY < 0)
                                        {
                                            continue;
                                        }
                                        for (int j = 3; j < 4; j++)
                                        {
                                            rows["ProductDescription"] = ProductDescription;
                                        }
                                        dt.Rows.Add(rows.ItemArray);
                                    }



                                    //创建数据库链接调用存储过程根据物料描述获取到物料号存放在新的datatable中
                                    SqlConnection con = new SqlConnection("Data Source=192.168.124.72;Initial Catalog=OrBitXI;Persist Security Info=True;User ID=sa;Password=admin@2017");
                                    con.Open();
                                    SqlCommand cmd = new SqlCommand();
                                    cmd.CommandText = "Pro_GetProductName";
                                    cmd.Connection = con;
                                    cmd.CommandType = CommandType.StoredProcedure;
                                    SqlParameter param =
                                    new SqlParameter("@Pro_GetProductName", SqlDbType.Structured)
                                    {
                                        Value = dt
                                    };
                                    cmd.Parameters.Add(param);
                                    cmd.ExecuteNonQuery();
                                    //获取到存储过程返回的参数
                                    cmd.Parameters.Add(new SqlParameter("@return", SqlDbType.Int));
                                    cmd.Parameters["@return"].Direction = ParameterDirection.ReturnValue;
                                    SqlDataReader reader = cmd.ExecuteReader();
                                    //用来存放物料号和物料描述的新的datatable
                                    DataTable dt1 = new DataTable();
                                    dt1.Load(reader);
                                    //存储过程返回0为true
                                    if (Convert.ToInt32(cmd.Parameters["@return"].Value) == 0)
                                    {
                                        //读取Excel表格信息
                                        for (int i = (eRowNum1 + 7); i < ZhuangXiangEndId; i++)
                                        {
                                            decimal Excelvalue = 0;
                                            int Excelvalue1 = 0;
                                            //为装箱单表创建新行
                                            DataRow newARow = PackingListTable.NewRow();
                                            //创建一个Id
                                            string strPackingListId = Guid.NewGuid().ToString().Substring(0, 12);
                                            newARow[string.Format("GetMaterialBillsId")] = strPackingListId;
                                            ExcelValue2 = CStr(Sheet1.Cells[i, 4].Value);
                                            string MaterialDescription = CStr(Sheet1.Cells[i, 3].Value);
                                            //string ExcelValue1 = Sheet.GetValue(i, 3).ToString();
                                            if ((ExcelValue2 == "") || (ExcelValue2 == null) || MaterialDescription == "" || MaterialDescription == null)
                                            {
                                                continue;
                                            }
                                            Excelvalue = Convert.ToDecimal(ExcelValue2);
                                            Excelvalue1 = Convert.ToInt32(Excelvalue);
                                            if (Excelvalue1 <= 0)
                                            {
                                                continue;
                                            }
                                            //读取Excel数据
                                            for (int j = sAColNum1; j <= eAColNum1; j++)
                                            {
                                                newARow["ProductOrderId"] = ParentId;

                                                ExcelRange Rang = Sheet1.Cells[i, j];
                                                object objectCellValue = Sheet1.GetValue(i, j);//单元格数据
                                                string CellValue = objectCellValue != null ? objectCellValue.ToString().Trim() : "";
                                                if (Rang.Merge)
                                                {
                                                    CellValue = GetMergeValue(Sheet1, i, j);

                                                }
                                                switch (j)
                                                {
                                                    case 1: newARow["MaterialType"] = CellValue; break;
                                                    case 2:
                                                        if (System.Text.RegularExpressions.Regex.IsMatch(CellValue, @"^[-+]?[0-9]*\.?[0-9]+$"))
                                                        {
                                                            newARow["NumericalOrder"] = CellValue;

                                                        }
                                                        else
                                                        {
                                                            newARow["HardwareFitting"] = CellValue;
                                                        }
                                                        for (int q = 0; q < dt1.Rows.Count; q++)
                                                        {
                                                            string MaterialDescriptionSQL = dt1.Rows[q]["ProductDescription"].ToString();
                                                            string ProductName = dt1.Rows[q]["ProductName"].ToString();
                                                            if (MaterialDescriptionSQL == MaterialDescription)
                                                            {
                                                                newARow["ProductName"] = ProductName;
                                                                break;
                                                            }
                                                            //newARow["ProductName"] = ProductName;
                                                        }
                                                        break;
                                                    case 3:
                                                        //MaterialDescription

                                                        newARow["ProductDes"] = CellValue;
                                                        break;
                                                    case 4:
                                                        if (CellValue == "" || CellValue == null)
                                                        {
                                                            CellValue = "0";
                                                            Convert.ToSingle(CellValue);
                                                            newARow["Qty"] = CellValue;
                                                        }
                                                        else
                                                        {
                                                            if (System.Text.RegularExpressions.Regex.IsMatch(CellValue, @"^[-+]?[0-9]*\.?[0-9]+$"))
                                                            {

                                                                newARow["Qty"] = CellValue;
                                                            }
                                                            else
                                                            {
                                                                MessageBox.Show("请检查第" + i + "行第" + j + "列数据是否正确！！！");
                                                                IsNumber = false;
                                                            }
                                                        }
                                                        break;
                                                    case 5: newARow["Unit"] = CellValue; break;
                                                    case 6: newARow["PackingConfirmed"] = CellValue; break;
                                                }
                                            }
                                            if (IsNumber == false)
                                            {
                                                break;
                                            }
                                            PackingListTable.Rows.Add(newARow);
                                        }
                                        PackingListTable.TableName = "GetMaterialBills";
                                        DS.Tables.Add(PackingListTable);
                                    }
                                    con.Close();
                                    //释放dt1
                                    reader.Close();
                                    reader.Dispose();
                                    dt1.Clear();
                                    dt1.Dispose();

                                    //为领料单创建一个datatable
                                    DataTable PickingTable = new DataTable();
                                    PickingTable.Columns.Add(string.Format("ProductDescription"), Type.GetType("System.String"));//物料描述
                                    PickingTable.Columns.Add(string.Format("ProductName"), Type.GetType("System.String"));
                                    DataRow Pickingrows = PickingTable.NewRow();
                                    //读取物料描述信息存放在datatable中
                                    for (int i = sRowNum1; i < eRowNum1; i++)
                                    {
                                        string ProductDescription = CStr(Sheet1.Cells[i, 3].Value);
                                        string Qty = CStr(Sheet1.Cells[i, 4].Value);
                                        if (Qty == "" || Qty == null)
                                        {
                                            Qty = "0";
                                        }
                                        decimal QTY = Convert.ToDecimal(Qty);
                                        int Qty1 = Convert.ToInt32(QTY * 100);
                                        if (ProductDescription == "" || ProductDescription == null || Qty1 == 0 || Qty1 < 0)
                                        {
                                            continue;
                                        }
                                        for (int j = 3; j < 4; j++)
                                        {
                                            Pickingrows["ProductDescription"] = ProductDescription;
                                        }
                                        PickingTable.Rows.Add(Pickingrows.ItemArray);

                                    }
                                    con.Open();
                                    //调用存储过程根据物料描述获取到物料编号存放在另一个datatable中
                                    SqlCommand Pickingcmd = new SqlCommand();
                                    Pickingcmd.CommandText = "Pro_GetProductName";
                                    Pickingcmd.Connection = con;
                                    Pickingcmd.CommandType = CommandType.StoredProcedure;
                                    SqlParameter parameter =
                                    new SqlParameter("@Pro_GetProductName", SqlDbType.Structured)
                                    {
                                        Value = PickingTable
                                    };

                                    Pickingcmd.Parameters.Add(parameter);
                                    Pickingcmd.ExecuteNonQuery();
                                    Pickingcmd.Parameters.Add(new SqlParameter("@return", SqlDbType.Int));
                                    Pickingcmd.Parameters["@return"].Direction = ParameterDirection.ReturnValue;
                                    SqlDataReader readerPicking = Pickingcmd.ExecuteReader();
                                    DataTable Pickingdt = new DataTable();
                                    Pickingdt.Load(readerPicking);
                                    //领料单数据读取sRowNum
                                    for (int i = sRowNum1; i <= eRowNum1; i++)
                                    {
                                        decimal ExcelvalueQty = 0;
                                        int ExcelvalueQty1 = 0;
                                        DataRow newARow = GetMaterialBillsDataTable.NewRow();
                                        ExcelValue2 = CStr(Sheet1.Cells[i, 4].Value);
                                        string MaterialDescription = CStr(Sheet1.Cells[i, 3].Value);
                                        //string ExcelValue1 = Sheet.GetValue(i, 3).ToString();
                                        if ((ExcelValue2 == "") || (ExcelValue2 == null) || (MaterialDescription == "") || (MaterialDescription == null))
                                        {
                                            continue;
                                        }
                                        ExcelvalueQty = Convert.ToDecimal(ExcelValue2);
                                        ExcelvalueQty1 = Convert.ToInt32(ExcelvalueQty * 100);
                                        if (ExcelvalueQty1 <= 0)
                                        {
                                            continue;
                                        }
                                        for (int j = sAColNum1; j <= eAColNum1; j++)
                                        {

                                            newARow["ProductOrderId"] = ParentId;
                                            string GetMaterialBillsId = Guid.NewGuid().ToString().Substring(0, 12);
                                            newARow["GetMaterialBillsId"] = GetMaterialBillsId.ToUpper();
                                            ExcelRange Rang = Sheet1.Cells[i, j];
                                            object objectCellValue = Sheet1.GetValue(i, j);//单元格数据
                                            string CellValue = objectCellValue != null ? objectCellValue.ToString().Trim() : "";
                                            if (Rang.Merge)
                                            {
                                                CellValue = GetMergeValue(Sheet1, i, j);

                                            }
                                            switch (j)
                                            {
                                                case 1: newARow["MaterialType"] = CellValue; break;
                                                case 2:
                                                    if (System.Text.RegularExpressions.Regex.IsMatch(CellValue, @"^[-+]?[0-9]*\.?[0-9]+$"))
                                                    {
                                                        newARow["NumericalOrder"] = CellValue;

                                                    }
                                                    else
                                                    {

                                                        newARow["HardwareFitting"] = CellValue;
                                                    }

                                                    for (int q = 0; q < Pickingdt.Rows.Count; q++)
                                                    {
                                                        string MaterialDescriptionSQL = Pickingdt.Rows[q]["ProductDescription"].ToString();
                                                        string ProductName = Pickingdt.Rows[q]["ProductName"].ToString();
                                                        if (MaterialDescriptionSQL == MaterialDescription)
                                                        {
                                                            newARow["ProductName"] = ProductName;
                                                            break;
                                                        }
                                                    }

                                                    break;
                                                case 3: newARow["ProductDes"] = CellValue; break;
                                                case 4:
                                                    if (CellValue == "" || CellValue == null)
                                                    {
                                                        CellValue = "0";
                                                        Convert.ToSingle(CellValue);
                                                    }
                                                    else
                                                    {
                                                        if (System.Text.RegularExpressions.Regex.IsMatch(CellValue, @"^[-+]?[0-9]*\.?[0-9]+$"))
                                                        {
                                                            newARow["Qty"] = CellValue;
                                                        }
                                                        else
                                                        {
                                                            MessageBox.Show("请检查第" + i + "行第" + j + "列数据是否正确！！！");
                                                            IsNumber = false;
                                                        }
                                                    }
                                                    break;
                                                case 5: newARow["Unit"] = CellValue; break;
                                                case 6: newARow["PackingConfirmed"] = CellValue; break;
                                            }
                                        }
                                        if (IsNumber == false)
                                        {
                                            break;
                                        }
                                        GetMaterialBillsDataTable.Rows.Add(newARow);
                                    }
                                    GetMaterialBillsDataTable.TableName = "GetMaterialBills1";
                                    DS.Tables.Add(GetMaterialBillsDataTable);
                                    con.Close();
                                    //释放资源
                                    readerPicking.Close();
                                    readerPicking.Dispose();
                                    Pickingdt.Clear();
                                    Pickingdt.Dispose();
                                }
                            }
                            catch (Exception ex)
                            {
                                MessageBox.Show(ex.Message);
                            }
                            finally
                            {

                            }

                        }
                        //}
                        //else
                        //{
                        //    MessageBox.Show("领料单工作表不存在");
                        //    TheWorksheetExists = false;
                        //}

                    }
                    #endregion
                    //速美包装
                    #region
                    //if (TheWorksheetExists)
                    //{
                    //装箱单读取
                    //ExcelWorksheet Sheet1 = null;//数据所在Sheet
                    //Sheet1 = pck.Workbook.Worksheets["A6包装"];
                    ExcelWorksheet Sheet5 = null;//数据所在Sheet
                    Sheet5 = pck.Workbook.Worksheets["速美包装"];
                    if (Sheet5 != null)
                    {
                        try
                        {
                            int maxColumnNum = Sheet5.Dimension.End.Column;//最大列
                            int minColumnNum = Sheet5.Dimension.Start.Column;//最小列
                            int minRowNum = Sheet5.Dimension.Start.Row;//最小行
                            int maxRowNum = Sheet5.Dimension.End.Row;//最大行
                            int sRowNum = 5;//开始行
                            int eRowNum = 0;//结束行
                            int sAColNum = 1;//区域A的开始栏位
                            int eAColNum = 11;//区域A的结束栏位

                            string ExcelValue2 = "";
                            //创建数组
                            int[] list = new int[maxRowNum + 1];
                            //获取到结束行
                            for (int d = 5; d <= maxRowNum; d++)
                            {
                                string Num1Value = CStr(Sheet5.Cells[d, 1].Value);
                                if (Num1Value.Trim() == "拆解人" || Num1Value == "包装编号" || Num1Value.Trim() == "序号" || Num1Value.Trim() == "三、整件发货部分（功能柜）" || Num1Value.Trim() == "1.整件包装---可使用对口箱的柜体（抽屉柜、拉篮柜）（备注：所有速美整柜包装需增加15厚以上同柜体材质垫板）" || Num1Value.Trim() == "2.整件包装--所有无法使用对口箱的所有柜体" || Num1Value.Trim() == "散件包装的柜体---可使用一片成型包装箱的明细" || Num1Value.Trim() == "注：以上包装箱适用地柜560深、720高散件柜体；吊柜300深、720高柜体；高柜560深2160高的散件柜体（除特定两种柜形外），外地所有玻璃层板单独包装" || Num1Value.Trim() == "散件包装的柜体--所有无法使用一片成型包装箱的柜体散件（玻璃层板单独包装）" || Num1Value.Trim() == "散件包装柜体的背板" || Num1Value.Trim() == "二、散件门板部分（备注：所有速美门板包装需使用双层包装纸箱）" || Num1Value.Trim() == "1.散件包装的门板---可使用一片成型包装箱的明细" || Num1Value.Trim() == "2.散件包装的门板--所有无法使用一片成型包装箱的门板散件" || Num1Value.Trim() == "四、装饰部件部分（本地、外地通用）")
                                {
                                    eRowNum = d;
                                    //list[d] = d;
                                    //将非数据列放进数组
                                    if (Num1Value == "序号" || Num1Value == "包装编号" || Num1Value.Trim() == "三、整件发货部分（功能柜）" || Num1Value.Trim() == "1.整件包装---可使用对口箱的柜体（抽屉柜、拉篮柜）（备注：所有速美整柜包装需增加15厚以上同柜体材质垫板）" || Num1Value.Trim() == "2.整件包装--所有无法使用对口箱的所有柜体" || Num1Value.Trim() == "散件包装的柜体---可使用一片成型包装箱的明细" || Num1Value.Trim() == "注：以上包装箱适用地柜560深、720高散件柜体；吊柜300深、720高柜体；高柜560深2160高的散件柜体（除特定两种柜形外），外地所有玻璃层板单独包装" || Num1Value.Trim() == "散件包装的柜体--所有无法使用一片成型包装箱的柜体散件（玻璃层板单独包装）" || Num1Value.Trim() == "散件包装柜体的背板" || Num1Value.Trim() == "二、散件门板部分（备注：所有速美门板包装需使用双层包装纸箱）" || Num1Value.Trim() == "1.散件包装的门板---可使用一片成型包装箱的明细" || Num1Value.Trim() == "2.散件包装的门板--所有无法使用一片成型包装箱的门板散件" || Num1Value.Trim() == "四、装饰部件部分（本地、外地通用）")
                                    {
                                        list[d] = d;
                                    }
                                    continue;
                                }
                            }
                            //ExcelValue2 = CStr(Sheet.Cells[11, 9].Value);
                            //DataTable Packing_ListTable = Packing_List();
                            //A6包装数据读取
                            for (int i = sRowNum; i <= eRowNum; i++)
                            {
                                DataRow newARow = Packing_ListTable.NewRow();
                                ExcelValue2 = CStr(Sheet5.Cells[i, 9].Value);

                                ExcelRange Range = Sheet5.Cells[i, 5];
                                object objectCellNumber = Sheet5.GetValue(i, 5);//单元格数据
                                string CellNumber = objectCellNumber != null ? objectCellNumber.ToString().Trim() : "";
                                if (Range.Merge)
                                {
                                    CellNumber = GetMergeValue(Sheet5, i, 5);
                                }

                                if (CellNumber == "" || CellNumber == null)
                                {
                                    continue;
                                }
                                if (System.Text.RegularExpressions.Regex.IsMatch(ExcelValue2.ToString(), @"^[-+]?[0-9]*\.?[0-9]+$") || ExcelValue2.Trim() == "车间调配")
                                {
                                    decimal Value = 0;
                                    int Value2 = 0;
                                    if (ExcelValue2 == "车间调配")
                                    {

                                    }
                                    else
                                    {
                                        Value = decimal.Parse(ExcelValue2);
                                        Value2 = Convert.ToInt32(Value);
                                    }
                                    if (Value > 0 || ExcelValue2 == "车间调配")
                                    {
                                        for (int j = sAColNum; j <= eAColNum; j++)
                                        {
                                            newARow["ProductOrderId"] = ParentId;
                                            //string TheDeliveryCateGory = CStr(Sheet.Cells[i, 1].Value).Trim();
                                            ExcelRange Rang = Sheet5.Cells[i, j];
                                            object objectCellValue = Sheet5.GetValue(i, j);//单元格数据
                                            string CellValue = objectCellValue != null ? objectCellValue.ToString().Trim() : "";
                                            if (Rang.Merge)
                                            {
                                                CellValue = GetMergeValue(Sheet5, i, j);
                                            }


                                            switch (j)
                                            {
                                                case 1: newARow["PackingNumber"] = CellValue; break;
                                                case 2:

                                                    newARow["Wide"] = CellValue;
                                                    break;
                                                case 3:

                                                    newARow["High"] = CellValue;
                                                    break;
                                                case 4:
                                                    newARow["Depth"] = CellValue;
                                                    break;
                                                case 5: newARow["Cell"] = CellValue; break;
                                                case 6: newARow["CabinetType"] = CellValue; break;
                                                case 7: newARow["NameOfPackagingMaterials"] = CellValue; break;
                                                case 8:
                                                    if (CellValue == "" || CellValue == null)
                                                    {
                                                        newARow["MaterialCode"] = "null";
                                                    }
                                                    else
                                                    {
                                                        newARow["MaterialCode"] = CellValue;
                                                    }
                                                    break;

                                                case 9:
                                                    if (System.Text.RegularExpressions.Regex.IsMatch(CellValue, @"^[-+]?[0-9]*\.?[0-9]+$"))
                                                    {
                                                        decimal QtyValue = Convert.ToDecimal(CellValue);
                                                        newARow["Qty"] = QtyValue;
                                                    }
                                                    else
                                                    {
                                                        newARow["PackingQuantity"] = CellValue;
                                                    }
                                                    break;
                                                case 10:
                                                    if (CellValue == "车间调配")
                                                    {
                                                        newARow["Unit"] = null;
                                                    }
                                                    else
                                                    {
                                                        newARow["Unit"] = CellValue;
                                                    }
                                                    break;
                                                case 11: newARow["Remark"] = CellValue; break;
                                            }
                                            int TheDeliveryCateGoryId = 0;
                                            int TheDeliveryCateGoryId1 = 0;
                                            int TheDeliveryCateGoryId2 = 0;
                                            string TheDeliveryCateGory = "";
                                            string PackingGroup = "";
                                            for (int q = 5; q <= eRowNum; q++)
                                            {
                                                if (list[q] == 0 || CStr(Sheet5.Cells[list[q], 1].Value).Trim() == "序号" || CStr(Sheet5.Cells[list[q], 1].Value).Trim() == "注：以上包装箱适用地柜560深、720高散件柜体；吊柜300深、720高柜体；高柜560深2160高的散件柜体（除特定两种柜形外），外地所有玻璃层板单独包装")
                                                {
                                                    continue;
                                                }
                                                TheDeliveryCateGory = CStr(Sheet5.Cells[list[q], 1].Value).Trim();
                                                if (TheDeliveryCateGory == "三、整件发货部分（功能柜）")
                                                {
                                                    TheDeliveryCateGoryId = q;
                                                }
                                                if (TheDeliveryCateGory == "二、散件门板部分（备注：所有速美门板包装需使用双层包装纸箱）")
                                                {
                                                    TheDeliveryCateGoryId1 = q;
                                                }
                                                if (TheDeliveryCateGory == "四、装饰部件部分（本地、外地通用）")
                                                {
                                                    TheDeliveryCateGoryId2 = q;
                                                }
                                            }
                                            int PackingGroupId = 0;
                                            int PackingGroupId1 = 0;
                                            int PackingGroupId2 = 0;
                                            int PackingGroupId3 = 0;
                                            int PackingGroupId4 = 0;
                                            int PackingGroupId5 = 0;
                                            int PackingGroupId6 = 0;

                                            for (int q = 6; q < eRowNum; q++)
                                            {
                                                if (list[q] == 0 || CStr(Sheet5.Cells[list[q], 1].Value).Trim() == "序号" || CStr(Sheet5.Cells[list[q], 1].Value).Trim() == "注：以上包装箱适用地柜560深、720高散件柜体；吊柜300深、720高柜体；高柜560深2160高的散件柜体（除特定两种柜形外），外地所有玻璃层板单独包装")
                                                {
                                                    continue;
                                                }
                                                PackingGroup = CStr(Sheet5.Cells[list[q], 1].Value).Trim();
                                                if (PackingGroup == "1.整件包装---可使用对口箱的柜体（抽屉柜、拉篮柜）（备注：所有速美整柜包装需增加15厚以上同柜体材质垫板）")
                                                {
                                                    PackingGroupId = q;
                                                }
                                                if (PackingGroup == "2.整件包装--所有无法使用对口箱的所有柜体")
                                                {
                                                    PackingGroupId1 = q;
                                                }
                                                if (PackingGroup == "散件包装的柜体---可使用一片成型包装箱的明细")
                                                {
                                                    PackingGroupId2 = q;
                                                }
                                                if (PackingGroup == "散件包装的柜体--所有无法使用一片成型包装箱的柜体散件（玻璃层板单独包装）")
                                                {
                                                    PackingGroupId3 = q;
                                                }
                                                if (PackingGroup == "散件包装柜体的背板")
                                                {
                                                    PackingGroupId4 = q;
                                                }
                                                if (PackingGroup == "1.散件包装的门板---可使用一片成型包装箱的明细")
                                                {
                                                    PackingGroupId5 = q;
                                                }
                                                if (PackingGroup == "2.散件包装的门板--所有无法使用一片成型包装箱的门板散件")
                                                {
                                                    PackingGroupId6 = q;
                                                }
                                            }


                                            if (i >= TheDeliveryCateGoryId && i < TheDeliveryCateGoryId1)
                                            {
                                                newARow["TheDeliveryCateGory"] = CStr(Sheet5.Cells[TheDeliveryCateGoryId, 1].Value).Trim();
                                            }
                                            else if (i >= TheDeliveryCateGoryId1 && i < TheDeliveryCateGoryId2)
                                            {
                                                newARow["TheDeliveryCateGory"] = CStr(Sheet5.Cells[TheDeliveryCateGoryId1, 1].Value).Trim();
                                            }
                                            else if (i >= TheDeliveryCateGoryId2)
                                            {
                                                newARow["TheDeliveryCateGory"] = CStr(Sheet5.Cells[TheDeliveryCateGoryId2, 1].Value).Trim();
                                            }

                                            if (i >= PackingGroupId && i < PackingGroupId1)
                                            {
                                                newARow["PackingGroup"] = CStr(Sheet5.Cells[PackingGroupId, 1].Value).Trim();
                                            }
                                            if (i >= PackingGroupId1 && i < PackingGroupId2)
                                            {
                                                newARow["PackingGroup"] = CStr(Sheet5.Cells[PackingGroupId1, 1].Value).Trim();
                                            }
                                            if (i >= PackingGroupId2 && i < PackingGroupId3)
                                            {
                                                newARow["PackingGroup"] = CStr(Sheet5.Cells[PackingGroupId2, 1].Value).Trim();
                                            }
                                            if (i >= PackingGroupId3 && i < PackingGroupId4)
                                            {
                                                newARow["PackingGroup"] = CStr(Sheet5.Cells[PackingGroupId3, 1].Value).Trim();
                                            }
                                            if (i >= PackingGroupId4 && i < PackingGroupId5)
                                            {
                                                newARow["PackingGroup"] = CStr(Sheet5.Cells[PackingGroupId4, 1].Value).Trim();
                                            }
                                            if (i >= PackingGroupId5 && i < PackingGroupId6)
                                            {
                                                newARow["PackingGroup"] = CStr(Sheet5.Cells[PackingGroupId5, 1].Value).Trim();
                                            }
                                            if (i >= PackingGroupId6 && i <= TheDeliveryCateGoryId2)
                                            {
                                                newARow["PackingGroup"] = CStr(Sheet5.Cells[PackingGroupId6, 1].Value).Trim();
                                            }
                                            if (i >= TheDeliveryCateGoryId2)
                                            {
                                                newARow["PackingGroup"] = null;
                                            }
                                        }
                                    }
                                    else
                                    {
                                        continue;
                                    }
                                }
                                if ((ExcelValue2 == "") || (ExcelValue2 == null) || (ExcelValue2 == "数量"))
                                {
                                    continue;
                                }
                                Packing_ListTable.Rows.Add(newARow);

                            }
                            Packing_ListTable.TableName = "SuMeiLi_Packaging";
                            DS.Tables.Add(Packing_ListTable);
                            list = null;
                        }
                        catch (Exception ex)
                        {
                            MessageBox.Show(ex.Message);
                        }
                        //}
                    }
                    #endregion
                    //A6包装
                    #region
                    //if (TheWorksheetExists)
                    //{
                    //装箱单读取
                    //ExcelWorksheet Sheet1 = null;//数据所在Sheet
                    //Sheet1 = pck.Workbook.Worksheets["A6包装"];
                    ExcelWorksheet Sheet4 = null;//数据所在Sheet
                    Sheet4 = pck.Workbook.Worksheets["A6包装"];
                    if (Sheet4 != null)
                    {
                        try
                        {
                            int maxColumnNum = Sheet4.Dimension.End.Column;//最大列
                            int minColumnNum = Sheet4.Dimension.Start.Column;//最小列
                            int minRowNum = Sheet4.Dimension.Start.Row;//最小行
                            int maxRowNum = Sheet4.Dimension.End.Row;//最大行
                            int sRowNum = 5;//开始行
                            int eRowNum = 0;//结束行
                            int sAColNum = 1;//区域A的开始栏位
                            int eAColNum = 11;//区域A的结束栏位

                            string ExcelValue2 = "";
                            //创建数组
                            int[] list = new int[maxRowNum + 1];
                            //获取结束行
                            for (int d = 5; d <= maxRowNum; d++)
                            {
                                string Num1Value = CStr(Sheet4.Cells[d, 1].Value);
                                if (Num1Value.Trim() == "备注：灯箱底板、拉篮、含玻璃镜子的板件都需要打硬包装" || Num1Value.Trim() == "包装编号" || Num1Value.Trim() == "序号" || Num1Value.Trim() == "三、整件发货部分（功能柜）" || Num1Value.Trim() == "1.整件包装---可使用对口箱的柜体（抽屉柜、拉篮柜）（备注：150宽、450宽、600宽整柜包装需增加15厚以上同柜体材质垫" || Num1Value.Trim() == "2.整件包装--所有无法使用对口箱的所有柜体" || Num1Value.Trim() == "散件包装的柜体---可使用一片成型包装箱的明细" || Num1Value.Trim() == "注：以上包装箱适用地柜560深、720高散件柜体；吊柜300深、720高柜体；高柜560深2160高的散件柜体（除特定两种柜形外），外地所有玻璃层板单独包装" || Num1Value.Trim() == "散件包装的柜体--所有无法使用一片成型包装箱的柜体散件（玻璃层板单独包装）" || Num1Value.Trim() == "散件包装柜体的背板" || Num1Value.Trim() == "二、散件门板部分" || Num1Value.Trim() == "1.散件包装的门板---可使用一片成型包装箱的明细" || Num1Value.Trim() == "2.散件包装的门板--所有无法使用一片成型包装箱的门板散件" || Num1Value.Trim() == "四、装饰部件部分（本地、外地通用）")
                                {
                                    eRowNum = d;
                                    //list[d] = d;
                                    //将非数据行放进数组
                                    if (Num1Value.Trim() == "备注：灯箱底板、拉篮、含玻璃镜子的板件都需要打硬包装" || Num1Value.Trim() == "包装编号" || Num1Value.Trim() == "序号" || Num1Value.Trim() == "三、整件发货部分（功能柜）" || Num1Value.Trim() == "1.整件包装---可使用对口箱的柜体（抽屉柜、拉篮柜）（备注：150宽、450宽、600宽整柜包装需增加15厚以上同柜体材质垫" || Num1Value.Trim() == "2.整件包装--所有无法使用对口箱的所有柜体" || Num1Value.Trim() == "散件包装的柜体---可使用一片成型包装箱的明细" || Num1Value.Trim() == "注：以上包装箱适用地柜560深、720高散件柜体；吊柜300深、720高柜体；高柜560深2160高的散件柜体（除特定两种柜形外），外地所有玻璃层板单独包装" || Num1Value.Trim() == "散件包装的柜体--所有无法使用一片成型包装箱的柜体散件（玻璃层板单独包装）" || Num1Value.Trim() == "散件包装柜体的背板" || Num1Value.Trim() == "二、散件门板部分" || Num1Value.Trim() == "1.散件包装的门板---可使用一片成型包装箱的明细" || Num1Value.Trim() == "2.散件包装的门板--所有无法使用一片成型包装箱的门板散件" || Num1Value.Trim() == "四、装饰部件部分（本地、外地通用）")
                                    {
                                        list[d] = d;
                                    }
                                    continue;
                                }
                            }
                            //ExcelValue2 = CStr(Sheet.Cells[11, 9].Value);
                            //DataTable Packing_ListTable = Packing_List();
                            //A6包装数据读取
                            for (int i = sRowNum; i <= eRowNum; i++)
                            {
                                DataRow newARow = Packing_ListA6Table.NewRow();
                                ExcelValue2 = CStr(Sheet4.Cells[i, 9].Value);

                                ExcelRange Range = Sheet4.Cells[i, 5];
                                object objectCellNumber = Sheet4.GetValue(i, 5);//单元格数据
                                string CellNumber = objectCellNumber != null ? objectCellNumber.ToString().Trim() : "";
                                if (Range.Merge)
                                {
                                    CellNumber = GetMergeValue(Sheet4, i, 5);
                                }

                                if (CellNumber == "" || CellNumber == null)
                                {
                                    continue;
                                }
                                if (System.Text.RegularExpressions.Regex.IsMatch(ExcelValue2.ToString(), @"^[-+]?[0-9]*\.?[0-9]+$") || ExcelValue2.Trim() == "车间调配")
                                {
                                    decimal Value = 0;
                                    int Value2 = 0;
                                    if (ExcelValue2 == "车间调配")
                                    {

                                    }
                                    else
                                    {
                                        Value = decimal.Parse(ExcelValue2);
                                        Value2 = Convert.ToInt32(Value);
                                    }
                                    if (Value > 0 || ExcelValue2 == "车间调配")
                                    {
                                        for (int j = sAColNum; j <= eAColNum; j++)
                                        {
                                            newARow["ProductOrderId"] = ParentId;
                                            //string TheDeliveryCateGory = CStr(Sheet.Cells[i, 1].Value).Trim();
                                            ExcelRange Rang = Sheet4.Cells[i, j];
                                            object objectCellValue = Sheet4.GetValue(i, j);//单元格数据
                                            string CellValue = objectCellValue != null ? objectCellValue.ToString().Trim() : "";
                                            if (Rang.Merge)
                                            {
                                                CellValue = GetMergeValue(Sheet4, i, j);
                                            }


                                            switch (j)
                                            {
                                                case 1: newARow["PackingNumber"] = CellValue; break;
                                                case 2:

                                                    newARow["Wide"] = CellValue;
                                                    break;
                                                case 3:

                                                    newARow["High"] = CellValue;
                                                    break;
                                                case 4:
                                                    string ExcelValue4 = CStr(Sheet4.Cells[i, j].Value);


                                                    if (ExcelValue4 == "" || ExcelValue4 == null)
                                                    {
                                                        newARow["Depth"] = "0";
                                                    }
                                                    else
                                                    {
                                                        newARow["Depth"] = CellValue;
                                                    }

                                                    break;
                                                case 5: newARow["Cell"] = CellValue; break;
                                                case 6: newARow["CabinetType"] = CellValue; break;
                                                case 7: newARow["NameOfPackagingMaterials"] = CellValue; break;
                                                case 8: newARow["MaterialCode"] = CellValue; break;

                                                case 9:
                                                    if (System.Text.RegularExpressions.Regex.IsMatch(CellValue, @"^[-+]?[0-9]*\.?[0-9]+$"))
                                                    {
                                                        newARow["Qty"] = CellValue;
                                                    }
                                                    else
                                                    {
                                                        newARow["PackingQuantity"] = CellValue;
                                                    }
                                                    break;
                                                case 10:
                                                    if (CellValue == "车间调配")
                                                    {
                                                        newARow["Unit"] = null;
                                                    }
                                                    else
                                                    {
                                                        newARow["Unit"] = CellValue;
                                                    }
                                                    break;
                                                case 11: newARow["Remark"] = CellValue; break;
                                            }
                                            int TheDeliveryCateGoryId = 0;
                                            int TheDeliveryCateGoryId1 = 0;
                                            int TheDeliveryCateGoryId2 = 0;
                                            string TheDeliveryCateGory = "";
                                            string PackingGroup = "";
                                            for (int q = 5; q < eRowNum; q++)
                                            {
                                                if (list[q] == 0 || CStr(Sheet4.Cells[list[q], 1].Value).Trim() == "序号" || CStr(Sheet4.Cells[list[q], 1].Value).Trim() == "注：以上包装箱适用地柜560深、720高散件柜体；吊柜300深、720高柜体；高柜560深2160高的散件柜体（除特定两种柜形外），外地所有玻璃层板单独包装")
                                                {
                                                    continue;
                                                }
                                                TheDeliveryCateGory = CStr(Sheet4.Cells[list[q], 1].Value).Trim();
                                                if (TheDeliveryCateGory == "三、整件发货部分（功能柜）")
                                                {
                                                    TheDeliveryCateGoryId = q;
                                                }
                                                if (TheDeliveryCateGory == "二、散件门板部分")
                                                {
                                                    TheDeliveryCateGoryId1 = q;
                                                }
                                                if (TheDeliveryCateGory == "四、装饰部件部分（本地、外地通用）")
                                                {
                                                    TheDeliveryCateGoryId2 = q;
                                                }
                                            }
                                            int PackingGroupId = 0;
                                            int PackingGroupId1 = 0;
                                            int PackingGroupId2 = 0;
                                            int PackingGroupId3 = 0;
                                            int PackingGroupId4 = 0;
                                            int PackingGroupId5 = 0;
                                            int PackingGroupId6 = 0;

                                            for (int q = 6; q < eRowNum; q++)
                                            {
                                                if (list[q] == 0 || CStr(Sheet4.Cells[list[q], 1].Value).Trim() == "序号" || CStr(Sheet4.Cells[list[q], 1].Value).Trim() == "注：以上包装箱适用地柜560深、720高散件柜体；吊柜300深、720高柜体；高柜560深2160高的散件柜体（除特定两种柜形外），外地所有玻璃层板单独包装")
                                                {
                                                    continue;
                                                }
                                                PackingGroup = CStr(Sheet4.Cells[list[q], 1].Value).Trim();
                                                if (PackingGroup == "1.整件包装---可使用对口箱的柜体（抽屉柜、拉篮柜）（备注：150宽、450宽、600宽整柜包装需增加15厚以上同柜体材质垫")
                                                {
                                                    PackingGroupId = q;
                                                }
                                                if (PackingGroup == "2.整件包装--所有无法使用对口箱的所有柜体")
                                                {
                                                    PackingGroupId1 = q;
                                                }
                                                if (PackingGroup == "散件包装的柜体---可使用一片成型包装箱的明细")
                                                {
                                                    PackingGroupId2 = q;
                                                }
                                                if (PackingGroup == "散件包装的柜体--所有无法使用一片成型包装箱的柜体散件（玻璃层板单独包装）")
                                                {
                                                    PackingGroupId3 = q;
                                                }
                                                if (PackingGroup == "散件包装柜体的背板")
                                                {
                                                    PackingGroupId4 = q;
                                                }
                                                if (PackingGroup == "1.散件包装的门板---可使用一片成型包装箱的明细")
                                                {
                                                    PackingGroupId5 = q;
                                                }
                                                if (PackingGroup == "2.散件包装的门板--所有无法使用一片成型包装箱的门板散件")
                                                {
                                                    PackingGroupId6 = q;
                                                }
                                            }


                                            if (i >= TheDeliveryCateGoryId && i < TheDeliveryCateGoryId1)
                                            {
                                                newARow["TheDeliveryCateGory"] = CStr(Sheet4.Cells[TheDeliveryCateGoryId, 1].Value).Trim();
                                            }
                                            else if (i >= TheDeliveryCateGoryId1 && i < TheDeliveryCateGoryId2)
                                            {
                                                newARow["TheDeliveryCateGory"] = CStr(Sheet4.Cells[TheDeliveryCateGoryId1, 1].Value).Trim();
                                            }
                                            else if (i >= TheDeliveryCateGoryId2)
                                            {
                                                newARow["TheDeliveryCateGory"] = CStr(Sheet4.Cells[TheDeliveryCateGoryId2, 1].Value).Trim();
                                            }

                                            if (i >= PackingGroupId && i < PackingGroupId1)
                                            {
                                                newARow["PackingGroup"] = CStr(Sheet4.Cells[PackingGroupId, 1].Value).Trim();
                                            }
                                            if (i >= PackingGroupId1 && i < PackingGroupId2)
                                            {
                                                newARow["PackingGroup"] = CStr(Sheet4.Cells[PackingGroupId1, 1].Value).Trim();
                                            }
                                            if (i >= PackingGroupId2 && i < PackingGroupId3)
                                            {
                                                newARow["PackingGroup"] = CStr(Sheet4.Cells[PackingGroupId2, 1].Value).Trim();
                                            }
                                            if (i >= PackingGroupId3 && i < PackingGroupId4)
                                            {
                                                newARow["PackingGroup"] = CStr(Sheet4.Cells[PackingGroupId3, 1].Value).Trim();
                                            }
                                            if (i >= PackingGroupId4 && i < PackingGroupId5)
                                            {
                                                newARow["PackingGroup"] = CStr(Sheet4.Cells[PackingGroupId4, 1].Value).Trim();
                                            }
                                            if (i >= PackingGroupId5 && i < PackingGroupId6)
                                            {
                                                newARow["PackingGroup"] = CStr(Sheet4.Cells[PackingGroupId5, 1].Value).Trim();
                                            }
                                            if (i >= PackingGroupId6 && i < TheDeliveryCateGoryId2)
                                            {
                                                newARow["PackingGroup"] = CStr(Sheet4.Cells[PackingGroupId6, 1].Value).Trim();
                                            }
                                            if (i >= TheDeliveryCateGoryId2)
                                            {
                                                newARow["PackingGroup"] = null;
                                            }
                                        }
                                    }
                                    else
                                    {
                                        continue;
                                    }

                                }

                                if ((ExcelValue2 == "") || (ExcelValue2 == null) || (ExcelValue2 == "数量"))
                                {
                                    continue;
                                }
                                Packing_ListA6Table.Rows.Add(newARow);

                            }
                            Packing_ListA6Table.TableName = "A6Li_Packaging";
                            DS.Tables.Add(Packing_ListA6Table);
                            list = null;
                        }
                        catch (Exception ex)
                        {
                            MessageBox.Show(ex.Message);
                        }
                        // }
                    }
                    #endregion
                    DataToSQL Data = new DataToSQL();
                    Data.DataToSQLobj(DS);
                    #region
                    ////A6免漆领料单
                    //#region
                    //ExcelWorksheet A6NoPaintSheet = null;
                    //A6NoPaintSheet = pck.Workbook.Worksheets["A6免漆领料单"];
                    //if (A6NoPaintSheet.Hidden.ToString()=="Visible")
                    //{
                    //    try
                    //    {
                    //        //获取Excel表单最大列
                    //        int MaxColum = A6NoPaintSheet.Dimension.End.Column;
                    //        //获取Excel表单开始列
                    //        //int StartColum = A6NoPaintSheet.Dimension.Start.Column;
                    //        //获取Excel表单最大行
                    //        int MaxRow = A6NoPaintSheet.Dimension.End.Row;
                    //        //获取Excel表单开始行
                    //        //int StartRow = A6NoPaintSheet.Dimension.Start.Row;
                    //        int SRow = 5;
                    //        int MRow = 0;
                    //        int SColum = 1;
                    //        int MColum = 6;
                    //        //获取表单数据区结束行
                    //        for (int i = SRow; i < MaxRow; i++)
                    //        {
                    //            if (A6NoPaintSheet.Cells[i, 1].Value == null)
                    //            {
                    //                continue;
                    //            }
                    //            if (A6NoPaintSheet.Cells[i, 1].Value.ToString().Trim() == "拆解人")
                    //            {
                    //                MRow = i - 3;
                    //                break;
                    //            }
                    //        }

                    //        //为领料单创建一个datatable
                    //        DataTable PickingTable = new DataTable();
                    //        PickingTable.Columns.Add(string.Format("ProductDescription"), Type.GetType("System.String"));//物料描述
                    //        PickingTable.Columns.Add(string.Format("ProductName"), Type.GetType("System.String"));
                    //        DataRow Pickingrows = PickingTable.NewRow();
                    //        //读取物料描述信息存放在datatable中
                    //        for (int i = SRow; i < MRow; i++)
                    //        {
                    //            object ProductDescription = CStr(A6NoPaintSheet.Cells[i, 3].Value);
                    //            if (ProductDescription == null)
                    //            {
                    //                continue;
                    //            }
                    //            //string Qty = CStr(A6NoPaintSheet.Cells[i, 4].Value);
                    //            //if (Qty == "" || Qty == null)
                    //            //{
                    //            //    Qty = "0";
                    //            //}
                    //            //decimal QTY = Convert.ToDecimal(Qty);
                    //            //int Qty1 = Convert.ToInt32(QTY * 100);
                    //            //if (ProductDescription == "" || ProductDescription == null || Qty1 == 0 || Qty1 < 0)
                    //            //{
                    //            //    continue;
                    //            //}
                    //            Pickingrows["ProductDescription"] = ProductDescription.ToString();
                    //            PickingTable.Rows.Add(Pickingrows.ItemArray);

                    //        }
                    //        SqlConnection con = new SqlConnection("Data Source=192.168.124.72;Initial Catalog=OrBitXI;User ID=sa;PassWord=admin@2017");
                    //        con.Open();
                    //        //调用存储过程根据物料描述获取到物料编号存放在另一个datatable中
                    //        SqlCommand Pickingcmd = new SqlCommand();
                    //        Pickingcmd.CommandText = "Pro_GetProductName";
                    //        Pickingcmd.Connection = con;
                    //        Pickingcmd.CommandType = CommandType.StoredProcedure;
                    //        SqlParameter parameter =
                    //        new SqlParameter("@Pro_GetProductName", SqlDbType.Structured)
                    //        {
                    //            Value = PickingTable
                    //        };

                    //        Pickingcmd.Parameters.Add(parameter);
                    //        Pickingcmd.ExecuteNonQuery();
                    //        Pickingcmd.Parameters.Add(new SqlParameter("@return", SqlDbType.Int));
                    //        Pickingcmd.Parameters["@return"].Direction = ParameterDirection.ReturnValue;
                    //        SqlDataReader readerPicking = Pickingcmd.ExecuteReader();
                    //        DataTable Pickingdt = new DataTable();
                    //        Pickingdt.Load(readerPicking);
                    //        con.Close();
                    //        //读取Excel数据
                    //        for (int i = SRow; i < MRow; i++)
                    //        {
                    //            object ProductDescription = A6NoPaintSheet.Cells[i, 3].Value;
                    //            //string Qty = A6NoPaintSheet.Cells[i, 4].Value.ToString();
                    //            //float Qty1 = Convert.ToSingle(Qty);
                    //            if (ProductDescription == null || ProductDescription.ToString() == "")
                    //            {
                    //                continue;
                    //            }
                    //            DataRow A6NoPaintSheetTableRow = A6NoPaintSheetTable.NewRow();
                    //            string CateGory = A6NoPaintSheet.Cells[1, 1].Value.ToString();
                    //            A6NoPaintSheetTableRow["CateGory"] = CateGory.Trim().Substring(3, 2);
                    //            A6NoPaintSheetTableRow["ProductOrderId"] = ParentId;
                    //            string GetMaterialBillsId = Guid.NewGuid().ToString().Substring(0, 12);
                    //            A6NoPaintSheetTableRow["GetMaterialBillsId"] = GetMaterialBillsId.ToUpper();
                    //            for (int a = 0; a < Pickingdt.Rows.Count; a++)
                    //            {
                    //                A6NoPaintSheetTableRow["ProductName"] = Pickingdt.Rows[a]["ProductName"].ToString();
                    //            }
                    //            for (int j = SColum; j < MColum; j++)
                    //            {
                    //                switch (j)
                    //                {
                    //                    case 1:
                    //                        A6NoPaintSheetTableRow["MaterialType"] = A6NoPaintSheet.Cells[i, j].Value;
                    //                        break;
                    //                    case 3:
                    //                        A6NoPaintSheetTableRow["ProductDes"] = A6NoPaintSheet.Cells[i, j].Value;
                    //                        break;
                    //                    case 4:
                    //                        //string Qty=A6NoPaintSheet.Cells[i, j].Value.ToString();
                    //                        //float Qty1=Convert.ToSingle( Qty);
                    //                        A6NoPaintSheetTableRow["Qty"] = A6NoPaintSheet.Cells[i, j].Value;
                    //                        break;
                    //                    case 5:
                    //                        A6NoPaintSheetTableRow["Unit"] = A6NoPaintSheet.Cells[i, j].Value;
                    //                        break;
                    //                    case 6:
                    //                        A6NoPaintSheetTableRow["PackingConfirmed"] = A6NoPaintSheet.Cells[i, j].Value;
                    //                        break;
                    //                }
                    //            }
                    //            A6NoPaintSheetTable.Rows.Add(A6NoPaintSheetTableRow);
                    //        }
                    //        //释放资源
                    //        readerPicking.Close();
                    //        readerPicking.Dispose();
                    //        Pickingdt.Clear();
                    //        Pickingdt.Dispose();
                    //    }
                    //    catch (Exception ex)
                    //    {
                    //        MessageBox.Show(ex.Message);
                    //    }
                    //}
                    //#endregion
                    ////速美免漆下料单
                    //#region
                    //ExcelWorksheet MeiWenqiBlankingSheet = null;
                    //MeiWenqiBlankingSheet = pck.Workbook.Worksheets["速美免漆下料单"];
                    //if (MeiWenqiBlankingSheet != null)
                    //{
                    //    try
                    //    {
                    //        //int MeiWenqiBlankingSheetSRow = MeiWenqiBlankingSheet.Dimension.Start.Row;
                    //        int MeiWenqiBlankingSheetERow = MeiWenqiBlankingSheet.Dimension.End.Row;
                    //        int MeiWenqiBlankingSheetSColum = MeiWenqiBlankingSheet.Dimension.Start.Column;
                    //        //int MeiWenqiBlankingSheetEcolum = MeiWenqiBlankingSheet.Dimension.End.Column;

                    //        int MeiWenqiBlankingSheetStartRow = 7;
                    //        int MeiWenqiBlankingSheetEendRow = 0;
                    //        int MeiWenqiBlankingSheetStartColum = 1;
                    //        int MeiWenqiBlankingSheetEndColum = 13;

                    //        for (int i = 65; i < MeiWenqiBlankingSheetERow; i++)
                    //        {
                    //            if (MeiWenqiBlankingSheet.Cells[i, 1].Value.ToString().Trim().Replace("\n", "") == "注：所有下料纹理方向均为高度方向如有材质、颜色、尺寸不明请和工艺组联系并确认！")
                    //            {
                    //                MeiWenqiBlankingSheetEendRow = i;
                    //                break;
                    //            }
                    //        }

                    //        for (int i = MeiWenqiBlankingSheetStartRow; i < MeiWenqiBlankingSheetEendRow; i++)
                    //        {
                    //            if (MeiWenqiBlankingSheet.Cells[i, 5].Value == null || MeiWenqiBlankingSheet.Cells[i, 5].Value.ToString() == "" || !System.Text.RegularExpressions.Regex.IsMatch(MeiWenqiBlankingSheet.Cells[i, 1].Value.ToString(), @"^[-+]?[0-9]*\.?[0-9]+$"))
                    //            {
                    //                continue;
                    //            }
                    //            DataRow MeiWenqiBlankingSheetTableRow = MeiWenqiBlankingSheetTable.NewRow();
                    //            MeiWenqiBlankingSheetTableRow["ProductOrderId"] = ParentId;
                    //            string IssueMaterialBillsId = Guid.NewGuid().ToString().Substring(0, 12);
                    //            MeiWenqiBlankingSheetTableRow["IssueMaterialBillsId"] = IssueMaterialBillsId.ToUpper();
                    //            MeiWenqiBlankingSheetTableRow["HandType"] = MeiWenqiBlankingSheet.Cells[3, 2].Value;
                    //            MeiWenqiBlankingSheetTableRow["FaceConduct"] = MeiWenqiBlankingSheet.Cells[3, 4].Value;
                    //            string PlateType = MeiWenqiBlankingSheet.Cells[1, 1].Value.ToString();
                    //            MeiWenqiBlankingSheetTableRow["PlateType"] = PlateType.Substring(5, 2);
                    //            MeiWenqiBlankingSheetTableRow["Remark"] = MeiWenqiBlankingSheet.Cells[5, 11].Value;
                    //            MeiWenqiBlankingSheetTableRow["MaterialNote"] = MeiWenqiBlankingSheet.Cells[4, 2].Value;
                    //            for (int j = MeiWenqiBlankingSheetStartColum; j < MeiWenqiBlankingSheetEndColum; j++)
                    //            {
                    //                switch (j)
                    //                {
                    //                    case 1:
                    //                        MeiWenqiBlankingSheetTableRow["OrderDetailId"] = MeiWenqiBlankingSheet.Cells[i, j].Value;
                    //                        break;
                    //                    case 2:
                    //                        MeiWenqiBlankingSheetTableRow["FWide"] = MeiWenqiBlankingSheet.Cells[i, j].Value;
                    //                        break;
                    //                    case 3:
                    //                        MeiWenqiBlankingSheetTableRow["FHigh"] = MeiWenqiBlankingSheet.Cells[i, j].Value;
                    //                        break;
                    //                    case 4:
                    //                        MeiWenqiBlankingSheetTableRow["Qty"] = MeiWenqiBlankingSheet.Cells[i, j].Value;
                    //                        break;
                    //                    case 5:
                    //                        MeiWenqiBlankingSheetTableRow["PlateName"] = MeiWenqiBlankingSheet.Cells[i, j].Value;
                    //                        break;
                    //                    case 6:
                    //                        MeiWenqiBlankingSheetTableRow["CutThick"] = MeiWenqiBlankingSheet.Cells[i, j].Value;
                    //                        break;
                    //                    case 7:
                    //                        MeiWenqiBlankingSheetTableRow["CutWide"] = MeiWenqiBlankingSheet.Cells[i, j].Value;
                    //                        break;
                    //                    case 8:
                    //                        MeiWenqiBlankingSheetTableRow["CutHigh"] = MeiWenqiBlankingSheet.Cells[i, j].Value;
                    //                        break;
                    //                    case 9:
                    //                        MeiWenqiBlankingSheetTableRow["CutQty"] = MeiWenqiBlankingSheet.Cells[i, j].Value;
                    //                        break;
                    //                    case 10:
                    //                        MeiWenqiBlankingSheetTableRow["CombineMark"] = MeiWenqiBlankingSheet.Cells[i, j].Value;
                    //                        break;
                    //                    case 11:
                    //                        MeiWenqiBlankingSheetTableRow["CenterMaterials"] = MeiWenqiBlankingSheet.Cells[i, j].Value;
                    //                        break;
                    //                    case 12:
                    //                        MeiWenqiBlankingSheetTableRow["DisplayMaterialSummary"] = MeiWenqiBlankingSheet.Cells[i, j].Value;
                    //                        break;
                    //                    case 13:
                    //                        MeiWenqiBlankingSheetTableRow["AreaOfContour"] = MeiWenqiBlankingSheet.Cells[i, j].Value;
                    //                        break;
                    //                }
                    //            }
                    //            MeiWenqiBlankingSheetTable.Rows.Add(MeiWenqiBlankingSheetTableRow);
                    //        }
                    //    }
                    //    catch (Exception ex)
                    //    {
                    //        MessageBox.Show(ex.Message);
                    //    }
                    //    finally
                    //    {

                    //    }
                    //}
                    //#endregion
                    ////速美免漆领料单
                    //#region
                    //ExcelWorksheet MeiWenqiRequisitionSheet = null;
                    //MeiWenqiRequisitionSheet = pck.Workbook.Worksheets["速美免漆领料单"];
                    //if (MeiWenqiBlankingSheet != null)
                    //{
                    //    try
                    //    {
                    //        int MeiWenqiRequisitionSheetStartRow = MeiWenqiRequisitionSheet.Dimension.Start.Row;
                    //        int MeiWenqiRequisitionSheetEndRow = MeiWenqiRequisitionSheet.Dimension.End.Row;
                    //        int MeiWenqiRequisitionSheetStartColum = MeiWenqiRequisitionSheet.Dimension.Start.Column;
                    //        int MeiWenqiRequisitionSheetEndColum = MeiWenqiRequisitionSheet.Dimension.End.Column;
                    //        int MeiWenqiRequisitionSheetSRow = 5;
                    //        int MeiWenqiRequisitionSheetERow = 0;
                    //        int MeiWenqiRequisitionSheetSColum = 1;
                    //        int MeiWenqiRequisitionSheetEColum = 6;

                    //        for (int i = MeiWenqiRequisitionSheetSRow; i < MeiWenqiRequisitionSheetEndRow; i++)
                    //        {
                    //            if (MeiWenqiRequisitionSheet.Cells[i, 1].Value == null)
                    //            {
                    //                continue;
                    //            }
                    //            if (MeiWenqiRequisitionSheet.Cells[i, 1].Value.ToString() == "配料")
                    //            {
                    //                MeiWenqiRequisitionSheetERow = i;
                    //                break;
                    //            }
                    //        }

                    //        DataTable ProductTable = new DataTable();
                    //        ProductTable.Columns.Add(string.Format("ProductDes"), Type.GetType("System.String"));
                    //        ProductTable.Columns.Add(string.Format("ProductName"), Type.GetType("System.String"));

                    //        DataRow ProductTableRow = ProductTable.NewRow();
                    //        for (int i = MeiWenqiRequisitionSheetSRow; i < MeiWenqiRequisitionSheetERow; i++)
                    //        {
                    //            object ProductDes = MeiWenqiRequisitionSheet.Cells[i, 3].Value;
                    //            if (ProductDes == null || ProductDes.ToString() == "" || ProductDes.ToString() == "材料名称")
                    //            {
                    //                continue;
                    //            }
                    //            ProductTableRow["ProductDes"] = MeiWenqiRequisitionSheet.Cells[i, 3].Value;
                    //            ProductTable.Rows.Add(ProductTableRow.ItemArray);
                    //        }
                    //        SqlConnection conn = new SqlConnection("Data Source=192.168.124.72;Initial Catalog=OrBitXI;User ID=sa;PassWord=admin@2017");
                    //        conn.Open();
                    //        //调用存储过程根据物料描述获取到物料编号存放在另一个datatable中
                    //        SqlCommand Productcmd = new SqlCommand();
                    //        Productcmd.CommandText = "Pro_GetProductName";
                    //        Productcmd.Connection = conn;
                    //        Productcmd.CommandType = CommandType.StoredProcedure;
                    //        SqlParameter parameters =
                    //        new SqlParameter("@Pro_GetProductName", SqlDbType.Structured)
                    //        {
                    //            Value = ProductTable
                    //        };

                    //        Productcmd.Parameters.Add(parameters);
                    //        Productcmd.ExecuteNonQuery();
                    //        Productcmd.Parameters.Add(new SqlParameter("@return", SqlDbType.Int));
                    //        Productcmd.Parameters["@return"].Direction = ParameterDirection.ReturnValue;
                    //        SqlDataReader readerproduct = Productcmd.ExecuteReader();
                    //        DataTable ProductDt = new DataTable();
                    //        ProductDt.Load(readerproduct);
                    //        conn.Close();
                    //        //读取Excel数据
                    //        for (int i = MeiWenqiRequisitionSheetSRow; i < MeiWenqiRequisitionSheetERow; i++)
                    //        {
                    //            DataRow MeiWenqiRequisitionSheetTableRow = MeiWenqiRequisitionSheetTable.NewRow();
                    //            //string CellValue = MeiWenqiRequisitionSheet.Cells[i, 2].Value.ToString();||!System.Text.RegularExpressions.Regex.IsMatch(CellValue, @"^[-+]?[0-9]*\.?[0-9]+$")
                    //            object ProductDes = MeiWenqiRequisitionSheet.Cells[i, 3].Value;
                    //            if (ProductDes == null || ProductDes.ToString() == "" || ProductDes.ToString() == "材料名称")
                    //            {
                    //                continue;
                    //            }

                    //            MeiWenqiRequisitionSheetTableRow["ProductOrderId"] = ParentId;
                    //            string CateGory = MeiWenqiRequisitionSheet.Cells[1, 1].Value.ToString();
                    //            MeiWenqiRequisitionSheetTableRow["CateGory"] = CateGory.Substring(5, 2);
                    //            for (int a = 0; a < ProductDt.Rows.Count; a++)
                    //            {
                    //                string ProductName = ProductDt.Rows[a]["ProductName"].ToString();
                    //                string ProductDescription = ProductDt.Rows[a]["ProductDescription"].ToString();
                    //                if (ProductDescription == MeiWenqiRequisitionSheet.Cells[i, 3].Value.ToString())
                    //                {
                    //                    MeiWenqiRequisitionSheetTableRow["ProductName"] = ProductName;
                    //                }
                    //            }
                    //            string GetMaterialBillsId = Guid.NewGuid().ToString().Substring(0, 12);
                    //            MeiWenqiRequisitionSheetTableRow["GetMaterialBillsId"] = GetMaterialBillsId.ToUpper();
                    //            for (int j = MeiWenqiRequisitionSheetSColum; j < MeiWenqiRequisitionSheetEColum; j++)
                    //            {
                    //                switch (j)
                    //                {
                    //                    case 1:
                    //                        MeiWenqiRequisitionSheetTableRow["MaterialType"] = GetMergeValue(MeiWenqiRequisitionSheet, i, j);
                    //                        break;
                    //                    case 3:
                    //                        MeiWenqiRequisitionSheetTableRow["ProductDes"] = MeiWenqiRequisitionSheet.Cells[i, j].Value;
                    //                        break;
                    //                    case 4:
                    //                        MeiWenqiRequisitionSheetTableRow["Qty"] = MeiWenqiRequisitionSheet.Cells[i, j].Value;
                    //                        break;
                    //                    case 5:
                    //                        MeiWenqiRequisitionSheetTableRow["Unit"] = MeiWenqiRequisitionSheet.Cells[i, j].Value;
                    //                        break;
                    //                    case 6:
                    //                        MeiWenqiRequisitionSheetTableRow["Remark"] = MeiWenqiRequisitionSheet.Cells[i, j].Value;
                    //                        break;
                    //                }
                    //            }
                    //            MeiWenqiRequisitionSheetTable.Rows.Add(MeiWenqiRequisitionSheetTableRow);
                    //        }
                    //        //释放资源
                    //        readerproduct.Close();
                    //        readerproduct.Dispose();
                    //        ProductDt.Clear();
                    //        ProductDt.Dispose();
                    //    }
                    //    catch (Exception ex)
                    //    {
                    //        MessageBox.Show(ex.Message);
                    //    }
                    //    finally
                    //    {

                    //    }
                    //}
                    //#endregion
                    ////A6免漆下料单
                    //#region
                    //ExcelWorksheet A6WenqiBlankingSheet = null;
                    //A6WenqiBlankingSheet = pck.Workbook.Worksheets["A6免漆下料单"];
                    //if (A6WenqiBlankingSheet != null)
                    //{
                    //    try
                    //    {
                    //        int A6WenqiBlankingSheetSRow = A6WenqiBlankingSheet.Dimension.Start.Row;
                    //        int A6WenqiBlankingSheetERow = A6WenqiBlankingSheet.Dimension.End.Row;
                    //        int A6WenqiBlankingSheetSColum = A6WenqiBlankingSheet.Dimension.Start.Column;
                    //        int A6WenqiBlankingSheetEColum = A6WenqiBlankingSheet.Dimension.End.Column;

                    //        int A6WenqiBlankingSheetStartRow = 7;
                    //        int A6WenqiBlankingSheetEndRow = 0;
                    //        int A6WenqiBlankingSheetStartColum = 1;
                    //        int A6WenqiBlankingSheetEndColum = 14;

                    //        for (int i = A6WenqiBlankingSheetStartRow; i < A6WenqiBlankingSheetERow; i++)
                    //        {
                    //            if (A6WenqiBlankingSheet.Cells[i, 1].Value == null)
                    //            {
                    //                continue;
                    //            }
                    //            if (A6WenqiBlankingSheet.Cells[i, 1].Value.ToString() == "如有材质、颜色、尺寸不明请和工艺组联系并确认！")
                    //            {
                    //                A6WenqiBlankingSheetEndRow = i - 2;
                    //                break;
                    //            }
                    //        }

                    //        for (int i = A6WenqiBlankingSheetStartRow; i < A6WenqiBlankingSheetEndRow; i++)
                    //        {
                    //            DataRow A6WenqiBlankingSheetTableRow = A6WenqiBlankingSheetTable.NewRow();

                    //            if (A6WenqiBlankingSheet.Cells[i, 5].Value == null)
                    //            {
                    //                continue;
                    //            }
                    //            string IssueMaterialBillsId = Guid.NewGuid().ToString().Substring(0, 12);
                    //            A6WenqiBlankingSheetTableRow["IssueMaterialBillsId"] = IssueMaterialBillsId.ToUpper();
                    //            A6WenqiBlankingSheetTableRow["ProductOrderId"] = ParentId;
                    //            A6WenqiBlankingSheetTableRow["PlateType"] = A6WenqiBlankingSheet.Cells[1, 1].Value.ToString().Substring(3, 2);
                    //            A6WenqiBlankingSheetTableRow["HandType"] = A6WenqiBlankingSheet.Cells[3, 2].Value;
                    //            A6WenqiBlankingSheetTableRow["CenterMaterials"] = A6WenqiBlankingSheet.Cells[4, 2].Value;
                    //            A6WenqiBlankingSheetTableRow["FaceConduct"] = A6WenqiBlankingSheet.Cells[3, 4].Value;

                    //            for (int j = A6WenqiBlankingSheetStartColum; j < A6WenqiBlankingSheetEndColum; j++)
                    //            {
                    //                switch (j)
                    //                {
                    //                    case 1:
                    //                        A6WenqiBlankingSheetTableRow["OrderDetailId"] = A6WenqiBlankingSheet.Cells[i, j].Value;
                    //                        break;
                    //                    case 2:
                    //                        A6WenqiBlankingSheetTableRow["FWide"] = A6WenqiBlankingSheet.Cells[i, j].Value;
                    //                        break;
                    //                    case 3:
                    //                        A6WenqiBlankingSheetTableRow["FHigh"] = A6WenqiBlankingSheet.Cells[i, j].Value;
                    //                        break;
                    //                    case 4:
                    //                        A6WenqiBlankingSheetTableRow["Qty"] = A6WenqiBlankingSheet.Cells[i, j].Value;
                    //                        break;
                    //                    case 5:
                    //                        A6WenqiBlankingSheetTableRow["PlateName"] = A6WenqiBlankingSheet.Cells[i, j].Value;
                    //                        break;
                    //                    case 6:
                    //                        A6WenqiBlankingSheetTableRow["CutThick"] = A6WenqiBlankingSheet.Cells[i, j].Value;
                    //                        break;
                    //                    case 7:
                    //                        A6WenqiBlankingSheetTableRow["CutWide"] = A6WenqiBlankingSheet.Cells[i, j].Value;
                    //                        break;
                    //                    case 8:
                    //                        A6WenqiBlankingSheetTableRow["CutHigh"] = A6WenqiBlankingSheet.Cells[i, j].Value;
                    //                        break;
                    //                    case 9:
                    //                        A6WenqiBlankingSheetTableRow["CutQty"] = A6WenqiBlankingSheet.Cells[i, j].Value;
                    //                        break;
                    //                    case 10:
                    //                        A6WenqiBlankingSheetTableRow["Remark"] = A6WenqiBlankingSheet.Cells[i, j].Value;
                    //                        break;
                    //                    case 11:
                    //                        A6WenqiBlankingSheetTableRow["MaterialNote"] = A6WenqiBlankingSheet.Cells[i, j].Value;
                    //                        break;
                    //                    case 12:
                    //                        A6WenqiBlankingSheetTableRow["DisplayMaterialSummary"] = A6WenqiBlankingSheet.Cells[i, j].Value;
                    //                        break;
                    //                    case 13:
                    //                        A6WenqiBlankingSheetTableRow["AreaOfContour"] = A6WenqiBlankingSheet.Cells[i, j].Value;
                    //                        break;
                    //                }
                    //            }
                    //            A6WenqiBlankingSheetTable.Rows.Add(A6WenqiBlankingSheetTableRow);
                    //        }
                    //    }
                    //    catch (Exception ex)
                    //    {
                    //        MessageBox.Show(ex.Message);
                    //    }
                    //    finally
                    //    {

                    //    }
                    //}
                    //#endregion
                    ////吸塑门板领料单
                    //#region
                    //ExcelWorksheet SuctionMoldingDoorSheetMaterialList = null;
                    //SuctionMoldingDoorSheetMaterialList = pck.Workbook.Worksheets["吸塑门板领料单"];
                    //if (SuctionMoldingDoorSheetMaterialList != null)
                    //{
                    //    try
                    //    {
                    //        int StartColum = SuctionMoldingDoorSheetMaterialList.Dimension.Start.Column;
                    //        int EndColum = SuctionMoldingDoorSheetMaterialList.Dimension.End.Column;
                    //        int StartRow = SuctionMoldingDoorSheetMaterialList.Dimension.Start.Row;
                    //        int EndRow = SuctionMoldingDoorSheetMaterialList.Dimension.End.Row;

                    //        int startColums = 1;
                    //        int EndColums = 7;
                    //        int StartRows = 6;
                    //        int EndRows = 0;

                    //        for (int i = StartRows; i < EndRow; i++)
                    //        {
                    //            object endRowName = SuctionMoldingDoorSheetMaterialList.Cells[i, 1].Value;
                    //            if (endRowName == null)
                    //            {
                    //                continue;
                    //            }
                    //            if (endRowName.ToString() == "拆解人")
                    //            {
                    //                EndRows = i - 3;
                    //                break;
                    //            }
                    //        }

                    //        DataTable ProductsTable = new DataTable();
                    //        ProductsTable.Columns.Add(string.Format("ProductDes"), Type.GetType("System.String"));
                    //        ProductsTable.Columns.Add(string.Format("ProductName"), Type.GetType("System.String"));
                    //        DataRow ProductsTableRow = ProductsTable.NewRow();

                    //        for (int i = StartRows; i < EndRows; i++)
                    //        {
                    //            object ProductDess = SuctionMoldingDoorSheetMaterialList.Cells[i, 3].Value;
                    //            if (ProductDess == null || ProductDess.ToString() == "")
                    //            {
                    //                continue;
                    //            }
                    //            ProductsTableRow["ProductDes"] = SuctionMoldingDoorSheetMaterialList.Cells[i, 3].Value;

                    //            ProductsTable.Rows.Add(ProductsTableRow.ItemArray);
                    //        }
                    //        SqlConnection connection = new SqlConnection("Data Source=192.168.124.72;Initial Catalog=OrBitXI;User ID=sa;PassWord=admin@2017");
                    //        connection.Open();
                    //        SqlCommand com = new SqlCommand();
                    //        com.Connection = connection;
                    //        com.CommandText = "Pro_GetproductName";
                    //        com.CommandType = CommandType.StoredProcedure;
                    //        SqlParameter pare = new SqlParameter("@Pro_GetproductName", SqlDbType.Structured)
                    //        {
                    //            Value = ProductsTable
                    //        };
                    //        com.Parameters.Add(pare);
                    //        com.ExecuteNonQuery();
                    //        com.Parameters.Add(new SqlParameter("@return", SqlDbType.Int));
                    //        com.Parameters["@return"].Direction = ParameterDirection.ReturnValue;
                    //        SqlDataReader read = com.ExecuteReader();
                    //        DataTable ProductTB = new DataTable();
                    //        ProductTB.Load(read);
                    //        connection.Close();
                    //        read.Close();
                    //        read.Dispose();
                    //        DataRow SuctionMoldingDoorSheetMaterialListTableRow = SuctionMoldingDoorSheetMaterialListTable.NewRow();
                    //        for (int i = StartRows; i < EndRows; i++)
                    //        {
                    //            Object ProductDes = SuctionMoldingDoorSheetMaterialList.Cells[i, 3].Value;
                    //            if (ProductDes == null)
                    //            {
                    //                continue;
                    //            }
                    //            string CateGory = SuctionMoldingDoorSheetMaterialList.Cells[1, 1].Value.ToString();
                    //            SuctionMoldingDoorSheetMaterialListTableRow["CateGory"] = CateGory.Substring(3, 2);
                    //            string GetMaterialBillsId = Guid.NewGuid().ToString().Substring(0, 12);
                    //            SuctionMoldingDoorSheetMaterialListTableRow["GetMaterialBillsId"] = GetMaterialBillsId.ToUpper();
                    //            SuctionMoldingDoorSheetMaterialListTableRow["ProductOrderId"] = ParentId;
                    //            for (int a = 0; a < ProductTB.Rows.Count; a++)
                    //            {
                    //                if (ProductDes.ToString() == ProductTB.Rows[a]["ProductDescription"].ToString())
                    //                {
                    //                    SuctionMoldingDoorSheetMaterialListTableRow["ProductName"] = ProductTB.Rows[a]["ProductName"];
                    //                }
                    //            }
                    //            for (int j = startColums; j < EndColums; j++)
                    //            {
                    //                switch (j)
                    //                {
                    //                    case 1:
                    //                        SuctionMoldingDoorSheetMaterialListTableRow["MaterialType"] = GetMergeValue(SuctionMoldingDoorSheetMaterialList, i, j);
                    //                        break;
                    //                    case 3:
                    //                        SuctionMoldingDoorSheetMaterialListTableRow["ProductDes"] = SuctionMoldingDoorSheetMaterialList.Cells[i, j].Value;
                    //                        break;
                    //                    case 4:
                    //                        SuctionMoldingDoorSheetMaterialListTableRow["Qty"] = SuctionMoldingDoorSheetMaterialList.Cells[i, j].Value;
                    //                        break;
                    //                    case 5:
                    //                        SuctionMoldingDoorSheetMaterialListTableRow["Unit"] = SuctionMoldingDoorSheetMaterialList.Cells[i, j].Value;
                    //                        break;
                    //                    case 6:
                    //                        SuctionMoldingDoorSheetMaterialListTableRow["Remark"] = SuctionMoldingDoorSheetMaterialList.Cells[i, j].Value;
                    //                        break;
                    //                }
                    //            }
                    //            SuctionMoldingDoorSheetMaterialListTable.Rows.Add(SuctionMoldingDoorSheetMaterialListTableRow.ItemArray);
                    //        }

                    //        ProductTB.Clear();
                    //        ProductTB.Dispose();
                    //    }
                    //    catch (Exception ex)
                    //    {
                    //        MessageBox.Show(ex.Message);
                    //    }
                    //    finally
                    //    {

                    //    }
                    //}
                    //#endregion
                    ////吸塑门板下料单
                    //#region
                    //ExcelWorksheet FeedSingleBlisterDoorPlankSheet = pck.Workbook.Worksheets["吸塑门板下料单"];
                    //if (FeedSingleBlisterDoorPlankSheet != null)
                    //{
                    //    try
                    //    {
                    //        int StartColums = FeedSingleBlisterDoorPlankSheet.Dimension.Start.Column;
                    //        int EndCol = FeedSingleBlisterDoorPlankSheet.Dimension.End.Column;
                    //        int SRows = FeedSingleBlisterDoorPlankSheet.Dimension.Start.Row;
                    //        int ERows = FeedSingleBlisterDoorPlankSheet.Dimension.End.Row;

                    //        int SColum = 1;
                    //        int Ecolum = 14;
                    //        int Srow = 7;
                    //        int Erow = 0;

                    //        for (int i = Srow; i < ERows; i++)
                    //        {
                    //            object PlateName = FeedSingleBlisterDoorPlankSheet.Cells[i, 1].Value;
                    //            if (PlateName == null)
                    //            {
                    //                continue;
                    //            }
                    //            if (PlateName.ToString() == "制单人：")
                    //            {
                    //                Erow = i - 4;
                    //                break;
                    //            }
                    //        }



                    //        for (int i = Srow; i < Erow; i++)
                    //        {
                    //            DataRow FeedSingleBlisterDoorPlankSheetTableRow = FeedSingleBlisterDoorPlankSheetTable.NewRow();

                    //            object PlateName = FeedSingleBlisterDoorPlankSheet.Cells[i, 5].Value;
                    //            if (PlateName == null)
                    //            {
                    //                continue;
                    //            }
                    //            string IssueMaterialBillsId = Guid.NewGuid().ToString().Substring(0, 12);
                    //            FeedSingleBlisterDoorPlankSheetTableRow["IssueMaterialBillsId"] = IssueMaterialBillsId.ToUpper();
                    //            FeedSingleBlisterDoorPlankSheetTableRow["ProductOrderId"] = ParentId;
                    //            FeedSingleBlisterDoorPlankSheetTableRow["HandType"] = FeedSingleBlisterDoorPlankSheet.Cells[3, 2].Value;
                    //            string PlateType = FeedSingleBlisterDoorPlankSheet.Cells[1, 1].Value.ToString();
                    //            FeedSingleBlisterDoorPlankSheetTableRow["PlateType"] = PlateType.Substring(3, 2);
                    //            FeedSingleBlisterDoorPlankSheetTableRow["MaterialNote"] = FeedSingleBlisterDoorPlankSheet.Cells[4, 2].Value;

                    //            for (int j = SColum; j < Ecolum; j++)
                    //            {
                    //                switch (j)
                    //                {
                    //                    case 1:
                    //                        FeedSingleBlisterDoorPlankSheetTableRow["OrderDetailId"] = FeedSingleBlisterDoorPlankSheet.Cells[i, j].Value;
                    //                        break;
                    //                    case 2:
                    //                        FeedSingleBlisterDoorPlankSheetTableRow["FWide"] = FeedSingleBlisterDoorPlankSheet.Cells[i, j].Value;
                    //                        break;
                    //                    case 3:
                    //                        FeedSingleBlisterDoorPlankSheetTableRow["FHigh"] = FeedSingleBlisterDoorPlankSheet.Cells[i, j].Value;
                    //                        break;
                    //                    case 4:
                    //                        FeedSingleBlisterDoorPlankSheetTableRow["Qty"] = FeedSingleBlisterDoorPlankSheet.Cells[i, j].Value;
                    //                        break;
                    //                    case 5:
                    //                        FeedSingleBlisterDoorPlankSheetTableRow["PlateName"] = FeedSingleBlisterDoorPlankSheet.Cells[i, j].Value;
                    //                        break;
                    //                    case 6:
                    //                        FeedSingleBlisterDoorPlankSheetTableRow["CutThick"] = FeedSingleBlisterDoorPlankSheet.Cells[i, j].Value;
                    //                        break;
                    //                    case 7:
                    //                        FeedSingleBlisterDoorPlankSheetTableRow["CutWide"] = FeedSingleBlisterDoorPlankSheet.Cells[i, j].Value;
                    //                        break;
                    //                    case 8:
                    //                        FeedSingleBlisterDoorPlankSheetTableRow["CutHigh"] = FeedSingleBlisterDoorPlankSheet.Cells[i, j].Value;
                    //                        break;
                    //                    case 9:
                    //                        FeedSingleBlisterDoorPlankSheetTableRow["CutQty"] = FeedSingleBlisterDoorPlankSheet.Cells[i, j].Value;
                    //                        break;
                    //                    //case 10:
                    //                    //    FeedSingleBlisterDoorPlankSheetTableRow["Remark"] = FeedSingleBlisterDoorPlankSheet.Cells[i, j].Value;
                    //                    //    break;
                    //                    case 11:
                    //                        FeedSingleBlisterDoorPlankSheetTableRow["MaterialNote"] = FeedSingleBlisterDoorPlankSheet.Cells[i, j].Value;
                    //                        break;
                    //                    case 12:
                    //                        FeedSingleBlisterDoorPlankSheetTableRow["FaceConduct"] = FeedSingleBlisterDoorPlankSheet.Cells[i, j].Value;
                    //                        break;
                    //                    case 13:
                    //                        FeedSingleBlisterDoorPlankSheetTableRow["Remark"] = FeedSingleBlisterDoorPlankSheet.Cells[i, j].Value;
                    //                        break;
                    //                }
                    //            }
                    //            FeedSingleBlisterDoorPlankSheetTable.Rows.Add(FeedSingleBlisterDoorPlankSheetTableRow);
                    //        }
                    //    }
                    //    catch (Exception ex)
                    //    {
                    //        MessageBox.Show(ex.Message);
                    //    }
                    //    finally
                    //    {

                    //    }
                    //}
                    //#endregion
                    #endregion
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        /// <summary>
        /// 判断合并单元格获取值
        /// </summary>
        /// <param name="worksheet"></param>
        /// <param name="row">单元格行</param>
        /// <param name="column">单元格列</param>
        /// <returns></returns>
        public static string GetMergeValue(ExcelWorksheet worksheet, int row, int column)
        {
            string MergeValue = "";
            ExcelWorksheet.MergeCellsCollection<string> MergeCells = worksheet.MergedCells;
            for (int i = 0; i < MergeCells.Count; i++)
            {
                string range = MergeCells[i];
                ExcelAddress add = new ExcelAddress(range);
                int srow = add.Start.Row;//合并单元格开始行
                int scol = add.Start.Column;//合并单元格开始行
                int erow = add.End.Row;//合并单元格结束行
                int ecol = add.End.Column;//合并单元格结束行
                object value = worksheet.Cells[(new ExcelAddress(range)).Start.Row, (new ExcelAddress(range)).Start.Column].Value;
                if (row >= srow && row <= erow && column >= scol && column <= ecol)
                {
                    if (value == null || value.ToString() == "")
                    {
                        MergeValue = "";
                    }
                    else
                    {
                        MergeValue = value.ToString();
                    }
                    break;
                }
            }
            return MergeValue;
        }

        protected string CStr(object o) { return o != null ? o.ToString() : ""; }

    }


    /// <summary>
    /// 北分体验馆粉末喷漆
    /// </summary>
    /// <param name="orderDaetail"></param>
    /// <param name="IssueMaterialBills"></param>
    public class NorthPointExperienceMuseum : NorthPointExperienceMuseumData
    {
        protected string CStr(object o) { return o != null ? o.ToString() : ""; }
        public override void ReadNorthPointExperienceMuseumData(string Path, string ParentId)
        {
            try
            {
                bool TheWorksheetExists = true;
                bool IsDataHave = true;
                FileStream Fs = new FileStream(Path, FileMode.Open, FileAccess.Read);
                //在插件调试环境下运行时，用ADO.NET直连 
                string ConnectionString = "Data Source=192.168.124.72;Initial Catalog=OrBitXI;User ID=sa;Password='admin@2017'";
                SqlConnection con = new SqlConnection(ConnectionString);
                using (ExcelPackage pck = new ExcelPackage(Fs))
                {
                    ExcelWorksheet Sheet = null;//数据所在Sheet
                    Sheet = pck.Workbook.Worksheets["免漆门板单"];
                    if (Sheet != null)
                    {
                        if (Sheet.Name == "免漆门板单")
                        {
                            int maxColumnNum = Sheet.Dimension.End.Column;//最大列
                            int minColumnNum = Sheet.Dimension.Start.Column;//最小列
                            int minRowNum = Sheet.Dimension.Start.Row;//最小行
                            int maxRowNum = Sheet.Dimension.End.Row;//最大行
                            int sRowNum = 8;//开始行
                            int eRowNum = 0;//结束行
                            int sAColNum = 1;//区域A的开始栏位
                            int eAColNum = 13;//区域A的结束栏位
                            object PlateName = "";
                            //定义变量保存板件名称行
                            int plateName1 = 0;
                            int PlateName2 = 0;
                            //获取结束行               object RendRowNum = "";
                            for (int i = sRowNum; i < maxRowNum; i++)
                            {
                                PlateName = Sheet.Cells[i, 1].Value;
                                if (PlateName == null || PlateName.ToString() == "")
                                {
                                    continue;
                                }
                                if (PlateName.ToString().Trim() == "含拉手平开门竖纹门板（有拉手的18厚）")
                                {
                                    plateName1 = i;
                                }
                                if (PlateName.ToString().Trim() == "装饰板（无拉手的18厚）")
                                {
                                    PlateName2 = i;
                                }
                                string aaa = "";
                                aaa = PlateName.ToString();
                                string[] result = aaa.Split('\n');
                                string bbb = "";
                                foreach (string item in result)
                                {
                                    bbb += item;
                                }
                                if (bbb.ToString() == "注：所有下料纹理方向均为高度方向如有材质、颜色、尺寸不明请和工艺组联系并确认！  分机电话：2160")
                                {
                                    eRowNum = i - 1;
                                    break;
                                }
                            }


                            string CellValue = "";
                            ExcelRange Rang;
                            //创建datatable保存箱体序号
                            DataTable table = new DataTable();
                            DataColumn colum = table.Columns.Add("TemporaryTableId", Type.GetType("System.String"));
                            colum = table.Columns.Add("OrderDetailId", Type.GetType("System.String"));
                            colum = table.Columns.Add("ProductOrderId", Type.GetType("System.String"));
                            colum = table.Columns.Add("Identification", Type.GetType("System.String"));
                            //colum = table.Columns.Add("PlateType", Type.GetType("System.String"));
                            DataRow rows = table.NewRow();
                            for (int i = 8; i < eRowNum; i++)
                            {
                                string TemporaryTableId = Guid.NewGuid().ToString().Substring(0, 12);
                                rows["TemporaryTableId"] = TemporaryTableId.ToUpper();
                                string OrderDetail = CStr(Sheet.Cells[i, 5].Value);
                                if (OrderDetail == "" || OrderDetail == null)
                                {
                                    continue;
                                }
                                //rows["PlateType"] = Sheet.Cells[1, 1].Value.ToString().Substring(0, 2);
                                //rows["HnadType"] = Sheet.Cells[3, 2].Value;
                                //rows["MaterialDescription"] = Sheet.Cells[4, 2].Value;
                                //rows["FaceConduct"] = Sheet.Cells[3, 4].Value;
                                for (int j = 1; j < 2; j++)
                                {
                                    string CaseNumber = CStr(Sheet.Cells[i, j].Value).Trim();
                                    //

                                    rows["OrderDetailId"] = "ODET000008OJ";
                                    rows["ProductOrderId"] = "PROD000000GI";
                                }
                                table.Rows.Add(rows.ItemArray);
                            }
                            //调用存储过程根据箱体序号和订单号判断是否存在
                            SqlCommand cmd = new SqlCommand();
                            con.Open();
                            cmd.CommandText = "Pro_SelectCaseNumber";
                            cmd.Connection = con;
                            cmd.CommandType = CommandType.StoredProcedure;
                            SqlParameter param =
                            new SqlParameter("@Pro_SelectCaseNumber", SqlDbType.Structured)
                            {
                                Value = table
                            };

                            cmd.Parameters.Add(param);
                            cmd.Parameters.Add(new SqlParameter("@return", SqlDbType.Int));
                            cmd.Parameters["@return"].Direction = ParameterDirection.ReturnValue;
                            cmd.ExecuteNonQuery();
                            //存储过程返回0位true
                            if (Convert.ToInt32(cmd.Parameters["@return"].Value) == 0)
                            {
                                con.Close();
                                //领料单数据读取
                                for (int i = sRowNum; i <= eRowNum; i++)
                                {
                                    if (IsDataHave)
                                    {
                                        PlateName = CStr(Sheet.Cells[i, 5].Value);
                                        string ExcelTitleValue = CStr(Sheet.Cells[i, 1].Value);
                                        if (PlateName == null || PlateName.ToString() == "")
                                        {
                                            continue;
                                        }
                                        DataRow newARow = NoPaintDoorSheetTable.NewRow();
                                        for (int j = sAColNum; j <= eAColNum; j++)
                                        {
                                            Rang = Sheet.Cells[i, j];
                                            object objectCellValue = Sheet.GetValue(i, j);//单元格数据
                                            CellValue = objectCellValue != null ? objectCellValue.ToString().Trim() : "";
                                            newARow["ProductOrderId"] = ParentId;
                                            newARow["HandType"] = Sheet.GetValue(4, 3).ToString();
                                            newARow["MaterialNote"] = Sheet.GetValue(5, 3).ToString();
                                            newARow["PlateType"] = "门板";
                                            if (i > plateName1 && i < PlateName2)
                                            {
                                                newARow["PlateName"] = Sheet.GetValue(plateName1, 1).ToString();
                                            }
                                            if (i > PlateName2)
                                            {
                                                newARow["PlateName"] = Sheet.GetValue(PlateName2, 1).ToString();
                                            }
                                            if (Rang.Merge)
                                            {
                                                CellValue = GetMergeValue(Sheet, i, j);
                                            }
                                            switch (j)
                                            {
                                                case 1:
                                                    newARow["OrderDetailId"] = CellValue;
                                                    break;
                                                case 2:
                                                    if (CellValue == "" || CellValue == null)
                                                    {
                                                        CellValue = "0";
                                                        Convert.ToSingle(CellValue);
                                                        newARow["FWide"] = CellValue;
                                                    }
                                                    else
                                                    {
                                                        if (System.Text.RegularExpressions.Regex.IsMatch(CellValue, @"^[-+]?[0-9]*\.?[0-9]+$"))
                                                        {

                                                            newARow["FWide"] = CellValue;
                                                        }
                                                        else
                                                        {
                                                            MessageBox.Show("请检查工作表" + Sheet.Name + "第" + i + "行第" + j + "列数据是否正确");
                                                            TheWorksheetExists = false;
                                                        }
                                                    }
                                                    //newARow["FWide"] = CellValue;
                                                    break;
                                                case 3:
                                                    if (CellValue == "" || CellValue == null)
                                                    {
                                                        CellValue = "0";
                                                        Convert.ToSingle(CellValue);
                                                        newARow["FHigh"] = CellValue;
                                                    }
                                                    else
                                                    {
                                                        if (System.Text.RegularExpressions.Regex.IsMatch(CellValue, @"^[-+]?[0-9]*\.?[0-9]+$"))
                                                        {

                                                            newARow["FHigh"] = CellValue;
                                                        }
                                                        else
                                                        {
                                                            MessageBox.Show("请检查工作表" + Sheet.Name + "第" + i + "行第" + j + "列数据是否正确");
                                                            TheWorksheetExists = false;
                                                        }
                                                    }
                                                    //newARow["FLong"] = CellValue;
                                                    break;
                                                case 4:
                                                    if (CellValue == "" || CellValue == null)
                                                    {
                                                        CellValue = "0";
                                                        Convert.ToSingle(CellValue);
                                                        newARow["FQty"] = CellValue;
                                                    }
                                                    else
                                                    {
                                                        if (System.Text.RegularExpressions.Regex.IsMatch(CellValue, @"^[-+]?[0-9]*\.?[0-9]+$"))
                                                        {

                                                            newARow["FQty"] = CellValue;
                                                        }
                                                        else
                                                        {
                                                            MessageBox.Show("请检查工作表" + Sheet.Name + "第" + i + "行第" + j + "列数据是否正确");
                                                            TheWorksheetExists = false;
                                                        }
                                                        //newARow["Qty"] = CellValue;
                                                    }
                                                    break;
                                                case 5:
                                                    if (CellValue == "" || CellValue == null)
                                                    {
                                                        CellValue = "0";
                                                        Convert.ToSingle(CellValue);
                                                        newARow["CutWide"] = CellValue;
                                                    }
                                                    else
                                                    {
                                                        if (System.Text.RegularExpressions.Regex.IsMatch(CellValue, @"^[-+]?[0-9]*\.?[0-9]+$"))
                                                        {

                                                            newARow["CutWide"] = CellValue;
                                                        }
                                                        else
                                                        {
                                                            MessageBox.Show("请检查工作表" + Sheet.Name + "第" + i + "行第" + j + "列数据是否正确");
                                                            TheWorksheetExists = false;
                                                        }
                                                    }
                                                    break;
                                                case 6:
                                                    if (CellValue == "" || CellValue == null)
                                                    {
                                                        CellValue = "0";
                                                        Convert.ToSingle(CellValue);
                                                        newARow["CutHigh"] = CellValue;
                                                    }
                                                    else
                                                    {
                                                        if (System.Text.RegularExpressions.Regex.IsMatch(CellValue, @"^[-+]?[0-9]*\.?[0-9]+$"))
                                                        {

                                                            newARow["CutHigh"] = CellValue;
                                                        }
                                                        else
                                                        {
                                                            MessageBox.Show("请检查工作表" + Sheet.Name + "第" + i + "行第" + j + "列数据是否正确");
                                                            TheWorksheetExists = false;
                                                        }
                                                        //newARow["CutThick"] = CellValue;
                                                    }
                                                    //newARow["CutThick"] = CellValue;
                                                    break;
                                                case 7:
                                                    if (CellValue == "" || CellValue == null)
                                                    {
                                                        CellValue = "0";
                                                        Convert.ToSingle(CellValue);
                                                        newARow["CutQty"] = CellValue;
                                                    }
                                                    else
                                                    {
                                                        if (System.Text.RegularExpressions.Regex.IsMatch(CellValue, @"^[-+]?[0-9]*\.?[0-9]+$"))
                                                        {

                                                            newARow["CutQty"] = CellValue;
                                                        }
                                                        else
                                                        {
                                                            MessageBox.Show("请检查工作表" + Sheet.Name + "第" + i + "行第" + j + "列数据是否正确");
                                                            TheWorksheetExists = false;
                                                        }
                                                        //newARow["CutQty"] = CellValue;
                                                    }
                                                    //newARow["CutWide"] = CellValue;
                                                    break;
                                                case 8:
                                                    newARow["PlateName"] = CellValue;
                                                    break;
                                                case 10:
                                                    if (CellValue == "" || CellValue == null)
                                                    {
                                                        CellValue = "0";
                                                        Convert.ToSingle(CellValue);
                                                        newARow["CutThick"] = CellValue;
                                                        newARow["FThick"] = CellValue;
                                                    }
                                                    else
                                                    {
                                                        if (System.Text.RegularExpressions.Regex.IsMatch(CellValue, @"^[-+]?[0-9]*\.?[0-9]+$"))
                                                        {
                                                            newARow["CutThick"] = CellValue;
                                                            newARow["FThick"] = CellValue;
                                                        }
                                                        else
                                                        {
                                                            MessageBox.Show("请检查工作表" + Sheet.Name + "第" + i + "行第" + j + "列数据是否正确");
                                                            TheWorksheetExists = false;
                                                        }
                                                        //newARow["CutQty"] = CellValue;
                                                    }
                                                    break;
                                                case 11: newARow["AreaOfContour"] = CellValue; break;

                                            }
                                        }
                                        if (IsDataHave == false)
                                        {
                                            break;
                                        }
                                        NoPaintDoorSheetTable.Rows.Add(newARow);
                                    }
                                    else
                                    {
                                        MessageBox.Show("请先检查数据是否正确！！！");
                                        break;
                                    }
                                }
                            }
                            else
                            {
                                MessageBox.Show("请先检查箱体序号是否正确！！！");
                                IsDataHave = false;
                            }

                        }
                    }

                }
                if (NoPaintDoorSheetTable.Rows.Count > 0)
                {
                    if (TheWorksheetExists)
                    {
                        if (IsDataHave)
                        {
                            using (ExcelPackage pck = new ExcelPackage(Fs))
                            {
                                ExcelWorksheet Sheet = null;//数据所在Sheet
                                Sheet = pck.Workbook.Worksheets["免漆料单"];
                                if (Sheet != null)
                                {
                                    int maxColumnNum = Sheet.Dimension.End.Column;//最大列
                                    int minColumnNum = Sheet.Dimension.Start.Column;//最小列
                                    int minRowNum = Sheet.Dimension.Start.Row;//最小行
                                    int maxRowNum = Sheet.Dimension.End.Row;//最大行
                                    int sRowNum = 5;//开始行
                                    int eRowNum = 0;//结束行
                                    int sAColNum = 1;//区域A的开始栏位
                                    int eAColNum = 8;//区域A的结束栏位

                                    string ExcelValue2 = "";
                                    //获取结束行
                                    for (int d = sRowNum; d < maxRowNum; d++)
                                    {
                                        if (Sheet.GetValue(d, 4) == null || Sheet.GetValue(d, 4).ToString() == "")
                                        {
                                            continue;
                                        }
                                        if (Sheet.GetValue(d, 4).ToString() == "配料：")
                                        {
                                            eRowNum = d - 1;
                                            break;
                                        }
                                    }
                                    //创建datatable保存物料信息
                                    DataTable GetProductNameTable = new DataTable();
                                    DataColumn colum = GetProductNameTable.Columns.Add("ProductDescription", Type.GetType("System.String"));
                                    colum = GetProductNameTable.Columns.Add("ProductName", Type.GetType("System.String"));
                                    DataRow rows = GetProductNameTable.NewRow();
                                    for (int i = sRowNum; i < eRowNum; i++)
                                    {
                                        //string GetProductNameTableId = Guid.NewGuid().ToString().Substring(0, 12);
                                        //rows["GetProductNameId"] = GetProductNameTableId.ToUpper();
                                        if (Sheet.GetValue(i, 3) == null)
                                        {
                                            continue;
                                        }
                                        string Materials = Sheet.GetValue(i, 3).ToString();
                                        if (Materials == "" || Materials == null || Materials == "材料名称")
                                        {
                                            continue;
                                        }
                                        else
                                        {
                                            string ProductDescription = Materials;
                                            rows["ProductDescription"] = ProductDescription;
                                        }
                                        GetProductNameTable.Rows.Add(rows.ItemArray);
                                    }
                                    //调用存储过程查询物料号
                                    SqlCommand cmd = new SqlCommand();
                                    con.Open();
                                    cmd.CommandText = "Pro_GetproductName";
                                    cmd.Connection = con;
                                    cmd.CommandType = CommandType.StoredProcedure;
                                    SqlParameter param =
                                    new SqlParameter("@Pro_GetproductName", SqlDbType.Structured)
                                    {
                                        Value = GetProductNameTable
                                    };
                                    cmd.Parameters.Add(param);
                                    cmd.ExecuteNonQuery();
                                    cmd.Parameters.Add(new SqlParameter("@return", SqlDbType.Int));
                                    cmd.Parameters["@return"].Direction = ParameterDirection.ReturnValue;
                                    SqlDataReader reader = cmd.ExecuteReader();
                                    DataTable dt = new DataTable();
                                    dt.Load(reader);
                                    if (Convert.ToInt32(cmd.Parameters["@return"].Value) == 0)
                                    {
                                        con.Close();
                                        //免漆料单数据读取
                                        for (int i = sRowNum; i <= eRowNum; i++)
                                        {
                                            //decimal Qty = 0;
                                            //int Qty1 = 0;
                                            DataRow newARow = GetMaterialBillsTable.NewRow();
                                            string ProductDescription = CStr(Sheet.Cells[i, 3].Value);
                                            newARow["ProductOrderId"] = ParentId;
                                            ExcelValue2 = CStr(Sheet.Cells[i, 3].Value);
                                            //string ExcelValue1 = Sheet.GetValue(i, 3).ToString();
                                            if ((ExcelValue2 == "") || (ExcelValue2 == null) || (ExcelValue2 == "材料名称"))
                                            {
                                                continue;
                                            }
                                            for (int j = sAColNum; j <= eAColNum; j++)
                                            {

                                                //string ExcelQty = CStr(Sheet.Cells[i, 4].Value);
                                                //Qty = Convert.ToDecimal(ExcelQty);
                                                //Qty1 = Convert.ToInt32(Qty*100);

                                                ExcelRange Rang = Sheet.Cells[i, j];
                                                object objectCellValue = Sheet.GetValue(i, j);//单元格数据
                                                string CellValue = objectCellValue != null ? objectCellValue.ToString().Trim() : "";
                                                if (Rang.Merge)
                                                {
                                                    CellValue = GetMergeValue(Sheet, i, j);

                                                }
                                                switch (j)
                                                {
                                                    case 1: newARow["MaterialType"] = CellValue; break;
                                                    case 2: newARow["NumericalOrder"] = CellValue; break;
                                                    case 3:
                                                        for (int t = 0; t < dt.Rows.Count; t++)
                                                        {
                                                            string ProductDes = dt.Rows[t]["ProductDescription"].ToString();
                                                            if (ProductDes == ProductDescription)
                                                            {
                                                                newARow["ProductName"] = dt.Rows[t]["ProductName"].ToString();
                                                                newARow["ProductDes"] = ProductDes;
                                                            }
                                                        }
                                                        break;
                                                    case 6:
                                                        newARow["PackingConfirmed"] = CellValue;
                                                        break;
                                                    case 7:
                                                        if (CellValue == "" || CellValue == null)
                                                        {
                                                            CellValue = "0";
                                                            Convert.ToSingle(CellValue);
                                                            newARow["Qty"] = CellValue;
                                                        }
                                                        else
                                                        {
                                                            if (System.Text.RegularExpressions.Regex.IsMatch(CellValue, @"^[-+]?[0-9]*\.?[0-9]+$"))
                                                            {
                                                                decimal Qty = Math.Round(decimal.Parse(CellValue), 3, MidpointRounding.AwayFromZero);

                                                                newARow["Qty"] = Qty;
                                                            }
                                                            else
                                                            {
                                                                MessageBox.Show("请检查工作表" + Sheet.Name + "第" + i + "行第" + j + "列数据是否正确");
                                                                TheWorksheetExists = false;
                                                            }
                                                        }
                                                        break;
                                                    case 8: newARow["Unit"] = CellValue; break;
                                                }
                                            }
                                            GetMaterialBillsTable.Rows.Add(newARow);
                                        }

                                    }
                                    else
                                    {
                                        con.Close();
                                        MessageBox.Show("工作表数据错误，请先检查工作表" + Sheet);
                                    }
                                }

                            }
                        }
                    }
                }

            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
            finally
            {

            }
        }
        /// <summary>
        /// 判断合并单元格获取值
        /// </summary>
        /// <param name="worksheet"></param>
        /// <param name="row">单元格行</param>
        /// <param name="column">单元格列</param>
        /// <returns></returns>
        public static string GetMergeValue(ExcelWorksheet worksheet, int row, int column)
        {
            string MergeValue = "";
            ExcelWorksheet.MergeCellsCollection<string> MergeCells = worksheet.MergedCells;
            for (int i = 0; i < MergeCells.Count; i++)
            {
                string range = MergeCells[i];
                ExcelAddress add = new ExcelAddress(range);
                int srow = add.Start.Row;//合并单元格开始行
                int scol = add.Start.Column;//合并单元格开始行
                int erow = add.End.Row;//合并单元格结束行
                int ecol = add.End.Column;//合并单元格结束行
                object value = worksheet.Cells[(new ExcelAddress(range)).Start.Row, (new ExcelAddress(range)).Start.Column].Value;
                if (row >= srow && row <= erow && column >= scol && column <= ecol)
                {
                    if (value == null)
                    {
                        MergeValue = "";
                        break;
                    }
                    else
                    {
                        MergeValue = value.ToString();
                        break;
                    }

                }
            }
            return MergeValue;
        }

    }

    /// <summary>
    /// 北分体验馆柜体数据
    /// </summary>
    public class NorthPointCabinet : NorthPointCabinetData
    {
        /// <summary>
        /// 判断合并单元格获取值
        /// </summary>
        /// <param name="worksheet"></param>
        /// <param name="row">单元格行</param>
        /// <param name="column">单元格列</param>
        /// <returns></returns>
        public static string GetMergeValue(ExcelWorksheet worksheet, int row, int column)
        {
            string MergeValue = "";
            ExcelWorksheet.MergeCellsCollection<string> MergeCells = worksheet.MergedCells;
            for (int i = 0; i < MergeCells.Count; i++)
            {
                string range = MergeCells[i];
                ExcelAddress add = new ExcelAddress(range);
                int srow = add.Start.Row;//合并单元格开始行
                int scol = add.Start.Column;//合并单元格开始行
                int erow = add.End.Row;//合并单元格结束行
                int ecol = add.End.Column;//合并单元格结束行
                object value = worksheet.Cells[(new ExcelAddress(range)).Start.Row, (new ExcelAddress(range)).Start.Column].Value;
                if (row >= srow && row <= erow && column >= scol && column <= ecol)
                {
                    if (value == null || value.ToString() == "")
                    {
                        MergeValue = "";
                    }
                    else
                    {
                        MergeValue = value.ToString();
                    }
                    break;
                }
            }
            return MergeValue;
        }
        protected string CStr(object o) { return o != null ? o.ToString() : ""; }
        public override void ReadNorthPointCabinetData(string Path, string ParentId)
        {
            //存储数据流
            FileStream Fs = new FileStream(Path, FileMode.Open, FileAccess.Read);
            //读取Excel
            using (ExcelPackage pck = new ExcelPackage(Fs))
            {
                //下料单
                //数据所在Sheet
                ExcelWorksheet Sheet = null;
                //打开的Sheet名
                Sheet = pck.Workbook.Worksheets["下料单"];
                #region
                if (Sheet.Name == "下料单")
                {
                    try
                    {
                        //最大列
                        int maxColumnNum = Sheet.Dimension.End.Column;
                        //最小列
                        int minColumnNum = Sheet.Dimension.Start.Column;
                        //最小行
                        int minRowNum = Sheet.Dimension.Start.Row;
                        //最大行
                        int maxRowNum = Sheet.Dimension.End.Row;
                        //开始行
                        int sRowNum = 4;
                        //结束行
                        int eRowNum = 0;
                        //区域A的开始栏位
                        int sAColNum = 1;
                        //区域A的结束栏位
                        int eAColNum = 5;
                        //区域B的开始栏位
                        int sBColNum = 6;
                        //区域B的结束栏位
                        int eBColNum = 26;
                        //合计所在行
                        int hJRowNum = 0;
                        //读取Excel内容
                        //修改开始行
                        sRowNum = 4;
                        //修改结束行
                        eRowNum = 23;
                        //标题行
                        int ExcelTitle1 = 0;
                        int ExcelTitle2 = 0;
                        int ExcelTitle = 0;
                        string str = null;
                        //找到结束行
                        for (int d = 1; d < maxRowNum; d++)
                        {
                            if ((CStr(Sheet.Cells[d, 1].Value)).Trim() == "总合计：")
                            {
                                eRowNum = d - 2;
                                break;
                            }
                        }
                        //找到吊柜所在行
                        for (int d = 1; d < eRowNum; d++)
                        {
                            if ((CStr(Sheet.Cells[d, 1].Value)).Trim() == "吊柜")
                            {
                                ExcelTitle2 = d;
                                break;
                            }
                        }
                        //找到地柜所在行
                        for (int i = 1; i < eRowNum; i++)
                        {
                            if ((CStr(Sheet.Cells[i, 1].Value)).Trim() == "地柜")
                            {
                                ExcelTitle1 = i;
                                break;
                            }
                        }
                        //找到抽屉备用条所在行
                        for (int i = 1; i < eRowNum; i++)
                        {
                            if ((CStr(Sheet.Cells[i, 1].Value)).Trim() == "抽屉、备用条等")
                            {
                                ExcelTitle = i;
                                break;
                            }
                        }

                        string MaterialNote = "";
                        for (int i = 12; i < 16; i++)
                        {
                            MaterialNote = CStr(Sheet.Cells[2, i].Value);
                            if (MaterialNote.Length == 0)
                            {
                                continue;
                            }
                            else
                            {
                                break;
                            }
                        }

                        //sRowNum
                        //循环遍历每一行
                        for (int i = sRowNum; i <= eRowNum; i++)
                        {
                            object OrderName = Sheet.Cells[i, 1].Value;
                            if (OrderName == null || OrderName.ToString().Trim() == "合计:" || OrderName.ToString().Trim() == "吊柜" || OrderName.ToString().Trim() == "地柜" || OrderName.ToString().Trim() == "抽屉、备用条等")
                            {
                                continue;
                            }
                            string excelValue1 = null;
                            //读取A区域内容
                            DataRow newARow = null;
                            DataRow newBRow = null;
                            newARow = orderDetailDataTable.NewRow();
                            //newBRow = DtB.NewRow();
                            int ABlankRow = 0;//A区域全白行
                            int AColumnsCount = orderDetailDataTable.Columns.Count;//A区域栏位数
                            str = Guid.NewGuid().ToString().Substring(0, 12);
                            newARow[string.Format("OrderDetailId")] = str.ToUpper();
                            //循环遍历每一列
                            for (int j = sAColNum; j <= eAColNum; j++)
                            {
                                //合计所在行
                                hJRowNum = ExcelTitle2 - 1;
                                //去除标题行和合计行
                                if (i == ExcelTitle2 || i == ExcelTitle1 || i == hJRowNum || i == ExcelTitle)
                                {
                                    break;
                                }
                                //获取地柜名
                                excelValue1 = CStr(Sheet.Cells[i, 1].Value);
                                //判断地柜名是否为空
                                if (excelValue1 == "" || excelValue1 == null)
                                {
                                    ABlankRow++;
                                    break;
                                }
                                //表头不读了但是要把第一列替换成表头 + 第一列的值
                                if (j == sAColNum)
                                {
                                    //地柜
                                    if (i <= hJRowNum)
                                    {
                                        excelValue1 = CStr(Sheet.Cells[sRowNum, sAColNum].Value + CStr(Sheet.Cells[i, j].Value));
                                    }
                                    //吊柜
                                    else if (i > hJRowNum && i <= eRowNum)
                                    {
                                        excelValue1 = CStr(Sheet.Cells[hJRowNum + 1, sAColNum].Value + CStr(Sheet.Cells[i, j].Value));
                                    }
                                    //else if (i > ExcelTitle)//抽屉、备用条等
                                    //{
                                    //    excelValue1 = CStr(Sheet.Cells[ExcelTitle, 1].Value + CStr(Sheet.Cells[i, j].Value));
                                    //}
                                }
                                switch (j)
                                {
                                    case 1: newARow[string.Format("ProductDescription")] = excelValue1; break;
                                    case 2:
                                        object Wide = Sheet.Cells[i, j].Value;
                                        if (Wide == null || Wide.ToString() == "")
                                        {
                                            Wide = "0";
                                            Convert.ToSingle(Wide);
                                            newARow["Wide"] = Wide;
                                        }
                                        else
                                        {
                                            if (System.Text.RegularExpressions.Regex.IsMatch(Wide.ToString(), @"^[-+]?[0-9]*\.?[0-9]+$"))
                                            {

                                                newARow["Wide"] = Wide;
                                            }
                                            else
                                            {
                                                MessageBox.Show("请检查工作表" + Sheet.Name + "第" + i + "行第" + j + "列数据是否正确");

                                            }
                                        }
                                        //newARow["FWide"] = CellValue;
                                        break;
                                    //newARow[string.Format("Wide")] = excelValue1;
                                    //break;
                                    case 3:
                                        object High = Sheet.Cells[i, j].Value;
                                        if (High == null || High.ToString() == "")
                                        {
                                            High = "0";
                                            Convert.ToSingle(High);
                                            newARow["High"] = High;
                                        }
                                        else
                                        {
                                            if (System.Text.RegularExpressions.Regex.IsMatch(High.ToString(), @"^[-+]?[0-9]*\.?[0-9]+$"))
                                            {

                                                newARow["High"] = High;
                                            }
                                            else
                                            {
                                                MessageBox.Show("请检查工作表" + Sheet.Name + "第" + i + "行第" + j + "列数据是否正确");

                                            }
                                        }
                                        //newARow[string.Format("High")] = excelValue2; 
                                        break;
                                    case 4:
                                        object Deth = Sheet.Cells[i, j].Value;
                                        if (Deth == null || Deth.ToString() == "")
                                        {
                                            Deth = "0";
                                            Convert.ToSingle(Deth);
                                            newARow["Deth"] = Deth;
                                        }
                                        else
                                        {
                                            if (System.Text.RegularExpressions.Regex.IsMatch(Deth.ToString(), @"^[-+]?[0-9]*\.?[0-9]+$"))
                                            {

                                                newARow["Deth"] = Deth;
                                            }
                                            else
                                            {
                                                MessageBox.Show("请检查工作表" + Sheet.Name + "第" + i + "行第" + j + "列数据是否正确");

                                            }
                                        }
                                        break;
                                    case 5:
                                        object Qty = Sheet.Cells[i, j].Value;
                                        if (Qty == null || Qty.ToString() == "")
                                        {
                                            Qty = "0";
                                            Convert.ToSingle(Qty);
                                            newARow["Qty"] = Qty;
                                        }
                                        else
                                        {
                                            if (System.Text.RegularExpressions.Regex.IsMatch(Qty.ToString(), @"^[-+]?[0-9]*\.?[0-9]+$"))
                                            {

                                                newARow["Qty"] = Qty;
                                            }
                                            else
                                            {
                                                MessageBox.Show("请检查工作表" + Sheet.Name + "第" + i + "行第" + j + "列数据是否正确");

                                            }
                                        }
                                        break;
                                }

                                newARow[string.Format("ProductOrderId")] = ParentId;

                            }
                            //空白行和表头不添加到datatable中
                            if (i == ExcelTitle2 || i == ExcelTitle1 || i == hJRowNum || ABlankRow != AColumnsCount)
                            {
                                if (excelValue1 == "" || excelValue1 == null)
                                {
                                    continue;
                                }
                            }
                            //将读取到的行添加到datatable中
                            orderDetailDataTable.Rows.Add(newARow);
                            //明细分割位
                            int Detail = 1;


                            //循环遍历读取Excel数据
                            for (int z = sBColNum; z <= eBColNum; z++)
                            {
                                if (Detail == 1)
                                {
                                    //为datatable创建一个新行
                                    newBRow = materialBillsDataTable.NewRow();
                                    string IssueMaterialBillsId = Guid.NewGuid().ToString().Substring(0, 12);
                                    newBRow["IssueMaterialBillsId"] = IssueMaterialBillsId.ToUpper();
                                    newBRow["ProductOrderId"] = ParentId;
                                    //newBRow["PlateType"] = Sheet.Cells[1, 1].Value.ToString().Substring(3, 2);
                                    newBRow[string.Format("OrderDetailId")] = str.ToUpper();
                                    newBRow["PlateName"] = Sheet.GetValue(3, z);

                                    object CutWide = Sheet.Cells[i, z].Value;
                                    if (CutWide == null)
                                    {
                                        z = z + 2;
                                        continue;
                                    }
                                    else
                                    {
                                        if (System.Text.RegularExpressions.Regex.IsMatch(CutWide.ToString(), @"^[-+]?[0-9]*\.?[0-9]+$"))
                                        {

                                            newBRow["CutWide"] = CutWide;
                                            Detail++;
                                        }
                                        else
                                        {
                                            MessageBox.Show("请检查工作表" + Sheet.Name + "第" + i + "行第" + z + "列数据是否正确");

                                        }
                                    }
                                }
                                else if (Detail == 2)
                                {
                                    object CutHigh = Sheet.Cells[i, z].Value;
                                    if (CutHigh == null || CutHigh.ToString() == "")
                                    {
                                        CutHigh = "0";
                                        Convert.ToSingle(CutHigh);
                                        newBRow["CutThick"] = CutHigh;
                                        Detail++;
                                    }
                                    else
                                    {
                                        if (System.Text.RegularExpressions.Regex.IsMatch(CutHigh.ToString(), @"^[-+]?[0-9]*\.?[0-9]+$"))
                                        {
                                            newBRow["CutHigh"] = CutHigh;
                                            Detail++;
                                        }
                                        else
                                        {
                                            MessageBox.Show("请检查工作表" + Sheet.Name + "第" + i + "行第" + z + "列数据是否正确");

                                        }
                                    }
                                }
                                else if (Detail == 3)
                                {
                                    object Qty = Sheet.Cells[i, z].Value;
                                    if (Qty == null || Qty.ToString() == "")
                                    {
                                        Qty = "0";
                                        Convert.ToSingle(Qty);
                                        newBRow["CutQty"] = Qty;
                                        Detail = 1;
                                    }
                                    else
                                    {
                                        if (System.Text.RegularExpressions.Regex.IsMatch(Qty.ToString(), @"^[-+]?[0-9]*\.?[0-9]+$"))
                                        {

                                            newBRow["CutQty"] = Qty; //RemarkColum
                                            //newBRow[string.Format("MaterialNote")] = MaterialNote;
                                            //newBRow["Remark"] = CStr(Sheet.Cells[i, RemarkColum].Value);

                                            materialBillsDataTable.Rows.Add(newBRow.ItemArray);

                                            Detail = 1;
                                        }
                                        else
                                        {
                                            MessageBox.Show("请检查工作表" + Sheet.Name + "第" + i + "行第" + z + "列数据是否正确");

                                        }
                                    }
                                }
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        MessageBox.Show(ex.Message);
                    }
                    finally
                    {

                    }

                }
                #endregion

                //领料单
                #region
                //装箱单读取
                ExcelWorksheet Sheet1 = null;//数据所在Sheet
                Sheet1 = pck.Workbook.Worksheets["领料单"];
                if (Sheet1 != null)
                {
                    if (Sheet1.Name == "领料单")
                    {
                        try
                        {
                            int maxColumnNum1 = Sheet1.Dimension.End.Column;//最大列
                            int minColumnNum1 = Sheet1.Dimension.Start.Column;//最小列
                            int minRowNum1 = Sheet1.Dimension.Start.Row;//最小行
                            int maxRowNum1 = Sheet1.Dimension.End.Row;//最大行
                            int sRowNum1 = 5;//开始行
                            int eRowNum1 = 0;//结束行
                            int sAColNum1 = 1;//区域A的开始栏位
                            int eAColNum1 = 9;//区域A的结束栏位
                            //int ZhuangXiangEndId = 0;//装箱清单结束行
                            bool IsNumber = true;
                            string ExcelValue2 = "";

                            //获取领料单结束行
                            for (int d = sRowNum1; d < maxRowNum1; d++)
                            {
                                string Identifier = CStr(Sheet1.Cells[d, 1].Value);
                                if (Identifier.Trim() == "拆解员：")
                                {
                                    eRowNum1 = d - 1;
                                    break;
                                }
                            }
                            ////获取装箱单结束行
                            //for (int d = sRowNum1; d < maxRowNum1; d++)
                            //{
                            //    if (CStr(Sheet1.Cells[d, 1].Value) == "拆解员：")
                            //    {
                            //        ZhuangXiangEndId = d - 1;
                            //        break;
                            //    }
                            //}
                            //装箱单数据读取

                            if (IsNumber == true)
                            {
                                //创建datatable存放物料描述信息
                                DataTable dt = new DataTable();
                                dt.Columns.Add(string.Format("ProductDescription"), Type.GetType("System.String"));//物料描述
                                dt.Columns.Add(string.Format("ProductName"), Type.GetType("System.String"));
                                DataRow rows = dt.NewRow();
                                //循环读取物料描述信息存放在datatable中
                                for (int i = sRowNum1; i < eRowNum1; i++)
                                {
                                    string ProductDescription = CStr(Sheet1.Cells[i, 3].Value) + CStr(Sheet1.Cells[i, 5].Value);
                                    string Qty = CStr(Sheet1.Cells[i, 7].Value);
                                    if (Qty == "" || Qty == null)
                                    {
                                        Qty = "0";
                                    }
                                    float QTY = Convert.ToSingle(Qty);
                                    if (ProductDescription == "" || ProductDescription == null || QTY == 0 || QTY < 0)
                                    {
                                        continue;
                                    }
                                    //for (int j = 3; j < 4; j++)
                                    //{
                                    rows["ProductDescription"] = ProductDescription;
                                    //}
                                    dt.Rows.Add(rows.ItemArray);
                                }



                                //创建数据库链接调用存储过程根据物料描述获取到物料号存放在新的datatable中
                                SqlConnection con = new SqlConnection("Data Source=192.168.124.72;Initial Catalog=OrBitXI;Persist Security Info=True;User ID=sa;Password=admin@2017");
                                con.Open();
                                SqlCommand cmd = new SqlCommand();
                                cmd.CommandText = "Pro_GetProductName";
                                cmd.Connection = con;
                                cmd.CommandType = CommandType.StoredProcedure;
                                SqlParameter param =
                                new SqlParameter("@Pro_GetProductName", SqlDbType.Structured)
                                {
                                    Value = dt
                                };
                                cmd.Parameters.Add(param);
                                cmd.ExecuteNonQuery();
                                //获取到存储过程返回的参数
                                cmd.Parameters.Add(new SqlParameter("@return", SqlDbType.Int));
                                cmd.Parameters["@return"].Direction = ParameterDirection.ReturnValue;
                                SqlDataReader reader = cmd.ExecuteReader();
                                //用来存放物料号和物料描述的新的datatable
                                DataTable dt1 = new DataTable();
                                dt1.Load(reader);
                                //存储过程返回0为true
                                if (Convert.ToInt32(cmd.Parameters["@return"].Value) == 0)
                                {
                                    //读取Excel表格信息
                                    for (int i = (sRowNum1); i < eRowNum1; i++)
                                    {
                                        decimal Excelvalue = 0;
                                        //为装箱单表创建新行
                                        DataRow newARow = PackingListTable.NewRow();
                                        //创建一个Id
                                        string strPackingListId = Guid.NewGuid().ToString().Substring(0, 12);
                                        newARow[string.Format("PackingListId")] = strPackingListId;
                                        ExcelValue2 = CStr(Sheet1.Cells[i, 7].Value);
                                        string MaterialDescription = CStr(Sheet1.Cells[i, 3].Value);
                                        //string ExcelValue1 = Sheet.GetValue(i, 3).ToString();
                                        if ((ExcelValue2 == "") || (ExcelValue2 == null) || MaterialDescription == "" || MaterialDescription == null)
                                        {
                                            continue;
                                        }
                                        Excelvalue = Convert.ToDecimal(ExcelValue2);
                                        if (Excelvalue <= 0)
                                        {
                                            continue;
                                        }
                                        //读取Excel数据
                                        for (int j = sAColNum1; j <= eAColNum1; j++)
                                        {
                                            newARow["ProductOrderId"] = ParentId;

                                            ExcelRange Rang = Sheet1.Cells[i, j];
                                            object objectCellValue = Sheet1.GetValue(i, j);//单元格数据
                                            string CellValue = objectCellValue != null ? objectCellValue.ToString().Trim() : "";
                                            if (Rang.Merge)
                                            {
                                                CellValue = GetMergeValue(Sheet1, i, j);

                                            }
                                            switch (j)
                                            {
                                                case 1: newARow["MaterialType"] = CellValue; break;
                                                case 2:
                                                    if (System.Text.RegularExpressions.Regex.IsMatch(CellValue, @"^[-+]?[0-9]*\.?[0-9]+$"))
                                                    {
                                                        newARow["NumericalOrder"] = CellValue;

                                                    }
                                                    else
                                                    {
                                                        newARow["HardwareFitting"] = CellValue;
                                                    }
                                                    for (int q = 0; q < dt1.Rows.Count; q++)
                                                    {
                                                        string MaterialDescriptionSQL = dt1.Rows[q]["ProductDescription"].ToString();
                                                        string ProductName = dt1.Rows[q]["ProductName"].ToString();
                                                        if (MaterialDescriptionSQL == MaterialDescription)
                                                        {
                                                            newARow["ProductName"] = ProductName;
                                                            break;
                                                        }
                                                        //newARow["ProductName"] = ProductName;
                                                    }
                                                    break;
                                                case 3:
                                                    //MaterialDescription

                                                    newARow["MaterialDescription"] = CellValue + Sheet1.GetValue(i, 5);
                                                    break;
                                                case 7:
                                                    if (CellValue == "" || CellValue == null)
                                                    {
                                                        CellValue = "0";
                                                        Convert.ToSingle(CellValue);
                                                        newARow["Qty"] = CellValue;
                                                    }
                                                    else
                                                    {
                                                        if (System.Text.RegularExpressions.Regex.IsMatch(CellValue, @"^[-+]?[0-9]*\.?[0-9]+$"))
                                                        {

                                                            newARow["Qty"] = CellValue;
                                                        }
                                                        else
                                                        {
                                                            MessageBox.Show("请检查第" + i + "行第" + j + "列数据是否正确！！！");
                                                            IsNumber = false;
                                                        }
                                                    }
                                                    break;
                                                case 8: newARow["Unit"] = CellValue; break;
                                                case 9: newARow["PackingConfirmed"] = CellValue; break;
                                            }
                                        }
                                        if (IsNumber == false)
                                        {
                                            break;
                                        }
                                        PackingListTable.Rows.Add(newARow);
                                    }
                                }
                                con.Close();
                                //释放dt1
                                reader.Close();
                                reader.Dispose();
                                dt1.Clear();
                                dt1.Dispose();

                                //为领料单创建一个datatable
                                DataTable PickingTable = new DataTable();
                                PickingTable.Columns.Add(string.Format("ProductDescription"), Type.GetType("System.String"));//物料描述
                                PickingTable.Columns.Add(string.Format("ProductName"), Type.GetType("System.String"));
                                DataRow Pickingrows = PickingTable.NewRow();
                                //读取物料描述信息存放在datatable中
                                for (int i = sRowNum1; i < eRowNum1; i++)
                                {
                                    string ProductDescription = CStr(Sheet1.Cells[i, 13].Value);
                                    string Qty = CStr(Sheet1.Cells[i, 17].Value);
                                    if (Qty == "" || Qty == null)
                                    {
                                        Qty = "0";
                                    }
                                    decimal QTY = Convert.ToDecimal(Qty);
                                    if (ProductDescription == "" || ProductDescription == null || QTY == 0 || QTY < 0)
                                    {
                                        continue;
                                    }
                                    for (int j = 3; j < 4; j++)
                                    {
                                        Pickingrows["ProductDescription"] = ProductDescription;
                                    }
                                    PickingTable.Rows.Add(Pickingrows.ItemArray);
                                }
                                con.Open();
                                //调用存储过程根据物料描述获取到物料编号存放在另一个datatable中
                                SqlCommand Pickingcmd = new SqlCommand();
                                Pickingcmd.CommandText = "Pro_GetProductName";
                                Pickingcmd.Connection = con;
                                Pickingcmd.CommandType = CommandType.StoredProcedure;
                                SqlParameter parameter =
                                new SqlParameter("@Pro_GetProductName", SqlDbType.Structured)
                                {
                                    Value = PickingTable
                                };

                                Pickingcmd.Parameters.Add(parameter);
                                Pickingcmd.ExecuteNonQuery();
                                Pickingcmd.Parameters.Add(new SqlParameter("@return", SqlDbType.Int));
                                Pickingcmd.Parameters["@return"].Direction = ParameterDirection.ReturnValue;
                                SqlDataReader readerPicking = Pickingcmd.ExecuteReader();
                                DataTable Pickingdt = new DataTable();
                                Pickingdt.Load(readerPicking);
                                //领料单数据读取sRowNum
                                for (int i = sRowNum1; i <= eRowNum1; i++)
                                {
                                    decimal ExcelvalueQty = 0;
                                    int ExcelvalueQty1 = 0;
                                    DataRow newARow = GetMaterialBillsDataTable.NewRow();
                                    ExcelValue2 = CStr(Sheet1.Cells[i, 17].Value);
                                    string MaterialDescription = CStr(Sheet1.Cells[i, 13].Value);
                                    //string ExcelValue1 = Sheet.GetValue(i, 3).ToString();
                                    if ((ExcelValue2 == "") || (ExcelValue2 == null) || (MaterialDescription == "") || (MaterialDescription == null))
                                    {
                                        continue;
                                    }
                                    ExcelvalueQty = Convert.ToDecimal(ExcelValue2);
                                    ExcelvalueQty1 = Convert.ToInt32(ExcelvalueQty * 100);
                                    if (ExcelvalueQty1 <= 0)
                                    {
                                        continue;
                                    }
                                    for (int j = 11; j <= 19; j++)
                                    {

                                        newARow["ProductOrderId"] = ParentId;
                                        string GetMaterialBillsId = Guid.NewGuid().ToString().Substring(0, 12);
                                        newARow["GetMaterialBillsId"] = GetMaterialBillsId.ToUpper();
                                        ExcelRange Rang = Sheet1.Cells[i, j];
                                        object objectCellValue = Sheet1.GetValue(i, j);//单元格数据
                                        string CellValue = objectCellValue != null ? objectCellValue.ToString().Trim() : "";
                                        if (Rang.Merge)
                                        {
                                            CellValue = GetMergeValue(Sheet1, i, j);

                                        }
                                        switch (j)
                                        {
                                            case 11: newARow["MaterialType"] = CellValue; break;
                                            case 12:
                                                if (System.Text.RegularExpressions.Regex.IsMatch(CellValue, @"^[-+]?[0-9]*\.?[0-9]+$"))
                                                {
                                                    newARow["NumericalOrder"] = CellValue;
                                                }
                                                else
                                                {
                                                    newARow["HardwareFitting"] = CellValue;
                                                }

                                                for (int q = 0; q < Pickingdt.Rows.Count; q++)
                                                {
                                                    string MaterialDescriptionSQL = Pickingdt.Rows[q]["ProductDescription"].ToString();
                                                    string ProductName = Pickingdt.Rows[q]["ProductName"].ToString();
                                                    if (MaterialDescriptionSQL == MaterialDescription)
                                                    {
                                                        newARow["ProductName"] = ProductName;
                                                        break;
                                                    }
                                                }
                                                break;
                                            case 13:
                                                newARow["ProductDes"] = CellValue + Sheet1.GetValue(i, 15);
                                                break;
                                            case 17:
                                                if (CellValue == "" || CellValue == null)
                                                {
                                                    CellValue = "0";
                                                    Convert.ToSingle(CellValue);
                                                }
                                                else
                                                {
                                                    if (System.Text.RegularExpressions.Regex.IsMatch(CellValue, @"^[-+]?[0-9]*\.?[0-9]+$"))
                                                    {
                                                        newARow["Qty"] = CellValue;
                                                    }
                                                    else
                                                    {
                                                        MessageBox.Show("请检查第" + i + "行第" + j + "列数据是否正确！！！");
                                                        IsNumber = false;
                                                    }
                                                }
                                                break;
                                            case 18: newARow["Unit"] = CellValue; break;
                                            case 19: newARow["PackingConfirmed"] = CellValue; break;
                                        }
                                    }
                                    if (IsNumber == false)
                                    {
                                        break;
                                    }
                                    GetMaterialBillsDataTable.Rows.Add(newARow);
                                }
                                con.Close();
                                //释放资源
                                readerPicking.Close();
                                readerPicking.Dispose();
                                Pickingdt.Clear();
                                Pickingdt.Dispose();
                            }
                        }
                        catch (Exception ex)
                        {
                            MessageBox.Show(ex.Message);
                        }
                        finally
                        {

                        }

                    }
                }
                #endregion
                //速美包装
                #region
                //if (TheWorksheetExists)
                //{
                //    //装箱单读取
                //    //ExcelWorksheet Sheet1 = null;//数据所在Sheet
                //    //Sheet1 = pck.Workbook.Worksheets["A6包装"];
                //    ExcelWorksheet Sheet5 = null;//数据所在Sheet
                //    Sheet5 = pck.Workbook.Worksheets["速美包装"];
                //    if (Sheet5 != null)
                //    {
                //        try
                //        {
                //            int maxColumnNum = Sheet5.Dimension.End.Column;//最大列
                //            int minColumnNum = Sheet5.Dimension.Start.Column;//最小列
                //            int minRowNum = Sheet5.Dimension.Start.Row;//最小行
                //            int maxRowNum = Sheet5.Dimension.End.Row;//最大行
                //            int sRowNum = 5;//开始行
                //            int eRowNum = 0;//结束行
                //            int sAColNum = 1;//区域A的开始栏位
                //            int eAColNum = 11;//区域A的结束栏位

                //            string ExcelValue2 = "";
                //            //创建数组
                //            int[] list = new int[maxRowNum + 1];
                //            //获取到结束行
                //            for (int d = 5; d <= maxRowNum; d++)
                //            {
                //                string Num1Value = CStr(Sheet5.Cells[d, 1].Value);
                //                if (Num1Value.Trim() == "拆解人" || Num1Value == "包装编号" || Num1Value.Trim() == "序号" || Num1Value.Trim() == "三、整件发货部分（功能柜）" || Num1Value.Trim() == "1.整件包装---可使用对口箱的柜体（抽屉柜、拉篮柜）（备注：所有速美整柜包装需增加蜂窝纸板及配一根同柜体材质拉带）" || Num1Value.Trim() == "2.整件包装--所有无法使用对口箱的所有柜体（备注：所有速美整柜包装需增加蜂窝纸板及配一根同柜体材质拉带）" || Num1Value.Trim() == "散件包装的柜体---可使用一片成型包装箱的明细" || Num1Value.Trim() == "注：以上包装箱适用地柜560深、720高散件柜体；吊柜300深、720高柜体；高柜560深2160高的散件柜体（除特定两种柜形外），外地所有玻璃层板单独包装" || Num1Value.Trim() == "散件包装的柜体--所有无法使用一片成型包装箱的柜体散件（玻璃层板单独包装）" || Num1Value.Trim() == "散件包装柜体的背板" || Num1Value.Trim() == "二、散件门板部分（备注：所有速美门板包装需使用双层包装纸箱）" || Num1Value.Trim() == "1.散件包装的门板---可使用一片成型包装箱的明细" || Num1Value.Trim() == "2.散件包装的门板--所有无法使用一片成型包装箱的门板散件" || Num1Value.Trim() == "四、装饰部件部分（本地、外地通用）")
                //                {
                //                    eRowNum = d;
                //                    //list[d] = d;
                //                    //将非数据列放进数组
                //                    if (Num1Value == "序号" || Num1Value == "包装编号" || Num1Value.Trim() == "三、整件发货部分（功能柜）" || Num1Value.Trim() == "1.整件包装---可使用对口箱的柜体（抽屉柜、拉篮柜）（备注：所有速美整柜包装需增加蜂窝纸板及配一根同柜体材质拉带）" || Num1Value.Trim() == "2.整件包装--所有无法使用对口箱的所有柜体（备注：所有速美整柜包装需增加蜂窝纸板及配一根同柜体材质拉带）" || Num1Value.Trim() == "散件包装的柜体---可使用一片成型包装箱的明细" || Num1Value.Trim() == "注：以上包装箱适用地柜560深、720高散件柜体；吊柜300深、720高柜体；高柜560深2160高的散件柜体（除特定两种柜形外），外地所有玻璃层板单独包装" || Num1Value.Trim() == "散件包装的柜体--所有无法使用一片成型包装箱的柜体散件（玻璃层板单独包装）" || Num1Value.Trim() == "散件包装柜体的背板" || Num1Value.Trim() == "二、散件门板部分（备注：所有速美门板包装需使用双层包装纸箱）" || Num1Value.Trim() == "1.散件包装的门板---可使用一片成型包装箱的明细" || Num1Value.Trim() == "2.散件包装的门板--所有无法使用一片成型包装箱的门板散件" || Num1Value.Trim() == "四、装饰部件部分（本地、外地通用）")
                //                    {
                //                        list[d] = d;
                //                    }
                //                    continue;
                //                }
                //            }
                //            //ExcelValue2 = CStr(Sheet.Cells[11, 9].Value);
                //            //DataTable Packing_ListTable = Packing_List();
                //            //A6包装数据读取
                //            for (int i = sRowNum; i <= eRowNum; i++)
                //            {
                //                DataRow newARow = Packing_ListTable.NewRow();
                //                ExcelValue2 = CStr(Sheet5.Cells[i, 9].Value);

                //                ExcelRange Range = Sheet5.Cells[i, 5];
                //                object objectCellNumber = Sheet5.GetValue(i, 5);//单元格数据
                //                string CellNumber = objectCellNumber != null ? objectCellNumber.ToString().Trim() : "";
                //                if (Range.Merge)
                //                {
                //                    CellNumber = GetMergeValue(Sheet5, i, 5);
                //                }

                //                if (CellNumber == "" || CellNumber == null)
                //                {
                //                    continue;
                //                }
                //                if (System.Text.RegularExpressions.Regex.IsMatch(ExcelValue2.ToString(), @"^[-+]?[0-9]*\.?[0-9]+$") || ExcelValue2.Trim() == "车间调配")
                //                {
                //                    decimal Value = 0;
                //                    int Value2 = 0;
                //                    if (ExcelValue2 == "车间调配")
                //                    {

                //                    }
                //                    else
                //                    {
                //                        Value = decimal.Parse(ExcelValue2);
                //                        Value2 = Convert.ToInt32(Value);
                //                    }
                //                    if (Value > 0 || ExcelValue2 == "车间调配")
                //                    {
                //                        for (int j = sAColNum; j <= eAColNum; j++)
                //                        {
                //                            newARow["ProductOrderId"] = ParentId;
                //                            //string TheDeliveryCateGory = CStr(Sheet.Cells[i, 1].Value).Trim();
                //                            ExcelRange Rang = Sheet5.Cells[i, j];
                //                            object objectCellValue = Sheet5.GetValue(i, j);//单元格数据
                //                            string CellValue = objectCellValue != null ? objectCellValue.ToString().Trim() : "";
                //                            if (Rang.Merge)
                //                            {
                //                                CellValue = GetMergeValue(Sheet5, i, j);
                //                            }


                //                            switch (j)
                //                            {
                //                                case 1: newARow["PackingNumber"] = CellValue; break;
                //                                case 2:

                //                                    newARow["Wide"] = CellValue;
                //                                    break;
                //                                case 3:

                //                                    newARow["High"] = CellValue;
                //                                    break;
                //                                case 4:
                //                                    newARow["Depth"] = CellValue;
                //                                    break;
                //                                case 5: newARow["Cell"] = CellValue; break;
                //                                case 6: newARow["CabinetType"] = CellValue; break;
                //                                case 7: newARow["NameOfPackagingMaterials"] = CellValue; break;
                //                                case 8:
                //                                    if (CellValue == "" || CellValue == null)
                //                                    {
                //                                        newARow["MaterialCode"] = "null";
                //                                    }
                //                                    else
                //                                    {
                //                                        newARow["MaterialCode"] = CellValue;
                //                                    }
                //                                    break;

                //                                case 9:
                //                                    if (System.Text.RegularExpressions.Regex.IsMatch(CellValue, @"^[-+]?[0-9]*\.?[0-9]+$"))
                //                                    {
                //                                        decimal QtyValue = Convert.ToDecimal(CellValue);
                //                                        newARow["Qty"] = QtyValue;
                //                                    }
                //                                    else
                //                                    {
                //                                        newARow["PackingQuantity"] = CellValue;
                //                                    }
                //                                    break;
                //                                case 10:
                //                                    if (CellValue == "车间调配")
                //                                    {
                //                                        newARow["Unit"] = null;
                //                                    }
                //                                    else
                //                                    {
                //                                        newARow["Unit"] = CellValue;
                //                                    }
                //                                    break;
                //                                case 11: newARow["Remark"] = CellValue; break;
                //                            }
                //                            int TheDeliveryCateGoryId = 0;
                //                            int TheDeliveryCateGoryId1 = 0;
                //                            int TheDeliveryCateGoryId2 = 0;
                //                            string TheDeliveryCateGory = "";
                //                            string PackingGroup = "";
                //                            for (int q = 5; q <= eRowNum; q++)
                //                            {
                //                                if (list[q] == 0 || CStr(Sheet5.Cells[list[q], 1].Value).Trim() == "序号" || CStr(Sheet5.Cells[list[q], 1].Value).Trim() == "注：以上包装箱适用地柜560深、720高散件柜体；吊柜300深、720高柜体；高柜560深2160高的散件柜体（除特定两种柜形外），外地所有玻璃层板单独包装")
                //                                {
                //                                    continue;
                //                                }
                //                                TheDeliveryCateGory = CStr(Sheet5.Cells[list[q], 1].Value).Trim();
                //                                if (TheDeliveryCateGory == "三、整件发货部分（功能柜）")
                //                                {
                //                                    TheDeliveryCateGoryId = q;
                //                                }
                //                                if (TheDeliveryCateGory == "二、散件门板部分（备注：所有速美门板包装需使用双层包装纸箱）")
                //                                {
                //                                    TheDeliveryCateGoryId1 = q;
                //                                }
                //                                if (TheDeliveryCateGory == "四、装饰部件部分（本地、外地通用）")
                //                                {
                //                                    TheDeliveryCateGoryId2 = q;
                //                                }
                //                            }
                //                            int PackingGroupId = 0;
                //                            int PackingGroupId1 = 0;
                //                            int PackingGroupId2 = 0;
                //                            int PackingGroupId3 = 0;
                //                            int PackingGroupId4 = 0;
                //                            int PackingGroupId5 = 0;
                //                            int PackingGroupId6 = 0;

                //                            for (int q = 6; q < eRowNum; q++)
                //                            {
                //                                if (list[q] == 0 || CStr(Sheet5.Cells[list[q], 1].Value).Trim() == "序号" || CStr(Sheet5.Cells[list[q], 1].Value).Trim() == "注：以上包装箱适用地柜560深、720高散件柜体；吊柜300深、720高柜体；高柜560深2160高的散件柜体（除特定两种柜形外），外地所有玻璃层板单独包装")
                //                                {
                //                                    continue;
                //                                }
                //                                PackingGroup = CStr(Sheet5.Cells[list[q], 1].Value).Trim();
                //                                if (PackingGroup == "1.整件包装---可使用对口箱的柜体（抽屉柜、拉篮柜）（备注：所有速美整柜包装需增加蜂窝纸板及配一根同柜体材质拉带）")
                //                                {
                //                                    PackingGroupId = q;
                //                                }
                //                                if (PackingGroup == "2.整件包装--所有无法使用对口箱的所有柜体（备注：所有速美整柜包装需增加蜂窝纸板及配一根同柜体材质拉带）")
                //                                {
                //                                    PackingGroupId1 = q;
                //                                }
                //                                if (PackingGroup == "散件包装的柜体---可使用一片成型包装箱的明细")
                //                                {
                //                                    PackingGroupId2 = q;
                //                                }
                //                                if (PackingGroup == "散件包装的柜体--所有无法使用一片成型包装箱的柜体散件（玻璃层板单独包装）")
                //                                {
                //                                    PackingGroupId3 = q;
                //                                }
                //                                if (PackingGroup == "散件包装柜体的背板")
                //                                {
                //                                    PackingGroupId4 = q;
                //                                }
                //                                if (PackingGroup == "1.散件包装的门板---可使用一片成型包装箱的明细")
                //                                {
                //                                    PackingGroupId5 = q;
                //                                }
                //                                if (PackingGroup == "2.散件包装的门板--所有无法使用一片成型包装箱的门板散件")
                //                                {
                //                                    PackingGroupId6 = q;
                //                                }
                //                            }


                //                            if (i >= TheDeliveryCateGoryId && i < TheDeliveryCateGoryId1)
                //                            {
                //                                newARow["TheDeliveryCateGory"] = CStr(Sheet5.Cells[TheDeliveryCateGoryId, 1].Value).Trim();
                //                            }
                //                            else if (i >= TheDeliveryCateGoryId1 && i < TheDeliveryCateGoryId2)
                //                            {
                //                                newARow["TheDeliveryCateGory"] = CStr(Sheet5.Cells[TheDeliveryCateGoryId1, 1].Value).Trim();
                //                            }
                //                            else if (i >= TheDeliveryCateGoryId2)
                //                            {
                //                                newARow["TheDeliveryCateGory"] = CStr(Sheet5.Cells[TheDeliveryCateGoryId2, 1].Value).Trim();
                //                            }

                //                            if (i >= PackingGroupId && i < PackingGroupId1)
                //                            {
                //                                newARow["PackingGroup"] = CStr(Sheet5.Cells[PackingGroupId, 1].Value).Trim();
                //                            }
                //                            if (i >= PackingGroupId1 && i < PackingGroupId2)
                //                            {
                //                                newARow["PackingGroup"] = CStr(Sheet5.Cells[PackingGroupId1, 1].Value).Trim();
                //                            }
                //                            if (i >= PackingGroupId2 && i < PackingGroupId3)
                //                            {
                //                                newARow["PackingGroup"] = CStr(Sheet5.Cells[PackingGroupId2, 1].Value).Trim();
                //                            }
                //                            if (i >= PackingGroupId3 && i < PackingGroupId4)
                //                            {
                //                                newARow["PackingGroup"] = CStr(Sheet5.Cells[PackingGroupId3, 1].Value).Trim();
                //                            }
                //                            if (i >= PackingGroupId4 && i < PackingGroupId5)
                //                            {
                //                                newARow["PackingGroup"] = CStr(Sheet5.Cells[PackingGroupId4, 1].Value).Trim();
                //                            }
                //                            if (i >= PackingGroupId5 && i < PackingGroupId6)
                //                            {
                //                                newARow["PackingGroup"] = CStr(Sheet5.Cells[PackingGroupId5, 1].Value).Trim();
                //                            }
                //                            if (i >= PackingGroupId6 && i <= TheDeliveryCateGoryId2)
                //                            {
                //                                newARow["PackingGroup"] = CStr(Sheet5.Cells[PackingGroupId6, 1].Value).Trim();
                //                            }
                //                            if (i >= TheDeliveryCateGoryId2)
                //                            {
                //                                newARow["PackingGroup"] = null;
                //                            }
                //                        }
                //                    }
                //                    else
                //                    {
                //                        continue;
                //                    }

                //                }

                //                if ((ExcelValue2 == "") || (ExcelValue2 == null) || (ExcelValue2 == "数量"))
                //                {
                //                    continue;
                //                }
                //                Packing_ListTable.Rows.Add(newARow);

                //            }
                //            list = null;
                //        }
                //        catch (Exception ex)
                //        {
                //            MessageBox.Show(ex.Message);
                //        }
                //        finally
                //        {

                //        }


                //    }
                //}
                #endregion
                //A6包装
                #region
                //装箱单读取
                //ExcelWorksheet Sheet1 = null;//数据所在Sheet
                //Sheet1 = pck.Workbook.Worksheets["A6包装"];
                ExcelWorksheet Sheet4 = null;//数据所在Sheet
                Sheet4 = pck.Workbook.Worksheets["A6包装"];
                if (Sheet4 != null)
                {
                    try
                    {
                        int maxColumnNum = Sheet4.Dimension.End.Column;//最大列
                        int minColumnNum = Sheet4.Dimension.Start.Column;//最小列
                        int minRowNum = Sheet4.Dimension.Start.Row;//最小行
                        int maxRowNum = Sheet4.Dimension.End.Row;//最大行
                        int sRowNum = 5;//开始行
                        int eRowNum = 0;//结束行
                        int sAColNum = 1;//区域A的开始栏位
                        int eAColNum = 11;//区域A的结束栏位

                        string ExcelValue2 = "";
                        //创建数组
                        int[] list = new int[maxRowNum + 1];
                        //获取结束行
                        for (int d = 5; d <= maxRowNum; d++)
                        {
                            string Num1Value = CStr(Sheet4.Cells[d, 1].Value);
                            if (Num1Value.Trim() == "备注：灯箱底板、拉篮、含玻璃镜子的板件都需要打硬包装" || Num1Value.Trim() == "包装编号" || Num1Value.Trim() == "序号" || Num1Value.Trim() == "三、整件发货部分（功能柜）" || Num1Value.Trim() == "1.整件包装---可使用对口箱的柜体（抽屉柜、拉篮柜）（备注：所有整柜包装需增加蜂窝纸板)" || Num1Value.Trim() == "2.整件包装--所有无法使用对口箱的所有柜体（备注：所有整柜包装需增加蜂窝纸板)" || Num1Value.Trim() == "散件包装的柜体---可使用一片成型包装箱的明细" || Num1Value.Trim() == "注：以上包装箱适用地柜560深、720高散件柜体；吊柜300深、720高柜体；高柜560深2160高的散件柜体（除特定两种柜形外），外地所有玻璃层板单独包装" || Num1Value.Trim() == "散件包装的柜体--所有无法使用一片成型包装箱的柜体散件（玻璃层板单独包装）" || Num1Value.Trim() == "散件包装柜体的背板" || Num1Value.Trim() == "二、散件门板部分" || Num1Value.Trim() == "1.散件包装的门板---可使用一片成型包装箱的明细" || Num1Value.Trim() == "2.散件包装的门板--所有无法使用一片成型包装箱的门板散件" || Num1Value.Trim() == "四、装饰部件部分（本地、外地通用）")
                            {
                                eRowNum = d;
                                //list[d] = d;
                                //将非数据行放进数组
                                if (Num1Value.Trim() == "备注：灯箱底板、拉篮、含玻璃镜子的板件都需要打硬包装" || Num1Value.Trim() == "包装编号" || Num1Value.Trim() == "序号" || Num1Value.Trim() == "三、整件发货部分（功能柜）" || Num1Value.Trim() == "1.整件包装---可使用对口箱的柜体（抽屉柜、拉篮柜）（备注：所有整柜包装需增加蜂窝纸板)" || Num1Value.Trim() == "2.整件包装--所有无法使用对口箱的所有柜体（备注：所有整柜包装需增加蜂窝纸板)" || Num1Value.Trim() == "散件包装的柜体---可使用一片成型包装箱的明细" || Num1Value.Trim() == "注：以上包装箱适用地柜560深、720高散件柜体；吊柜300深、720高柜体；高柜560深2160高的散件柜体（除特定两种柜形外），外地所有玻璃层板单独包装" || Num1Value.Trim() == "散件包装的柜体--所有无法使用一片成型包装箱的柜体散件（玻璃层板单独包装）" || Num1Value.Trim() == "散件包装柜体的背板" || Num1Value.Trim() == "二、散件门板部分" || Num1Value.Trim() == "1.散件包装的门板---可使用一片成型包装箱的明细" || Num1Value.Trim() == "2.散件包装的门板--所有无法使用一片成型包装箱的门板散件" || Num1Value.Trim() == "四、装饰部件部分（本地、外地通用）")
                                {
                                    list[d] = d;
                                }
                                continue;
                            }
                        }
                        //ExcelValue2 = CStr(Sheet.Cells[11, 9].Value);
                        //DataTable Packing_ListTable = Packing_List();
                        //A6包装数据读取
                        for (int i = sRowNum; i <= eRowNum; i++)
                        {
                            DataRow newARow = Packing_ListA6Table.NewRow();
                            ExcelValue2 = CStr(Sheet4.Cells[i, 9].Value);

                            ExcelRange Range = Sheet4.Cells[i, 5];
                            object objectCellNumber = Sheet4.GetValue(i, 5);//单元格数据
                            string CellNumber = objectCellNumber != null ? objectCellNumber.ToString().Trim() : "";
                            if (Range.Merge)
                            {
                                CellNumber = GetMergeValue(Sheet4, i, 5);
                            }

                            if (CellNumber == "" || CellNumber == null)
                            {
                                continue;
                            }
                            if (System.Text.RegularExpressions.Regex.IsMatch(ExcelValue2.ToString(), @"^[-+]?[0-9]*\.?[0-9]+$") || ExcelValue2.Trim() == "车间调配")
                            {
                                decimal Value = 0;
                                int Value2 = 0;
                                if (ExcelValue2 == "车间调配")
                                {

                                }
                                else
                                {
                                    Value = decimal.Parse(ExcelValue2);
                                    Value2 = Convert.ToInt32(Value);
                                }
                                if (Value > 0 || ExcelValue2 == "车间调配")
                                {
                                    for (int j = sAColNum; j <= eAColNum; j++)
                                    {
                                        newARow["ProductOrderId"] = ParentId;
                                        //string TheDeliveryCateGory = CStr(Sheet.Cells[i, 1].Value).Trim();
                                        ExcelRange Rang = Sheet4.Cells[i, j];
                                        object objectCellValue = Sheet4.GetValue(i, j);//单元格数据
                                        string CellValue = objectCellValue != null ? objectCellValue.ToString().Trim() : "";
                                        if (Rang.Merge)
                                        {
                                            CellValue = GetMergeValue(Sheet4, i, j);
                                        }


                                        switch (j)
                                        {
                                            case 1: newARow["PackingNumber"] = CellValue; break;
                                            case 2:

                                                newARow["Wide"] = CellValue;
                                                break;
                                            case 3:

                                                newARow["High"] = CellValue;
                                                break;
                                            case 4:
                                                string ExcelValue4 = CStr(Sheet4.Cells[i, j].Value);


                                                if (ExcelValue4 == "" || ExcelValue4 == null)
                                                {
                                                    newARow["Depth"] = "0";
                                                }
                                                else
                                                {
                                                    newARow["Depth"] = CellValue;
                                                }

                                                break;
                                            case 5: newARow["Cell"] = CellValue; break;
                                            case 6: newARow["CabinetType"] = CellValue; break;
                                            case 7: newARow["NameOfPackagingMaterials"] = CellValue; break;
                                            case 8: newARow["MaterialCode"] = CellValue; break;

                                            case 9:
                                                if (System.Text.RegularExpressions.Regex.IsMatch(CellValue, @"^[-+]?[0-9]*\.?[0-9]+$"))
                                                {
                                                    newARow["Qty"] = CellValue;
                                                }
                                                else
                                                {
                                                    newARow["PackingQuantity"] = CellValue;
                                                }
                                                break;
                                            case 10:
                                                if (CellValue == "车间调配")
                                                {
                                                    newARow["Unit"] = null;
                                                }
                                                else
                                                {
                                                    newARow["Unit"] = CellValue;
                                                }
                                                break;
                                            case 11: newARow["Remark"] = CellValue; break;
                                        }
                                        int TheDeliveryCateGoryId = 0;
                                        int TheDeliveryCateGoryId1 = 0;
                                        int TheDeliveryCateGoryId2 = 0;
                                        string TheDeliveryCateGory = "";
                                        string PackingGroup = "";
                                        for (int q = 5; q < eRowNum; q++)
                                        {
                                            if (list[q] == 0 || CStr(Sheet4.Cells[list[q], 1].Value).Trim() == "序号" || CStr(Sheet4.Cells[list[q], 1].Value).Trim() == "注：以上包装箱适用地柜560深、720高散件柜体；吊柜300深、720高柜体；高柜560深2160高的散件柜体（除特定两种柜形外），外地所有玻璃层板单独包装")
                                            {
                                                continue;
                                            }
                                            TheDeliveryCateGory = CStr(Sheet4.Cells[list[q], 1].Value).Trim();
                                            if (TheDeliveryCateGory == "三、整件发货部分（功能柜）")
                                            {
                                                TheDeliveryCateGoryId = q;
                                            }
                                            if (TheDeliveryCateGory == "二、散件门板部分")
                                            {
                                                TheDeliveryCateGoryId1 = q;
                                            }
                                            if (TheDeliveryCateGory == "四、装饰部件部分（本地、外地通用）")
                                            {
                                                TheDeliveryCateGoryId2 = q;
                                            }
                                        }
                                        int PackingGroupId = 0;
                                        int PackingGroupId1 = 0;
                                        int PackingGroupId2 = 0;
                                        int PackingGroupId3 = 0;
                                        int PackingGroupId4 = 0;
                                        int PackingGroupId5 = 0;
                                        int PackingGroupId6 = 0;

                                        for (int q = 6; q < eRowNum; q++)
                                        {
                                            if (list[q] == 0 || CStr(Sheet4.Cells[list[q], 1].Value).Trim() == "序号" || CStr(Sheet4.Cells[list[q], 1].Value).Trim() == "注：以上包装箱适用地柜560深、720高散件柜体；吊柜300深、720高柜体；高柜560深2160高的散件柜体（除特定两种柜形外），外地所有玻璃层板单独包装")
                                            {
                                                continue;
                                            }
                                            PackingGroup = CStr(Sheet4.Cells[list[q], 1].Value).Trim();
                                            if (PackingGroup == "1.整件包装---可使用对口箱的柜体（抽屉柜、拉篮柜）（备注：所有整柜包装需增加蜂窝纸板)")
                                            {
                                                PackingGroupId = q;
                                            }
                                            if (PackingGroup == "2.整件包装--所有无法使用对口箱的所有柜体（备注：所有整柜包装需增加蜂窝纸板)")
                                            {
                                                PackingGroupId1 = q;
                                            }
                                            if (PackingGroup == "散件包装的柜体---可使用一片成型包装箱的明细")
                                            {
                                                PackingGroupId2 = q;
                                            }
                                            if (PackingGroup == "散件包装的柜体--所有无法使用一片成型包装箱的柜体散件（玻璃层板单独包装）")
                                            {
                                                PackingGroupId3 = q;
                                            }
                                            if (PackingGroup == "散件包装柜体的背板")
                                            {
                                                PackingGroupId4 = q;
                                            }
                                            if (PackingGroup == "1.散件包装的门板---可使用一片成型包装箱的明细")
                                            {
                                                PackingGroupId5 = q;
                                            }
                                            if (PackingGroup == "2.散件包装的门板--所有无法使用一片成型包装箱的门板散件")
                                            {
                                                PackingGroupId6 = q;
                                            }
                                        }


                                        if (i >= TheDeliveryCateGoryId && i < TheDeliveryCateGoryId1)
                                        {
                                            newARow["TheDeliveryCateGory"] = CStr(Sheet4.Cells[TheDeliveryCateGoryId, 1].Value).Trim();
                                        }
                                        else if (i >= TheDeliveryCateGoryId1 && i < TheDeliveryCateGoryId2)
                                        {
                                            newARow["TheDeliveryCateGory"] = CStr(Sheet4.Cells[TheDeliveryCateGoryId1, 1].Value).Trim();
                                        }
                                        else if (i >= TheDeliveryCateGoryId2)
                                        {
                                            newARow["TheDeliveryCateGory"] = CStr(Sheet4.Cells[TheDeliveryCateGoryId2, 1].Value).Trim();
                                        }

                                        if (i >= PackingGroupId && i < PackingGroupId1)
                                        {
                                            newARow["PackingGroup"] = CStr(Sheet4.Cells[PackingGroupId, 1].Value).Trim();
                                        }
                                        if (i >= PackingGroupId1 && i < PackingGroupId2)
                                        {
                                            newARow["PackingGroup"] = CStr(Sheet4.Cells[PackingGroupId1, 1].Value).Trim();
                                        }
                                        if (i >= PackingGroupId2 && i < PackingGroupId3)
                                        {
                                            newARow["PackingGroup"] = CStr(Sheet4.Cells[PackingGroupId2, 1].Value).Trim();
                                        }
                                        if (i >= PackingGroupId3 && i < PackingGroupId4)
                                        {
                                            newARow["PackingGroup"] = CStr(Sheet4.Cells[PackingGroupId3, 1].Value).Trim();
                                        }
                                        if (i >= PackingGroupId4 && i < PackingGroupId5)
                                        {
                                            newARow["PackingGroup"] = CStr(Sheet4.Cells[PackingGroupId4, 1].Value).Trim();
                                        }
                                        if (i >= PackingGroupId5 && i < PackingGroupId6)
                                        {
                                            newARow["PackingGroup"] = CStr(Sheet4.Cells[PackingGroupId5, 1].Value).Trim();
                                        }
                                        if (i >= PackingGroupId6 && i < TheDeliveryCateGoryId2)
                                        {
                                            newARow["PackingGroup"] = CStr(Sheet4.Cells[PackingGroupId6, 1].Value).Trim();
                                        }
                                        if (i >= TheDeliveryCateGoryId2)
                                        {
                                            newARow["PackingGroup"] = null;
                                        }
                                    }
                                }
                                else
                                {
                                    continue;
                                }

                            }

                            if ((ExcelValue2 == "") || (ExcelValue2 == null) || (ExcelValue2 == "数量"))
                            {
                                continue;
                            }
                            Packing_ListA6Table.Rows.Add(newARow);

                        }
                        list = null;
                    }
                    catch (Exception ex)
                    {
                        MessageBox.Show(ex.Message);
                    }
                    finally
                    {

                    }

                }
                #endregion

            }
        }
    }
    /// <summary>
    /// 领料单类
    /// </summary>
    public class MaterialBillsData : GetMaterialBillsDataToSQL
    {
        //GetMaterialBillsDataTable, PackingListTable
        public override void ReadGetMaterialBillsData(string Path, string ParentId)
        {
            try
            {
                FileStream Fs = new FileStream(Path, FileMode.Open, FileAccess.Read);
                using (ExcelPackage pck = new ExcelPackage(Fs))
                {
                    ExcelWorksheet Sheet = null;//数据所在Sheet
                    Sheet = pck.Workbook.Worksheets["领料单"];
                    if (Sheet != null)
                    {
                        int maxColumnNum = Sheet.Dimension.End.Column;//最大列
                        int minColumnNum = Sheet.Dimension.Start.Column;//最小列
                        int minRowNum = Sheet.Dimension.Start.Row;//最小行
                        int maxRowNum = Sheet.Dimension.End.Row;//最大行
                        int sRowNum = 5;//开始行
                        int eRowNum = 0;//结束行
                        int sAColNum = 1;//区域A的开始栏位
                        int eAColNum = 6;//区域A的结束栏位
                        int ZhuangXiangEndId = 0;//装箱清单结束行
                        bool IsNumber = true;
                        string ExcelValue2 = "";

                        //获取领料单结束行
                        for (int d = 66; d < maxRowNum; d++)
                        {
                            string Identifier = CStr(Sheet.Cells[d, 1].Value);
                            if (Identifier.Trim() == "拆解员：")
                            {
                                eRowNum = d - 1;
                                break;
                            }
                        }
                        //获取装箱单结束行
                        for (int d = eRowNum + 7; d < maxRowNum; d++)
                        {
                            if (CStr(Sheet.Cells[d, 1].Value) == "拆解人")
                            {
                                ZhuangXiangEndId = d - 1;
                                break;
                            }
                        }
                        //装箱单数据读取

                        if (IsNumber == true)
                        {
                            for (int i = (eRowNum + 7); i < ZhuangXiangEndId; i++)
                            {
                                DataRow newARow = PackingListTable.NewRow();
                                string str = Guid.NewGuid().ToString().Substring(0, 12);
                                newARow[string.Format("PackingListId")] = str;
                                for (int j = sAColNum; j <= eAColNum; j++)
                                {
                                    newARow["ProductOrderId"] = ParentId;
                                    ExcelValue2 = CStr(Sheet.Cells[i, 3].Value);

                                    //string ExcelValue1 = Sheet.GetValue(i, 3).ToString();
                                    if ((ExcelValue2 == "") || (ExcelValue2 == null))
                                    {
                                        break;
                                    }
                                    ExcelRange Rang = Sheet.Cells[i, j];
                                    object objectCellValue = Sheet.GetValue(i, j);//单元格数据
                                    string CellValue = objectCellValue != null ? objectCellValue.ToString().Trim() : "";
                                    if (Rang.Merge)
                                    {
                                        CellValue = GetMergeValue(Sheet, i, j);

                                    }
                                    switch (j)
                                    {
                                        case 1: newARow["ProjectName"] = CellValue; break;
                                        case 2:
                                            if (System.Text.RegularExpressions.Regex.IsMatch(CellValue, @"^\d*$"))
                                            {
                                                newARow["NumericalOrder"] = CellValue;

                                            }
                                            else
                                            {
                                                newARow["HardwareFitting"] = CellValue;
                                            }
                                            break;
                                        case 3:
                                            newARow["MaterialDescription"] = CellValue;
                                            break;
                                        case 4:
                                            if (CellValue == "" || CellValue == null)
                                            {
                                                CellValue = "0";
                                                Convert.ToSingle(CellValue);
                                            }
                                            else
                                            {
                                                if (System.Text.RegularExpressions.Regex.IsMatch(CellValue, @"^\d*$"))
                                                {
                                                    decimal Qty = Math.Round(decimal.Parse(CellValue), 3, MidpointRounding.AwayFromZero);
                                                    newARow["Qty"] = Qty;
                                                }
                                                else
                                                {
                                                    MessageBox.Show("请检查第" + i + "行第" + j + "列数据是否正确！！！");
                                                    IsNumber = false;
                                                }
                                            }
                                            break;
                                        case 5: newARow["Unit"] = CellValue; break;
                                        case 6: newARow["PackingConfirmed"] = CellValue; break;
                                    }
                                }
                                if (IsNumber == false)
                                {
                                    break;
                                }
                                if ((ExcelValue2 == "") || (ExcelValue2 == null))
                                {
                                    continue;
                                }
                                PackingListTable.Rows.Add(newARow);
                            }
                            //领料单数据读取sRowNum
                            for (int i = sRowNum; i <= eRowNum; i++)
                            {
                                DataRow newARow = GetMaterialBillsDataTable.NewRow();
                                for (int j = sAColNum; j <= eAColNum; j++)
                                {
                                    newARow["ProductOrderId"] = ParentId;
                                    ExcelValue2 = CStr(Sheet.Cells[i, 3].Value);

                                    //string ExcelValue1 = Sheet.GetValue(i, 3).ToString();
                                    if ((ExcelValue2 == "") || (ExcelValue2 == null))
                                    {
                                        break;
                                    }
                                    ExcelRange Rang = Sheet.Cells[i, j];
                                    object objectCellValue = Sheet.GetValue(i, j);//单元格数据
                                    string CellValue = objectCellValue != null ? objectCellValue.ToString().Trim() : "";
                                    if (Rang.Merge)
                                    {
                                        CellValue = GetMergeValue(Sheet, i, j);

                                    }
                                    switch (j)
                                    {
                                        case 1: newARow["ProjectName"] = CellValue; break;
                                        case 2:
                                            if (System.Text.RegularExpressions.Regex.IsMatch(CellValue, @"^\d*$"))
                                            {
                                                newARow["NumericalOrder"] = CellValue;

                                            }
                                            else
                                            {
                                                newARow["NumericalOrder"] = CellValue;
                                            }
                                            break;
                                        case 3: newARow["ProductDes"] = CellValue; break;
                                        case 4:
                                            if (CellValue == "" || CellValue == null)
                                            {
                                                CellValue = "0";
                                                Convert.ToSingle(CellValue);
                                            }
                                            else
                                            {
                                                if (System.Text.RegularExpressions.Regex.IsMatch(CellValue, @"^\d*$"))
                                                {
                                                    decimal Qty = Math.Round(decimal.Parse(CellValue), 3, MidpointRounding.AwayFromZero);
                                                    newARow["Qty"] = Qty;
                                                }
                                                else
                                                {
                                                    MessageBox.Show("请检查第" + i + "行第" + j + "列数据是否正确！！！");
                                                    IsNumber = false;
                                                }
                                            }
                                            break;
                                        case 5: newARow["Unit"] = CellValue; break;
                                        case 6: newARow["PackingConfirmed"] = CellValue; break;
                                    }
                                }
                                if (IsNumber == false)
                                {
                                    break;
                                }
                                if ((ExcelValue2 == "") || (ExcelValue2 == null))
                                {
                                    continue;
                                }
                                GetMaterialBillsDataTable.Rows.Add(newARow);
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {

                MessageBox.Show(ex.Message);
            }
        }
        /// <summary>
        /// 判断合并单元格获取值
        /// </summary>
        /// <param name="worksheet"></param>
        /// <param name="row">单元格行</param>
        /// <param name="column">单元格列</param>
        /// <returns></returns>
        public static string GetMergeValue(ExcelWorksheet worksheet, int row, int column)
        {
            string MergeValue = "";
            ExcelWorksheet.MergeCellsCollection<string> MergeCells = worksheet.MergedCells;
            for (int i = 0; i < MergeCells.Count; i++)
            {
                string range = MergeCells[i];
                ExcelAddress add = new ExcelAddress(range);
                int srow = add.Start.Row;//合并单元格开始行
                int scol = add.Start.Column;//合并单元格开始行
                int erow = add.End.Row;//合并单元格结束行
                int ecol = add.End.Column;//合并单元格结束行
                object value = worksheet.Cells[(new ExcelAddress(range)).Start.Row, (new ExcelAddress(range)).Start.Column].Value;
                if (row >= srow && row <= erow && column >= scol && column <= ecol)
                {
                    MergeValue = value.ToString();
                    break;
                }
            }
            return MergeValue;
        }
        protected string CStr(object o) { return o != null ? o.ToString() : ""; }

    }



    /// <summary>
    /// 无毒平板门板模板作业单，领料单导入数据库2018.6.29
    /// </summary>
    /// <param name="orderDaetail"></param>
    /// <param name="IssueMaterialBills"></param>
    public class Non_toxicSeriesOfMaterialsExcelData : Non_toxicSeriesOfMaterialsData
    {
        protected string CStr(object o) { return o != null ? o.ToString() : ""; }
        public override void ReadNon_toxicSeriesOfMaterialsData(string Path, string ParentId)
        {
            //bool TheWorksheetExists = true;
            //bool IsOrderDetailQueryDoMethod = true;
            DataSet DS = new DataSet();
            try
            {
                FileStream Fs = new FileStream(Path, FileMode.Open, FileAccess.Read);
                using (ExcelPackage pck = new ExcelPackage(Fs))
                {
                    ExcelWorksheet Sheet = null;//数据所在Sheet
                    SqlConnection con = new SqlConnection("Data Source=192.168.124.72;Initial Catalog=OrBitXI;User ID=sa;Password='admin@2017'");
                    //无毒系列作业单
                    #region
                    Sheet = pck.Workbook.Worksheets["无毒系列作业单"];
                    if (Sheet.Hidden.ToString() == "Visible")
                    {
                        //if (Sheet.Name == "无毒系列作业单")
                        //{
                        int maxColumnNum = Sheet.Dimension.End.Column;//最大列
                        int minColumnNum = Sheet.Dimension.Start.Column;//最小列
                        int minRowNum = Sheet.Dimension.Start.Row;//最小行
                        int maxRowNum = Sheet.Dimension.End.Row;//最大行
                        int sRowNum = 7;//开始行
                        int eRowNum = 0;//结束行
                        int sAColNum = 1;//区域A的开始栏位
                        int eAColNum = 13;//区域A的结束栏位
                        string PlateName = "";
                        string OrderDetailId = "";
                        //获取结束行
                        for (int d = 1; d < maxRowNum; d++)
                        {
                            if ((CStr(Sheet.Cells[d, 1].Value)).Trim() == "制单人：")
                            {
                                eRowNum = d - 1;
                                break;
                            }
                        }
                        ////创建datatable存放箱体序号
                        //DataTable BoxNum = new DataTable();
                        //BoxNum.Columns.Add(string.Format("BoxNumId"), Type.GetType("System.String"));
                        //BoxNum.Columns.Add(string.Format("BoxNum"), Type.GetType("System.String"));
                        //BoxNum.Columns.Add(string.Format("OrderDetailId"), Type.GetType("System.String"));
                        //BoxNum.Columns.Add(string.Format("Identification"), Type.GetType("System.String"));
                        //DataRow BoxRow = BoxNum.NewRow();
                        //for (int i = sRowNum; i < eRowNum; i++)
                        //{
                        //    string BoxNumId = CStr(Sheet.Cells[i, 1].Value);
                        //    string BoxName = CStr(Sheet.Cells[i, 5].Value);
                        //    if (BoxName == "" || BoxName == null)
                        //    {
                        //        continue;
                        //    }
                        //    else
                        //    {
                        //        BoxRow["BoxNumId"] = System.Guid.NewGuid().ToString().Substring(0, 12).ToUpper();
                        //        BoxRow["BoxNum"] = BoxNumId;
                        //        BoxRow["OrderDetailId"] = ParentId;
                        //    }
                        //    BoxNum.Rows.Add(BoxRow.ItemArray);
                        //}
                        ////调用存储过程，判断数据库表是否存在记录
                        //SqlCommand com = new SqlCommand();
                        //con.Open();
                        //com.CommandText = "Pro_SelectCaseNumber";
                        //com.Connection = con;
                        //com.CommandType = CommandType.StoredProcedure;
                        //SqlParameter paremeter = new SqlParameter("@Pro_SelectCaseNumber", SqlDbType.Structured)
                        //{
                        //    Value = BoxNum
                        //};
                        //com.ExecuteNonQuery();
                        //com.Parameters.Add(paremeter);
                        //com.Parameters.Add(new SqlParameter("@return", SqlDbType.Int));
                        //com.Parameters["@return"].Direction = ParameterDirection.ReturnValue;
                        //com.ExecuteNonQuery();
                        ////数据库存储过程返回0表示存在记录
                        //if (Convert.ToInt32(com.Parameters["@return"].Value) == 0)
                        //{
                        //领料单数据读取
                        for (int i = sRowNum; i <= eRowNum; i++)
                        {
                            DataRow newARow = Non_toxicSeriesOfMaterialsTable.NewRow();
                            PlateName = CStr(Sheet.Cells[i, 9].Value);
                            OrderDetailId = CStr(Sheet.Cells[i, 1].Value);
                            if (PlateName == "" || PlateName == null || OrderDetailId == "" || OrderDetailId == null)
                            {
                                continue;
                            }
                            if (System.Text.RegularExpressions.Regex.IsMatch(PlateName, @"^[-+]?[0-9]*\.?[0-9]+$"))
                            {
                                if (Convert.ToSingle(PlateName) > 0)
                                {
                                    newARow["PlateType"] = Sheet.Cells[1, 1].Value.ToString().Substring(0, 2);
                                    newARow["HandType"] = Sheet.Cells[3, 2].Value;
                                    newARow["CenterMaterials"] = Sheet.Cells[4, 2].Value;
                                    newARow["FaceConduct"] = Sheet.Cells[3, 4].Value;
                                    for (int j = sAColNum; j <= eAColNum; j++)
                                    {
                                        con.Close();
                                        newARow["ProductOrderId"] = ParentId;
                                        ExcelRange Rang = Sheet.Cells[i, j];
                                        object objectCellValue = Sheet.GetValue(i, j);//单元格数据
                                        string CellValue = objectCellValue != null ? objectCellValue.ToString().Trim() : "";
                                        if (Rang.Merge)
                                        {
                                            CellValue = GetMergeValue(Sheet, i, j);
                                        }
                                        switch (j)
                                        {
                                            case 1:
                                                newARow["OrderDetailId"] = CellValue;
                                                break;
                                            case 2:
                                                if (CellValue == "" || CellValue == null)
                                                {
                                                    CellValue = "0";
                                                    Convert.ToSingle(CellValue);
                                                    newARow["FWide"] = CellValue;
                                                }
                                                else
                                                {
                                                    if (System.Text.RegularExpressions.Regex.IsMatch(CellValue, @"^[-+]?[0-9]*\.?[0-9]+$"))
                                                    {

                                                        newARow["FWide"] = CellValue;
                                                    }
                                                    else
                                                    {
                                                        MessageBox.Show("请检查工作表" + Sheet.Name + "第" + i + "行第" + j + "列数据是否正确");
                                                        //TheWorksheetExists = false;
                                                    }
                                                }
                                                //newARow["FWide"] = CellValue;
                                                break;
                                            case 3:
                                                if (CellValue == "" || CellValue == null)
                                                {
                                                    CellValue = "0";
                                                    Convert.ToSingle(CellValue);
                                                    newARow["FHigh"] = CellValue;
                                                }
                                                else
                                                {
                                                    if (System.Text.RegularExpressions.Regex.IsMatch(CellValue, @"^[-+]?[0-9]*\.?[0-9]+$"))
                                                    {

                                                        newARow["FHigh"] = CellValue;
                                                    }
                                                    else
                                                    {
                                                        MessageBox.Show("请检查工作表" + Sheet.Name + "第" + i + "行第" + j + "列数据是否正确");
                                                        //TheWorksheetExists = false;
                                                    }
                                                }
                                                //newARow["FLong"] = CellValue;
                                                break;
                                            case 4:
                                                if (CellValue == "" || CellValue == null)
                                                {
                                                    CellValue = "0";
                                                    Convert.ToSingle(CellValue);
                                                    newARow["Qty"] = CellValue;
                                                }
                                                else
                                                {
                                                    if (System.Text.RegularExpressions.Regex.IsMatch(CellValue, @"^[-+]?[0-9]*\.?[0-9]+$"))
                                                    {

                                                        newARow["Qty"] = CellValue;
                                                    }
                                                    else
                                                    {
                                                        MessageBox.Show("请检查工作表" + Sheet.Name + "第" + i + "行第" + j + "列数据是否正确");
                                                        //TheWorksheetExists = false;
                                                    }
                                                    //newARow["Qty"] = CellValue;
                                                }
                                                break;
                                            case 5:
                                                newARow["PlateName"] = CellValue;
                                                break;
                                            case 6:
                                                if (CellValue == "" || CellValue == null)
                                                {
                                                    CellValue = "0";
                                                    Convert.ToSingle(CellValue);
                                                    newARow["CutThick"] = CellValue;
                                                }
                                                else
                                                {
                                                    if (System.Text.RegularExpressions.Regex.IsMatch(CellValue, @"^[-+]?[0-9]*\.?[0-9]+$"))
                                                    {

                                                        newARow["CutThick"] = CellValue;
                                                    }
                                                    else
                                                    {
                                                        MessageBox.Show("请检查工作表" + Sheet.Name + "第" + i + "行第" + j + "列数据是否正确");
                                                        //TheWorksheetExists = false;
                                                    }
                                                    //newARow["CutThick"] = CellValue;
                                                }
                                                //newARow["CutThick"] = CellValue;
                                                break;
                                            case 7:
                                                if (CellValue == "" || CellValue == null)
                                                {
                                                    CellValue = "0";
                                                    Convert.ToSingle(CellValue);
                                                    newARow["CutWide"] = CellValue;
                                                }
                                                else
                                                {
                                                    if (System.Text.RegularExpressions.Regex.IsMatch(CellValue, @"^[-+]?[0-9]*\.?[0-9]+$"))
                                                    {

                                                        newARow["CutWide"] = CellValue;
                                                    }
                                                    else
                                                    {
                                                        MessageBox.Show("请检查工作表" + Sheet.Name + "第" + i + "行第" + j + "列数据是否正确");
                                                        //TheWorksheetExists = false;
                                                    }
                                                    //newARow["CutQty"] = CellValue;
                                                }
                                                //newARow["CutWide"] = CellValue;
                                                break;
                                            case 8:
                                                if (CellValue == "" || CellValue == null)
                                                {
                                                    CellValue = "0";
                                                    Convert.ToSingle(CellValue);
                                                    newARow["CutHigh"] = CellValue;
                                                }
                                                else
                                                {
                                                    if (System.Text.RegularExpressions.Regex.IsMatch(CellValue, @"^[-+]?[0-9]*\.?[0-9]+$"))
                                                    {

                                                        newARow["CutHigh"] = CellValue;
                                                    }
                                                    else
                                                    {
                                                        MessageBox.Show("请检查工作表" + Sheet.Name + "第" + i + "行第" + j + "列数据是否正确");
                                                        //TheWorksheetExists = false;
                                                    }
                                                    //newARow["CutLong"] = CellValue;
                                                }
                                                //newARow["CutLong"] = CellValue;
                                                break;
                                            case 9:
                                                if (CellValue == "" || CellValue == null)
                                                {
                                                    CellValue = "0";
                                                    Convert.ToSingle(CellValue);
                                                    newARow["CutQty"] = CellValue;
                                                }
                                                else
                                                {
                                                    if (System.Text.RegularExpressions.Regex.IsMatch(CellValue, @"^[-+]?[0-9]*\.?[0-9]+$"))
                                                    {

                                                        newARow["CutQty"] = CellValue;
                                                    }
                                                    else
                                                    {
                                                        MessageBox.Show("请检查工作表" + Sheet.Name + "第" + i + "行第" + j + "列数据是否正确");
                                                        //TheWorksheetExists = false;
                                                    }
                                                    //newARow["CutQty"] = CellValue;
                                                }
                                                break;
                                            case 10: newARow["MaterialDescription"] = CellValue; break;
                                            case 11: newARow["MaterialNote"] = CellValue; break;
                                            case 12: newARow["DisplayMaterialSummary"] = CellValue; break;
                                            case 13: newARow["AreaOfContour"] = CellValue; break;
                                        }
                                    }
                                    //if (IsOrderDetailQueryDoMethod == false)
                                    //{
                                    //    break;
                                    //}
                                    Non_toxicSeriesOfMaterialsTable.Rows.Add(newARow);
                                }
                                //}
                            }
                            Non_toxicSeriesOfMaterialsTable.TableName = "IssueMaterialBills";
                            DS.Tables.Add(Non_toxicSeriesOfMaterialsTable);
                            //}
                            //else
                            //{
                            //    con.Close();
                            //}
                        }
                    }
                    //else
                    //{
                    //    MessageBox.Show("无毒系列作业单工作表不存在");
                    //    //TheWorksheetExists = false;
                    //}
                    #endregion
                    //无毒系列领料单
                    #region
                    //if (IsOrderDetailQueryDoMethod == true)
                    //{
                    //    if (TheWorksheetExists)
                    //    {
                    ExcelWorksheet Sheet1 = null;//数据所在Sheet
                    Sheet1 = pck.Workbook.Worksheets["无毒系列领料单"];
                    if (Sheet1.Hidden.ToString() == "Visible")
                    {
                        //if (Sheet1.Name == "无毒系列领料单")
                        //{
                        int maxColumnNum1 = Sheet1.Dimension.End.Column;//最大列
                        int maxRowNum1 = Sheet1.Dimension.End.Row;//最大行
                        int Sheet1RowNum = 5;//开始行
                        int Sheet1EndRowNum = 0;//结束行
                        int Sheet1StartAColNum = 1;//区域A的开始栏位
                        int Sheet1EndAColNum = 6;//区域A的结束栏位
                        string ExcelValue2 = "";
                        for (int d = 26; d < maxRowNum1; d++)
                        {
                            if (CStr(Sheet1.Cells[d, 1].Value) == "拆解员：")
                            {
                                Sheet1EndRowNum = d - 1;
                                break;
                            }
                        }
                        //创建datatable 存放物料描述信息
                        DataTable GetproductNameTable = new DataTable();
                        GetproductNameTable.Columns.Add(string.Format("ProductDescription"), Type.GetType("System.String"));
                        GetproductNameTable.Columns.Add(string.Format("ProductName"), Type.GetType("System.String"));
                        DataRow GetproductNameRow = GetproductNameTable.NewRow();
                        for (int i = Sheet1RowNum; i < Sheet1EndRowNum; i++)
                        {
                            string ProductDescription = CStr(Sheet1.Cells[i, 3].Value);

                            if (ProductDescription == "" || ProductDescription == null)
                            {
                                continue;
                            }
                            else
                            {
                                GetproductNameRow["ProductDescription"] = ProductDescription;
                            }
                            GetproductNameTable.Rows.Add(GetproductNameRow.ItemArray);
                        }
                        //调用存储过程根据物料描述获取物料号存放进另一个datatable
                        con.Open();
                        SqlCommand com = new SqlCommand();
                        com.CommandText = "Pro_GetproductName";
                        com.Connection = con;
                        com.CommandType = CommandType.StoredProcedure;
                        SqlParameter para = new SqlParameter("@Pro_GetproductName", SqlDbType.Structured)
                        {
                            Value = GetproductNameTable
                        };
                        com.Parameters.Add(para);
                        com.ExecuteNonQuery();
                        com.Parameters.Add(new SqlParameter("@return", SqlDbType.Int));
                        com.Parameters["@return"].Direction = ParameterDirection.ReturnValue;
                        DataTable dt = new DataTable();
                        SqlDataReader reader = com.ExecuteReader();
                        dt.Load(reader);
                        //存储过程返回0为true
                        if (Convert.ToInt32(com.Parameters["@return"].Value) == 0)
                        {
                            con.Close();
                            //领料单数据读取
                            for (int i = Sheet1RowNum; i <= Sheet1EndRowNum; i++)
                            {
                                DataRow newARow = GetMaterialBillsTable.NewRow();
                                string ProductDescription = CStr(Sheet1.Cells[i, 3].Value);
                                ExcelValue2 = CStr(Sheet1.Cells[i, 4].Value);

                                //string ExcelValue1 = Sheet.GetValue(i, 3).ToString();
                                if ((ExcelValue2 == "") || (ExcelValue2 == null))
                                {
                                    continue;
                                }
                                if (System.Text.RegularExpressions.Regex.IsMatch(ExcelValue2, @"^[-+]?[0-9]*\.?[0-9]+$"))
                                {
                                    if (Convert.ToSingle(ExcelValue2) > 0)
                                    {
                                        for (int j = Sheet1StartAColNum; j <= Sheet1EndAColNum; j++)
                                        {
                                            newARow["ProductOrderId"] = ParentId;

                                            ExcelRange Rang = Sheet1.Cells[i, j];
                                            object objectCellValue = Sheet1.GetValue(i, j);//单元格数据
                                            string CellValue = objectCellValue != null ? objectCellValue.ToString().Trim() : "";
                                            if (Rang.Merge)
                                            {
                                                CellValue = GetMergeValue(Sheet1, i, j);

                                            }
                                            switch (j)
                                            {
                                                case 1: newARow["ProjectName"] = CellValue; break;
                                                case 2:
                                                    newARow["NumericalOrder"] = CellValue;
                                                    break;
                                                case 3:
                                                    for (int q = 0; q < dt.Rows.Count; q++)
                                                    {
                                                        string SQLProductDescription = dt.Rows[q]["ProductDescription"].ToString();
                                                        if (SQLProductDescription == ProductDescription)
                                                        {
                                                            newARow["ProductName"] = dt.Rows[q]["ProductName"];
                                                            newARow["ProductDes"] = SQLProductDescription;
                                                        }
                                                    }
                                                    break;
                                                case 4:
                                                    if (CellValue == "" || CellValue == null)
                                                    {
                                                        CellValue = "0";
                                                        Convert.ToSingle(CellValue);
                                                        newARow["Qty"] = CellValue;
                                                    }
                                                    else
                                                    {
                                                        if (System.Text.RegularExpressions.Regex.IsMatch(CellValue, @"^[-+]?[0-9]*\.?[0-9]+$"))
                                                        {
                                                            decimal Qty = Math.Round(decimal.Parse(CellValue), 3, MidpointRounding.AwayFromZero);

                                                            newARow["Qty"] = Qty;
                                                        }
                                                        else
                                                        {
                                                            MessageBox.Show("请检查工作表" + Sheet1.Name + "第" + i + "行第" + j + "列数据是否正确");
                                                            //TheWorksheetExists = false;
                                                        }
                                                        //newARow["Qty"] = CellValue;
                                                    }
                                                    break;
                                                case 5: newARow["Unit"] = CellValue; break;
                                                case 6: newARow["PackingConfirmed"] = CellValue; break;
                                            }
                                        }
                                        GetMaterialBillsTable.Rows.Add(newARow);
                                    }
                                }
                            }
                            GetMaterialBillsTable.TableName = "GetMaterialBills";
                            DS.Tables.Add(GetMaterialBillsTable);
                        }
                        else
                        {
                            con.Close();
                        }
                        //}
                    }
                    //    }
                    //}
                    #endregion
                }
                DataToSQL Data = new DataToSQL();
                Data.DataToSQLobj(DS);
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
        }
        /// <summary>
        /// 判断合并单元格获取值
        /// </summary>
        /// <param name="worksheet"></param>
        /// <param name="row">单元格行</param>
        /// <param name="column">单元格列</param>
        /// <returns></returns>
        public static string GetMergeValue(ExcelWorksheet worksheet, int row, int column)
        {
            string MergeValue = "";
            ExcelWorksheet.MergeCellsCollection<string> MergeCells = worksheet.MergedCells;
            for (int i = 0; i < MergeCells.Count; i++)
            {
                string range = MergeCells[i];
                ExcelAddress add = new ExcelAddress(range);
                int srow = add.Start.Row;//合并单元格开始行
                int scol = add.Start.Column;//合并单元格开始行
                int erow = add.End.Row;//合并单元格结束行
                int ecol = add.End.Column;//合并单元格结束行
                object value = worksheet.Cells[(new ExcelAddress(range)).Start.Row, (new ExcelAddress(range)).Start.Column].Value;
                if (row >= srow && row <= erow && column >= scol && column <= ecol)
                {
                    MergeValue = value.ToString();
                    break;
                }
            }
            return MergeValue;
        }

    }


    /// <summary>
    /// 速美免漆门板，免漆料单导入数据库2018.6.29
    /// </summary>
    /// <param name="orderDaetail"></param>
    /// <param name="IssueMaterialBills"></param>
    public class QuickBeautyFreePaintDoorSheetExcelData : QuickBeautyFreePaintDoorSheetData
    {
        protected string CStr(object o) { return o != null ? o.ToString() : ""; }
        public override void ReadQuickBeautyFreePaintDoorSheetData(string Path, string ParentId)
        {
            try
            {
                FileStream Fs = new FileStream(Path, FileMode.Open, FileAccess.Read);
                //在插件调试环境下运行时，用ADO.NET直连 
                string ConnectionString = "Data Source=192.168.124.72;Initial Catalog=OrBitXI;User ID=sa;Password='admin@2017'";
                SqlConnection con = new SqlConnection(ConnectionString);
                DataSet DS = new DataSet();
                //免漆门板单
                #region
                using (ExcelPackage pck = new ExcelPackage(Fs))
                {
                    ExcelWorksheet Sheet = null;//数据所在Sheet
                    Sheet = pck.Workbook.Worksheets["免漆门板单"];
                    if (Sheet.Hidden.ToString() == "Visible")
                    {
                        //if (Sheet.Name == "免漆门板单")
                        //{
                        int maxColumnNum = Sheet.Dimension.End.Column;//最大列
                        int minColumnNum = Sheet.Dimension.Start.Column;//最小列
                        int minRowNum = Sheet.Dimension.Start.Row;//最小行
                        int maxRowNum = Sheet.Dimension.End.Row;//最大行
                        int sRowNum = 7;//开始行
                        int eRowNum = 0;//结束行
                        int sAColNum = 1;//区域A的开始栏位
                        int eAColNum = 13;//区域A的结束栏位
                        string PlateName = "";
                        //获取结束行
                        for (int d = 1; d < maxRowNum; d++)
                        {
                            if ((CStr(Sheet.Cells[d, 1].Value)).Trim() == "制单人：")
                            {
                                eRowNum = d - 2;
                                break;
                            }
                        }
                        string CellValue = "";
                        ExcelRange Rang;
                        ////创建datatable保存箱体序号
                        //DataTable table = new DataTable();
                        //DataColumn colum = table.Columns.Add("TemporaryTableId", Type.GetType("System.String"));
                        //colum = table.Columns.Add("OrderDetailId", Type.GetType("System.String"));
                        //colum = table.Columns.Add("ProductOrderId", Type.GetType("System.String"));
                        //colum = table.Columns.Add("Identification", Type.GetType("System.String"));
                        //DataRow rows = table.NewRow();
                        //for (int i = 8; i < eRowNum; i++)
                        //{
                        //    string TemporaryTableId = Guid.NewGuid().ToString().Substring(0, 12);
                        //    rows["TemporaryTableId"] = TemporaryTableId.ToUpper();
                        //    string OrderDetail = CStr(Sheet.Cells[i, 5].Value);
                        //    if (OrderDetail == "" || OrderDetail == null)
                        //    {
                        //        continue;
                        //    }
                        //    rows["PlateType"] = Sheet.Cells[1, 1].Value.ToString().Substring(0, 2);
                        //    rows["HnadType"] = Sheet.Cells[3, 2].Value;
                        //    rows["MaterialDescription"] = Sheet.Cells[4, 2].Value;
                        //    rows["FaceConduct"] = Sheet.Cells[3, 4].Value;
                        //    for (int j = 1; j < 2; j++)
                        //    {
                        //        string CaseNumber = CStr(Sheet.Cells[i, j].Value).Trim();
                        //        rows["OrderDetailId"] = CaseNumber;
                        //        rows["ProductOrderId"] = ParentId;
                        //    }
                        //    table.Rows.Add(rows.ItemArray);
                        //}
                        ////调用存储过程根据箱体序号和订单号判断是否存在
                        //SqlCommand cmd = new SqlCommand();
                        //con.Open();
                        //cmd.CommandText = "Pro_SelectCaseNumber";
                        //cmd.Connection = con;
                        //cmd.CommandType = CommandType.StoredProcedure;
                        //SqlParameter param =
                        //new SqlParameter("@Pro_SelectCaseNumber", SqlDbType.Structured)
                        //{
                        //    Value = table
                        //};

                        //cmd.Parameters.Add(param);
                        //cmd.Parameters.Add(new SqlParameter("@return", SqlDbType.Int));
                        //cmd.Parameters["@return"].Direction = ParameterDirection.ReturnValue;
                        //cmd.ExecuteNonQuery();
                        ////存储过程返回0位true
                        //if (Convert.ToInt32(cmd.Parameters["@return"].Value) == 0)
                        //{
                        con.Close();
                        //领料单数据读取
                        for (int i = sRowNum; i <= eRowNum; i++)
                        {
                            //if (IsDataHave)
                            //{
                            PlateName = CStr(Sheet.Cells[i, 5].Value);
                            string ExcelTitleValue = CStr(Sheet.Cells[i, 1].Value);
                            if (PlateName == "" || PlateName == null)
                            {
                                continue;
                            }
                            DataRow newARow = NoPaintDoorSheetTable.NewRow();
                            newARow["IssueMaterialBillsId"] = System.Guid.NewGuid().ToString().Substring(0, 12).ToUpper();
                            newARow["HandType"] = CStr(Sheet.Cells[3, 2].Value);
                            newARow["PlateType"] = CStr(Sheet.Cells[1, 1].Value).Substring(0, 2);
                            for (int j = sAColNum; j <= eAColNum; j++)
                            {
                                Rang = Sheet.Cells[i, j];
                                object objectCellValue = Sheet.GetValue(i, j);//单元格数据
                                CellValue = objectCellValue != null ? objectCellValue.ToString().Trim() : "";
                                newARow["ProductOrderId"] = ParentId;
                                if (Rang.Merge)
                                {
                                    CellValue = GetMergeValue(Sheet, i, j);
                                }
                                switch (j)
                                {
                                    case 1:
                                        newARow["OrderDetailId"] = CellValue;
                                        break;
                                    case 2:
                                        if (CellValue == "" || CellValue == null)
                                        {
                                            CellValue = "0";
                                            Convert.ToSingle(CellValue);
                                            newARow["FWide"] = CellValue;
                                        }
                                        else
                                        {
                                            if (System.Text.RegularExpressions.Regex.IsMatch(CellValue, @"^[-+]?[0-9]*\.?[0-9]+$"))
                                            {

                                                newARow["FWide"] = CellValue;
                                            }
                                            else
                                            {
                                                MessageBox.Show("请检查工作表" + Sheet.Name + "第" + i + "行第" + j + "列数据是否正确");
                                                //TheWorksheetExists = false;
                                            }
                                        }
                                        //newARow["FWide"] = CellValue;
                                        break;
                                    case 3:
                                        if (CellValue == "" || CellValue == null)
                                        {
                                            CellValue = "0";
                                            Convert.ToSingle(CellValue);
                                            newARow["FHigh"] = CellValue;
                                        }
                                        else
                                        {
                                            if (System.Text.RegularExpressions.Regex.IsMatch(CellValue, @"^[-+]?[0-9]*\.?[0-9]+$"))
                                            {

                                                newARow["FHigh"] = CellValue;
                                            }
                                            else
                                            {
                                                MessageBox.Show("请检查工作表" + Sheet.Name + "第" + i + "行第" + j + "列数据是否正确");
                                                // TheWorksheetExists = false;
                                            }
                                        }
                                        //newARow["FLong"] = CellValue;
                                        break;
                                    case 4:
                                        if (CellValue == "" || CellValue == null)
                                        {
                                            CellValue = "0";
                                            Convert.ToSingle(CellValue);
                                            newARow["Qty"] = CellValue;
                                        }
                                        else
                                        {
                                            if (System.Text.RegularExpressions.Regex.IsMatch(CellValue, @"^[-+]?[0-9]*\.?[0-9]+$"))
                                            {

                                                newARow["Qty"] = CellValue;
                                            }
                                            else
                                            {
                                                MessageBox.Show("请检查工作表" + Sheet.Name + "第" + i + "行第" + j + "列数据是否正确");
                                                //TheWorksheetExists = false;
                                            }
                                            //newARow["Qty"] = CellValue;
                                        }
                                        break;
                                    case 5:
                                        newARow["PlateName"] = CellValue;
                                        break;
                                    case 6:
                                        if (CellValue == "" || CellValue == null)
                                        {
                                            CellValue = "0";
                                            Convert.ToSingle(CellValue);
                                            newARow["CutThick"] = CellValue;
                                        }
                                        else
                                        {
                                            if (System.Text.RegularExpressions.Regex.IsMatch(CellValue, @"^[-+]?[0-9]*\.?[0-9]+$"))
                                            {

                                                newARow["CutThick"] = CellValue;
                                            }
                                            else
                                            {
                                                MessageBox.Show("请检查工作表" + Sheet.Name + "第" + i + "行第" + j + "列数据是否正确");
                                                //TheWorksheetExists = false;
                                            }
                                            //newARow["CutThick"] = CellValue;
                                        }
                                        //newARow["CutThick"] = CellValue;
                                        break;
                                    case 7:
                                        if (CellValue == "" || CellValue == null)
                                        {
                                            CellValue = "0";
                                            Convert.ToSingle(CellValue);
                                            newARow["CutWide"] = CellValue;
                                        }
                                        else
                                        {
                                            if (System.Text.RegularExpressions.Regex.IsMatch(CellValue, @"^[-+]?[0-9]*\.?[0-9]+$"))
                                            {

                                                newARow["CutWide"] = CellValue;
                                            }
                                            else
                                            {
                                                MessageBox.Show("请检查工作表" + Sheet.Name + "第" + i + "行第" + j + "列数据是否正确");
                                                //TheWorksheetExists = false;
                                            }
                                            //newARow["CutQty"] = CellValue;
                                        }
                                        //newARow["CutWide"] = CellValue;
                                        break;
                                    case 8:
                                        if (CellValue == "" || CellValue == null)
                                        {
                                            CellValue = "0";
                                            Convert.ToSingle(CellValue);
                                            newARow["CutHigh"] = CellValue;
                                        }
                                        else
                                        {
                                            if (System.Text.RegularExpressions.Regex.IsMatch(CellValue, @"^[-+]?[0-9]*\.?[0-9]+$"))
                                            {

                                                newARow["CutHigh"] = CellValue;
                                            }
                                            else
                                            {
                                                MessageBox.Show("请检查工作表" + Sheet.Name + "第" + i + "行第" + j + "列数据是否正确");
                                                //TheWorksheetExists = false;
                                            }
                                            //newARow["CutLong"] = CellValue;
                                        }
                                        //newARow["CutLong"] = CellValue;
                                        break;
                                    case 9:
                                        if (CellValue == "" || CellValue == null)
                                        {
                                            CellValue = "0";
                                            Convert.ToSingle(CellValue);
                                            newARow["CutQty"] = CellValue;
                                        }
                                        else
                                        {
                                            if (System.Text.RegularExpressions.Regex.IsMatch(CellValue, @"^[-+]?[0-9]*\.?[0-9]+$"))
                                            {

                                                newARow["CutQty"] = CellValue;
                                            }
                                            else
                                            {
                                                MessageBox.Show("请检查工作表" + Sheet.Name + "第" + i + "行第" + j + "列数据是否正确");
                                                //TheWorksheetExists = false;
                                            }
                                            //newARow["CutQty"] = CellValue;
                                        }
                                        break;
                                    case 10: newARow["MaterialDescription"] = CellValue; break;
                                    case 11: newARow["MaterialNote"] = CellValue; break;
                                    //case 12: newARow["MaterialNote"] = CellValue; break;
                                    //case 13: newARow["AreaOfContour"] = CellValue; break;
                                }
                            }
                            //if (IsDataHave == false)
                            //{
                            //    break;
                            //}
                            NoPaintDoorSheetTable.Rows.Add(newARow);
                            //}
                            //else
                            //{
                            //    MessageBox.Show("请先检查数据是否正确！！！");
                            //    break;
                            //}
                        }
                        NoPaintDoorSheetTable.TableName = "IssueMaterialBills";
                        DS.Tables.Add(NoPaintDoorSheetTable);
                        //}
                        //else
                        //{
                        //    MessageBox.Show("请先检查箱体序号是否正确！！！");
                        //    IsDataHave = false;
                        //}

                        //}
                    }
                    //else
                    //{
                    //    MessageBox.Show("工作表不存在");
                    //    TheWorksheetExists = false;
                    //}

                }
                #endregion
                //免漆料单
                #region
                try
                {
                    using (ExcelPackage pck = new ExcelPackage(Fs))
                    {
                        ExcelWorksheet Sheet = null;//数据所在Sheet
                        Sheet = pck.Workbook.Worksheets["免漆料单"];
                        if (Sheet.Hidden.ToString() == "Visible")
                        {
                            int maxColumnNum = Sheet.Dimension.End.Column;//最大列
                            int minColumnNum = Sheet.Dimension.Start.Column;//最小列
                            int minRowNum = Sheet.Dimension.Start.Row;//最小行
                            int maxRowNum = Sheet.Dimension.End.Row;//最大行
                            int sRowNum = 5;//开始行
                            int eRowNum = 0;//结束行
                            int sAColNum = 1;//区域A的开始栏位
                            int eAColNum = 6;//区域A的结束栏位

                            string ExcelValue2 = "";
                            //获取结束行
                            for (int d = 1; d < maxRowNum; d++)
                            {
                                if (CStr(Sheet.Cells[d, 1].Value) == "配料")
                                {
                                    eRowNum = d - 1;
                                    break;
                                }
                            }
                            //创建datatable保存物料信息
                            DataTable GetProductNameTable = new DataTable();
                            DataColumn colum = GetProductNameTable.Columns.Add("ProductDescription", Type.GetType("System.String"));
                            colum = GetProductNameTable.Columns.Add("ProductName", Type.GetType("System.String"));
                            DataRow rows = GetProductNameTable.NewRow();
                            for (int i = sRowNum; i < eRowNum; i++)
                            {
                                //string GetProductNameTableId = Guid.NewGuid().ToString().Substring(0, 12);
                                //rows["GetProductNameId"] = GetProductNameTableId.ToUpper();
                                string Materials = CStr(Sheet.Cells[i, 3].Value);
                                if (Materials == "" || Materials == null || Materials == "材料名称")
                                {
                                    continue;
                                }
                                else
                                {
                                    string ProductDescription = Materials;
                                    rows["ProductDescription"] = ProductDescription;
                                }
                                GetProductNameTable.Rows.Add(rows.ItemArray);
                            }
                            //调用存储过程查询物料号
                            SqlCommand cmd = new SqlCommand();
                            con.Open();
                            cmd.CommandText = "Pro_GetproductName";
                            cmd.Connection = con;
                            cmd.CommandType = CommandType.StoredProcedure;
                            SqlParameter param =
                            new SqlParameter("@Pro_GetproductName", SqlDbType.Structured)
                            {
                                Value = GetProductNameTable
                            };
                            cmd.Parameters.Add(param);
                            cmd.ExecuteNonQuery();
                            cmd.Parameters.Add(new SqlParameter("@return", SqlDbType.Int));
                            cmd.Parameters["@return"].Direction = ParameterDirection.ReturnValue;
                            SqlDataReader reader = cmd.ExecuteReader();
                            DataTable dt = new DataTable();
                            dt.Load(reader);
                            if (Convert.ToInt32(cmd.Parameters["@return"].Value) == 0)
                            {
                                con.Close();
                                //免漆料单数据读取
                                for (int i = sRowNum; i <= eRowNum; i++)
                                {
                                    //decimal Qty = 0;
                                    //int Qty1 = 0;

                                    ExcelValue2 = CStr(Sheet.Cells[i, 4].Value);
                                    //string ExcelValue1 = Sheet.GetValue(i, 3).ToString();
                                    if ((ExcelValue2 == "") || (ExcelValue2 == null) || ExcelValue2 == "数量")
                                    {
                                        continue;
                                    }
                                    if (System.Text.RegularExpressions.Regex.IsMatch(ExcelValue2, @"^[-+]?[0-9]*\.?[0-9]+$"))
                                    {
                                        if (Convert.ToSingle(ExcelValue2) > 0)
                                        {
                                            DataRow newARow = GetMaterialBillsTable.NewRow();
                                            string ProductDescription = CStr(Sheet.Cells[i, 3].Value);
                                            newARow["ProductOrderId"] = ParentId;
                                            newARow["GetMaterialBillsId"] = System.Guid.NewGuid().ToString().Substring(0, 12).ToUpper();
                                            int CateGoryIndex = CStr(Sheet.Cells[1, 1].Value).IndexOf("(");
                                            newARow["CateGory"] = CStr(Sheet.Cells[1, 1].Value).Substring(CateGoryIndex + 1, 2);
                                            for (int j = sAColNum; j <= eAColNum; j++)
                                            {

                                                //string ExcelQty = CStr(Sheet.Cells[i, 4].Value);
                                                //Qty = Convert.ToDecimal(ExcelQty);
                                                //Qty1 = Convert.ToInt32(Qty*100);

                                                ExcelRange Rang = Sheet.Cells[i, j];
                                                object objectCellValue = Sheet.GetValue(i, j);//单元格数据
                                                string CellValue = objectCellValue != null ? objectCellValue.ToString().Trim() : "";
                                                if (Rang.Merge)
                                                {
                                                    CellValue = GetMergeValue(Sheet, i, j);

                                                }
                                                switch (j)
                                                {
                                                    case 1: newARow["MaterialType"] = CellValue; break;
                                                    //case 2: newARow["NumericalOrder"] = CellValue; break;
                                                    case 3:
                                                        for (int t = 0; t < dt.Rows.Count; t++)
                                                        {
                                                            string ProductDes = dt.Rows[t]["ProductDescription"].ToString();
                                                            if (ProductDes == ProductDescription)
                                                            {
                                                                newARow["ProductName"] = dt.Rows[t]["ProductName"].ToString();
                                                                newARow["ProductDes"] = ProductDes;
                                                            }
                                                        }

                                                        break;
                                                    case 4:
                                                        if (CellValue == "" || CellValue == null)
                                                        {
                                                            CellValue = "0";
                                                            Convert.ToSingle(CellValue);
                                                            newARow["Qty"] = CellValue;
                                                        }
                                                        else
                                                        {
                                                            if (System.Text.RegularExpressions.Regex.IsMatch(CellValue, @"^[-+]?[0-9]*\.?[0-9]+$"))
                                                            {
                                                                decimal Qty = Math.Round(decimal.Parse(CellValue), 3, MidpointRounding.AwayFromZero);
                                                                //MessageBox.Show(Qty.ToString());
                                                                newARow["Qty"] = Qty;
                                                            }
                                                            else
                                                            {
                                                                MessageBox.Show("请检查工作表" + Sheet.Name + "第" + i + "行第" + j + "列数据是否正确");
                                                                //TheWorksheetExists = false;
                                                            }
                                                            //newARow["Qty"] = CellValue;
                                                        }
                                                        break;
                                                    case 5: newARow["Unit"] = CellValue; break;
                                                    case 6: newARow["PackingConfirmed"] = CellValue; break;
                                                }
                                            }
                                            GetMaterialBillsTable.Rows.Add(newARow);
                                        }
                                    }
                                }
                                GetMaterialBillsTable.TableName = "GetMaterialBills";
                                DS.Tables.Add(GetMaterialBillsTable);
                            }
                            else
                            {
                                con.Close();
                                MessageBox.Show("工作表数据错误，请先检查工作表" + Sheet);
                            }

                        }

                    }
                }
                catch (Exception ex)
                {
                    throw ex;
                }
                //        }
                //    }
                //}
                #endregion
                DataToSQL Data = new DataToSQL();
                Data.DataToSQLobj(DS);
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
        }
        /// <summary>
        /// 判断合并单元格获取值
        /// </summary>
        /// <param name="worksheet"></param>
        /// <param name="row">单元格行</param>
        /// <param name="column">单元格列</param>
        /// <returns></returns>
        public static string GetMergeValue(ExcelWorksheet worksheet, int row, int column)
        {
            string MergeValue = "";
            ExcelWorksheet.MergeCellsCollection<string> MergeCells = worksheet.MergedCells;
            for (int i = 0; i < MergeCells.Count; i++)
            {
                string range = MergeCells[i];
                ExcelAddress add = new ExcelAddress(range);
                int srow = add.Start.Row;//合并单元格开始行
                int scol = add.Start.Column;//合并单元格开始行
                int erow = add.End.Row;//合并单元格结束行
                int ecol = add.End.Column;//合并单元格结束行
                object value = worksheet.Cells[(new ExcelAddress(range)).Start.Row, (new ExcelAddress(range)).Start.Column].Value;
                if (row >= srow && row <= erow && column >= scol && column <= ecol)
                {
                    MergeValue = value.ToString();
                    break;
                }
            }
            return MergeValue;
        }

    }


    /// <summary>
    /// 免漆门板，免漆料单导入数据库2018.6.29
    /// </summary>
    /// <param name="orderDaetail"></param>
    /// <param name="IssueMaterialBills"></param>
    public class NoPaintDoorSheetExcelData : NoPaintDoorSheetData
    {
        protected string CStr(object o) { return o != null ? o.ToString() : ""; }
        public override void ReadNoPaintDoorSheetData(string Path, string ParentId)
        {
            try
            {
                DataSet DS = new DataSet();
                //bool TheWorksheetExists = true;
                //bool IsOrderDetailQueryDoMethod = true;
                FileStream Fs = new FileStream(Path, FileMode.Open, FileAccess.Read);

                //免漆门板单
                #region
                using (ExcelPackage pck = new ExcelPackage(Fs))
                {
                    ExcelWorksheet Sheet = null;//数据所在Sheet
                    Sheet = pck.Workbook.Worksheets["免漆门板单"];
                    if (Sheet.Hidden.ToString() == "Visible")
                    {
                        //if (Sheet.Name == "免漆门板单")
                        //{
                        int maxColumnNum = Sheet.Dimension.End.Column;//最大列
                        int minColumnNum = Sheet.Dimension.Start.Column;//最小列
                        int minRowNum = Sheet.Dimension.Start.Row;//最小行
                        int maxRowNum = Sheet.Dimension.End.Row;//最大行
                        int sRowNum = 7;//开始行
                        int eRowNum = 0;//结束行
                        int sAColNum = 1;//区域A的开始栏位
                        int eAColNum = 13;//区域A的结束栏位
                        string PlateName = "";

                        int[] list = new int[maxRowNum + 1];
                        //获取结束行
                        for (int d = 56; d < maxRowNum; d++)
                        {
                            string EndRow = (CStr(Sheet.Cells[d, 1].Value)).Trim();
                            if (EndRow.Replace("\n", "") == "注：所有下料纹理方向均为高度方向如有材质、颜色、尺寸不明请和工艺组联系并确认！  分机电话：2160")
                            {
                                eRowNum = d - 3;
                                //list[d] = d;
                                break;
                            }
                        }


                        //创建datatable保存箱体序号
                        SqlConnection con = new SqlConnection("Data Source=192.168.124.72;Initial Catalog=OrBitXI;User ID=sa;Password='admin@2017'");
                        DataTable BoxTable = new DataTable();
                        BoxTable.Columns.Add(string.Format("TemporaryTableId"), Type.GetType("System.String"));
                        BoxTable.Columns.Add(string.Format("BoxTableNum"), Type.GetType("System.String"));
                        BoxTable.Columns.Add(string.Format("ProductOrderId"), Type.GetType("System.String"));
                        DataRow BoxTableRow = BoxTable.NewRow();
                        for (int i = sRowNum; i < eRowNum; i++)
                        {
                            string BoxNum = CStr(Sheet.Cells[i, 1].Value);
                            if (BoxNum == "" || BoxNum == null || BoxNum.Trim() == "装饰板（无拉手装饰板）" || BoxNum.Trim() == "固定竖纹门板")
                            {
                                continue;
                            }
                            else
                            {
                                string TemporaryTableId = System.Guid.NewGuid().ToString().Substring(0, 12).ToUpper();
                                BoxTableRow["TemporaryTableId"] = TemporaryTableId;
                                BoxTableRow["BoxTableNum"] = BoxNum;
                                string ProductOrderId = ParentId;
                                BoxTableRow["ProductOrderId"] = ProductOrderId;
                            }
                            BoxTable.Rows.Add(BoxTableRow.ItemArray);
                        }
                        con.Open();
                        SqlCommand cmd = new SqlCommand();
                        cmd.CommandText = "Pro_SelectCaseNumber";
                        cmd.Connection = con;
                        cmd.CommandType = CommandType.StoredProcedure;
                        SqlParameter paremeters = new SqlParameter("@Pro_SelectCaseNumber", SqlDbType.VarChar, 50);
                        paremeters.Value = BoxTable;
                        cmd.Parameters.Add(new SqlParameter("@return", SqlDbType.Int));
                        cmd.Parameters["@return"].Direction = ParameterDirection.ReturnValue;
                        cmd.ExecuteNonQuery();
                        if (Convert.ToInt32(cmd.Parameters["@return"].Value) == 0)
                        {
                            con.Close();
                            //免漆门板单数据读取
                            for (int i = sRowNum; i <= eRowNum; i++)
                            {
                                //if (IsOrderDetailQueryDoMethod)
                                //{
                                DataRow newARow = NoPaintDoorSheetTable.NewRow();
                                PlateName = CStr(Sheet.Cells[i, 5].Value);
                                if (PlateName == "" || PlateName == null)
                                {
                                    continue;
                                }
                                newARow["IssueMaterialBillsId"] = System.Guid.NewGuid().ToString().Substring(0, 12).ToUpper();
                                newARow["PlateType"] = Sheet.Cells[1, 1].Value.ToString().Substring(0, 2);
                                newARow["HandType"] = Sheet.Cells[3, 2].Value;
                                newARow["MaterialDescription"] = Sheet.Cells[4, 2].Value;
                                newARow["FaceConduct"] = Sheet.Cells[3, 4].Value;
                                newARow["ProductOrderId"] = ParentId;
                                for (int j = sAColNum; j <= eAColNum; j++)
                                {
                                    ExcelRange Rang = Sheet.Cells[i, j];
                                    object objectCellValue = Sheet.GetValue(i, j);//单元格数据
                                    string CellValue = objectCellValue != null ? objectCellValue.ToString().Trim() : "";
                                    if (Rang.Merge)
                                    {
                                        CellValue = GetMergeValue(Sheet, i, j);
                                    }
                                    switch (j)
                                    {
                                        case 1:
                                            newARow["OrderDetailId"] = CellValue;
                                            break;
                                        case 2:
                                            if (CellValue == "" || CellValue == null)
                                            {
                                                CellValue = "0";
                                                Convert.ToSingle(CellValue);
                                                newARow["FWide"] = CellValue;
                                            }
                                            else
                                            {
                                                if (System.Text.RegularExpressions.Regex.IsMatch(CellValue, @"^[-+]?[0-9]*\.?[0-9]+$"))
                                                {
                                                    newARow["FWide"] = CellValue;
                                                }
                                                else
                                                {
                                                    MessageBox.Show("请检查工作表" + Sheet.Name + "第" + i + "行第" + j + "列数据是否正确");
                                                    //IsOrderDetailQueryDoMethod = false;
                                                }
                                                //newARow["FWide"] = CellValue;
                                            }
                                            break;
                                        case 3:
                                            if (CellValue == "" || CellValue == null)
                                            {
                                                CellValue = "0";
                                                Convert.ToSingle(CellValue);
                                                newARow["FHigh"] = CellValue;
                                            }
                                            else
                                            {
                                                if (System.Text.RegularExpressions.Regex.IsMatch(CellValue, @"^[-+]?[0-9]*\.?[0-9]+$"))
                                                {
                                                    newARow["FHigh"] = CellValue;
                                                }
                                                else
                                                {
                                                    MessageBox.Show("请检查工作表" + Sheet.Name + "第" + i + "行第" + j + "列数据是否正确");
                                                    //IsOrderDetailQueryDoMethod = false;
                                                }
                                                //newARow["FLong"] = CellValue;
                                            }
                                            break;
                                        case 4:
                                            if (CellValue == "" || CellValue == null)
                                            {
                                                CellValue = "0";
                                                Convert.ToSingle(CellValue);
                                                newARow["Qty"] = CellValue;
                                            }
                                            else
                                            {
                                                if (System.Text.RegularExpressions.Regex.IsMatch(CellValue, @"^[-+]?[0-9]*\.?[0-9]+$"))
                                                {
                                                    newARow["Qty"] = CellValue;
                                                }
                                                else
                                                {
                                                    MessageBox.Show("请检查工作表" + Sheet.Name + "第" + i + "行第" + j + "列数据是否正确");
                                                    //IsOrderDetailQueryDoMethod = false;
                                                }
                                                //newARow["Qty"] = CellValue;
                                            }
                                            break;
                                        case 5: newARow["PlateName"] = CellValue; break;
                                        case 6:
                                            if (CellValue == "" || CellValue == null)
                                            {
                                                CellValue = "0";
                                                Convert.ToSingle(CellValue);
                                                newARow["CutThick"] = CellValue;
                                            }
                                            else
                                            {
                                                if (System.Text.RegularExpressions.Regex.IsMatch(CellValue, @"^[-+]?[0-9]*\.?[0-9]+$"))
                                                {
                                                    newARow["CutThick"] = CellValue;
                                                }
                                                else
                                                {
                                                    MessageBox.Show("请检查工作表" + Sheet.Name + "第" + i + "行第" + j + "列数据是否正确");
                                                    //IsOrderDetailQueryDoMethod = false;
                                                }
                                                //newARow["CutThick"] = CellValue;
                                            }
                                            break;
                                        case 7:
                                            if (CellValue == "" || CellValue == null)
                                            {
                                                CellValue = "0";
                                                Convert.ToSingle(CellValue);
                                                newARow["CutWide"] = CellValue;
                                            }
                                            else
                                            {
                                                if (System.Text.RegularExpressions.Regex.IsMatch(CellValue, @"^[-+]?[0-9]*\.?[0-9]+$"))
                                                {
                                                    newARow["CutWide"] = CellValue;
                                                }
                                                else
                                                {
                                                    MessageBox.Show("请检查工作表" + Sheet.Name + "第" + i + "行第" + j + "列数据是否正确");
                                                    //IsOrderDetailQueryDoMethod = false;
                                                }
                                                //newARow["CutWide"] = CellValue;
                                            }
                                            break;
                                        case 8:
                                            if (CellValue == "" || CellValue == null)
                                            {
                                                CellValue = "0";
                                                Convert.ToSingle(CellValue);
                                                newARow["CutHigh"] = CellValue;
                                            }
                                            else
                                            {
                                                if (System.Text.RegularExpressions.Regex.IsMatch(CellValue, @"^[-+]?[0-9]*\.?[0-9]+$"))
                                                {
                                                    newARow["CutHigh"] = CellValue;
                                                }
                                                else
                                                {
                                                    MessageBox.Show("请检查工作表" + Sheet.Name + "第" + i + "行第" + j + "列数据是否正确");
                                                    //IsOrderDetailQueryDoMethod = false;
                                                }
                                                //newARow["CutLong"] = CellValue;
                                            }
                                            break;
                                        case 9:
                                            if (CellValue == "" || CellValue == null)
                                            {
                                                CellValue = "0";
                                                Convert.ToSingle(CellValue);
                                            }
                                            else
                                            {
                                                if (System.Text.RegularExpressions.Regex.IsMatch(CellValue, @"^[-+]?[0-9]*\.?[0-9]+$"))
                                                {
                                                    newARow["CutQty"] = CellValue;
                                                }
                                                else
                                                {
                                                    MessageBox.Show("请检查工作表" + Sheet.Name + "第" + i + "行第" + j + "列数据是否正确");
                                                    //IsOrderDetailQueryDoMethod = false;
                                                }
                                                //newARow["CutQty"] = CellValue;
                                            }
                                            break;
                                        case 10: newARow["MaterialDescription"] = CellValue; break;
                                        case 11: newARow["MaterialNote"] = CellValue; break;
                                        //case 12: newARow["DisplayMaterialSummary"] = CellValue; break;
                                        //case 13:
                                        //    newARow["AreaOfContour"] = CellValue;
                                        //    break;
                                    }
                                    //int PlateId = 0;
                                    //int PlateId1 = 0;

                                    //for (int q = 7; q < list.Length; q++)
                                    //{
                                    //    string PlateType = CStr(Sheet.Cells[q, 1].Value);
                                    //    if (list[q] == 0)
                                    //    {
                                    //        continue;
                                    //    }
                                    //    if (PlateType.Trim() == "装饰板（无拉手装饰板）")
                                    //    {
                                    //        PlateId = q;
                                    //    }
                                    //    if (PlateType.Trim() == "固定竖纹门板")
                                    //    {
                                    //        PlateId1 = q;
                                    //        break;
                                    //    }
                                    //}
                                    //if (i >= PlateId && i < PlateId1)
                                    //{
                                    //    newARow["PlateType"] = CStr(Sheet.Cells[PlateId, 1].Value);
                                    //}
                                    //if (i >= PlateId1)
                                    //{
                                    //    newARow["PlateType"] = CStr(Sheet.Cells[PlateId1, 1].Value);
                                    //}
                                }
                                //if (IsOrderDetailQueryDoMethod == false)
                                //{
                                //    break;
                                //}

                                NoPaintDoorSheetTable.Rows.Add(newARow);
                                //}
                            }
                            NoPaintDoorSheetTable.TableName = "IssueMaterialBills";
                            DS.Tables.Add(NoPaintDoorSheetTable);
                        }
                        else
                        {
                            con.Close();
                        }

                        //}
                        //else
                        //{
                        //    MessageBox.Show("工作表" + Sheet.Name + "不存在，请检查导入的Excel是否正确");
                        //}
                    }
                    //else
                    //{
                    //    MessageBox.Show("工作表不存在");
                    //    TheWorksheetExists = false;
                    //}
                }
                #endregion
                //免漆料单
                #region
                //if (IsOrderDetailQueryDoMethod)
                //{
                //    if (TheWorksheetExists)
                //    {
                using (ExcelPackage pck = new ExcelPackage(Fs))
                {
                    SqlConnection con = new SqlConnection("Data Source=192.168.124.72;Initial Catalog=OrBitXI;Persist Security Info=True;User ID=sa;Password=admin@2017");

                    ExcelWorksheet Sheet = null;//数据所在Sheet
                    Sheet = pck.Workbook.Worksheets["免漆料单"];
                    if (Sheet.Hidden.ToString() == "Visible")
                    {
                        //if (Sheet.Name == "免漆料单")
                        //{
                        int maxColumnNum = Sheet.Dimension.End.Column;//最大列
                        int minColumnNum = Sheet.Dimension.Start.Column;//最小列
                        int minRowNum = Sheet.Dimension.Start.Row;//最小行
                        int maxRowNum = Sheet.Dimension.End.Row;//最大行
                        int sRowNum = 5;//开始行
                        int eRowNum = 0;//结束行
                        int sAColNum = 1;//区域A的开始栏位
                        int eAColNum = 6;//区域A的结束栏位

                        string ExcelValue2 = "";
                        //获取结束行
                        for (int d = 1; d < maxRowNum; d++)
                        {
                            if (CStr(Sheet.Cells[d, 1].Value) == "配料：")
                            {
                                eRowNum = d - 1;
                                break;
                            }
                        }
                        //创建datatable保存物料信息
                        DataTable MaterialDescriptionTable = new DataTable();
                        MaterialDescriptionTable.Columns.Add(string.Format("MaterialDescription"), Type.GetType("System.String"));
                        MaterialDescriptionTable.Columns.Add(string.Format("ProductName"), Type.GetType("System.String"));
                        DataRow MaterialDescriptionNewRow = MaterialDescriptionTable.NewRow();
                        for (int i = sRowNum; i < eRowNum; i++)
                        {
                            string MaterialDescription = CStr(Sheet.Cells[i, 3].Value);
                            if (MaterialDescription == "" || MaterialDescription == null)
                            {
                                continue;
                            }
                            else
                            {
                                MaterialDescriptionNewRow["MaterialDescription"] = MaterialDescription;
                                MaterialDescriptionTable.Rows.Add(MaterialDescriptionNewRow.ItemArray);
                            }
                        }
                        //调用存储过程根据物料信息获取物料号
                        con.Open();
                        SqlCommand cmd = new SqlCommand();
                        cmd.CommandText = "Pro_GetProductName";
                        cmd.Connection = con;
                        cmd.CommandType = CommandType.StoredProcedure;
                        SqlParameter paremeters = new SqlParameter("@Pro_GetproductName", SqlDbType.Structured)
                        {
                            Value = MaterialDescriptionTable
                        };
                        cmd.Parameters.Add(paremeters);
                        cmd.ExecuteNonQuery();
                        cmd.Parameters.Add(new SqlParameter("@return", SqlDbType.Int));
                        cmd.Parameters["@return"].Direction = ParameterDirection.ReturnValue;
                        SqlDataReader reader = cmd.ExecuteReader();
                        DataTable dt1 = new DataTable();
                        dt1.Load(reader);

                        if (Convert.ToInt32(cmd.Parameters["@return"].Value) == 0)
                        {
                            con.Close();
                            //免漆料单数据读取
                            for (int i = sRowNum; i <= eRowNum; i++)
                            {
                                DataRow newARow = GetMaterialBillsTable.NewRow();
                                string MaterialDescription = CStr(Sheet.Cells[i, 3].Value);

                                ExcelValue2 = CStr(Sheet.Cells[i, 4].Value);
                                if ((ExcelValue2 == "") || (ExcelValue2 == null))
                                {
                                    continue;
                                }
                                if (System.Text.RegularExpressions.Regex.IsMatch(ExcelValue2, @"^[-+]?[0-9]*\.?[0-9]+$"))
                                {
                                    if (Convert.ToSingle(ExcelValue2) > 0)
                                    {
                                        newARow["GetMaterialBillsId"] = System.Guid.NewGuid().ToString().Substring(0, 12).ToUpper();
                                        newARow["ProductOrderId"] = ParentId;
                                        for (int j = sAColNum; j <= eAColNum; j++)
                                        {

                                            ExcelRange Rang = Sheet.Cells[i, j];
                                            object objectCellValue = Sheet.GetValue(i, j);//单元格数据
                                            string CellValue = objectCellValue != null ? objectCellValue.ToString().Trim() : "";
                                            if (Rang.Merge)
                                            {
                                                CellValue = GetMergeValue(Sheet, i, j);

                                            }
                                            switch (j)
                                            {
                                                case 1: newARow["ProjectName"] = CellValue; break;
                                                //case 2: newARow["NumericalOrder"] = CellValue; break;
                                                case 3:
                                                    for (int q = 0; q < dt1.Rows.Count; q++)
                                                    {
                                                        string ProductName = dt1.Rows[q]["ProductName"].ToString();
                                                        string Prodes = dt1.Rows[q]["ProductDescription"].ToString();
                                                        if (Prodes == MaterialDescription)
                                                        {
                                                            newARow["ProductName"] = ProductName;
                                                            newARow["ProductDes"] = CellValue;
                                                        }
                                                    }
                                                    break;
                                                case 4:
                                                    if (CellValue == "" || CellValue == null)
                                                    {
                                                        CellValue = "0";
                                                        Convert.ToSingle(CellValue);
                                                    }
                                                    else
                                                    {
                                                        if (System.Text.RegularExpressions.Regex.IsMatch(CellValue, @"^[-+]?[0-9]*\.?[0-9]+$"))
                                                        {
                                                            decimal Qty = Math.Round(decimal.Parse(CellValue), 3, MidpointRounding.AwayFromZero);
                                                            newARow["Qty"] = Qty;
                                                        }
                                                        else
                                                        {
                                                            MessageBox.Show("请检查工作表" + Sheet.Name + "第" + i + "行第" + j + "列数据是否正确");
                                                            //IsOrderDetailQueryDoMethod = false;
                                                        }
                                                        //newARow["Qty"] = CellValue;
                                                    }
                                                    break;
                                                case 5: newARow["Unit"] = CellValue; break;
                                                case 6: newARow["PackingConfirmed"] = CellValue; break;
                                            }
                                        }
                                        GetMaterialBillsTable.Rows.Add(newARow);
                                    }
                                }
                            }
                            GetMaterialBillsTable.TableName = "GetMaterialBills";
                            DS.Tables.Add(GetMaterialBillsTable);
                        }
                        //}
                        //else
                        //{
                        //    MessageBox.Show("工作表" + Sheet.Name + "不存在，请检查导入的Excel是否正确");
                        //}
                    }
                }
                //    }

                //}
                #endregion
                DataToSQL Data = new DataToSQL();
                Data.DataToSQLobj(DS);
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
        }
        /// <summary>
        /// 判断合并单元格获取值
        /// </summary>
        /// <param name="worksheet"></param>
        /// <param name="row">单元格行</param>
        /// <param name="column">单元格列</param>
        /// <returns></returns>
        public static string GetMergeValue(ExcelWorksheet worksheet, int row, int column)
        {
            string MergeValue = "";
            ExcelWorksheet.MergeCellsCollection<string> MergeCells = worksheet.MergedCells;
            for (int i = 0; i < MergeCells.Count; i++)
            {
                string range = MergeCells[i];
                ExcelAddress add = new ExcelAddress(range);
                int srow = add.Start.Row;//合并单元格开始行
                int scol = add.Start.Column;//合并单元格开始行
                int erow = add.End.Row;//合并单元格结束行
                int ecol = add.End.Column;//合并单元格结束行
                object value = worksheet.Cells[(new ExcelAddress(range)).Start.Row, (new ExcelAddress(range)).Start.Column].Value;
                if (row >= srow && row <= erow && column >= scol && column <= ecol)
                {
                    MergeValue = value.ToString();
                    break;
                }
            }
            return MergeValue;
        }

    }





    /// <summary>
    /// 吸塑模板MES导入数据库2018.7.2
    /// </summary>
    /// <param name="orderDaetail"></param>
    /// <param name="IssueMaterialBills"></param>
    public class BlisterTemplateMESExcelData : BlisterTemplateMES
    {
        protected string CStr(object o) { return o != null ? o.ToString() : ""; }
        public override void ReadBlisterTemplateMESData(string Path, string ParentId)
        {
            try
            {
                //bool IsOrderDetailQueryDoMethod = true;
                //bool TheWorksheetExists = true;
                FileStream Fs = new FileStream(Path, FileMode.Open, FileAccess.Read);
                SqlConnection con = new SqlConnection("Data Source=192.168.124.72;Initial Catalog=OrBitXI;User ID=sa;Password='admin@2017'");
                DataSet DS = new DataSet();
                #region
                using (ExcelPackage pck = new ExcelPackage(Fs))
                {
                    ExcelWorksheet Sheet = null;//数据所在Sheet
                    Sheet = pck.Workbook.Worksheets["吸塑门板单"];
                    if (Sheet.Hidden.ToString() == "Visible")
                    {
                        if (Sheet.Name == "吸塑门板单")
                        {
                            int maxColumnNum = Sheet.Dimension.End.Column;//最大列
                            int minColumnNum = Sheet.Dimension.Start.Column;//最小列
                            int minRowNum = Sheet.Dimension.Start.Row;//最小行
                            int maxRowNum = Sheet.Dimension.End.Row;//最大行
                            int sRowNum = 7;//开始行
                            int eRowNum = 0;//结束行
                            int sAColNum = 1;//区域A的开始栏位
                            int eAColNum = 13;//区域A的结束栏位
                            string PlateName = "";
                            //获取结束行
                            for (int d = 1; d < maxRowNum; d++)
                            {
                                if ((CStr(Sheet.Cells[d, 1].Value)).Trim() == "拆解人")
                                {
                                    eRowNum = d - 3;
                                    break;
                                }
                            }
                            //DataTable BoxNumTable = new DataTable();
                            //BoxNumTable.Columns.Add(string.Format("TemporaryTableId"), Type.GetType("System.String"));
                            //BoxNumTable.Columns.Add(string.Format("OrderDetailId"), Type.GetType("System.String"));
                            //BoxNumTable.Columns.Add(string.Format("ProductOrderId"), Type.GetType("System.String"));
                            //BoxNumTable.Columns.Add(string.Format("Identification"), Type.GetType("System.String"));
                            //DataRow BoxNumTableRow = BoxNumTable.NewRow();
                            //for (int i = sRowNum; i < eRowNum; i++)
                            //{
                            //    string BoxNumId = CStr(Sheet.Cells[i, 1].Value);
                            //    if (BoxNumId == "" || BoxNumId == null)
                            //    {
                            //        continue;
                            //    }
                            //    else
                            //    {
                            //        BoxNumTableRow["OrderDetailId"] = BoxNumId;
                            //        BoxNumTableRow["ProductOrderId"] = ParentId;
                            //    }
                            //    BoxNumTable.Rows.Add(BoxNumTableRow.ItemArray);
                            //}
                            //con.Open();
                            //SqlCommand cmd = new SqlCommand();
                            //cmd.CommandText = "Pro_SelectCaseNumber";
                            //cmd.Connection = con;
                            //cmd.CommandType = CommandType.StoredProcedure;
                            //SqlParameter paremeters = new SqlParameter("@Pro_SelectCaseNumber", SqlDbType.VarChar, 50);
                            //paremeters.Value = BoxNumTable;
                            //cmd.Parameters.Add(new SqlParameter("@return", SqlDbType.Int));
                            //cmd.Parameters["@return"].Direction = ParameterDirection.ReturnValue;
                            //cmd.ExecuteNonQuery();
                            //if (Convert.ToInt32(cmd.Parameters["@return"].Value) == 0)
                            //{
                            //领料单数据读取
                            for (int i = sRowNum; i <= eRowNum; i++)
                            {
                                //if (IsOrderDetailQueryDoMethod)
                                //{
                                DataRow newARow = BlisterTemplateMESTable.NewRow();
                                PlateName = CStr(Sheet.Cells[i, 9].Value);
                                if (PlateName == "" || PlateName == null)
                                {
                                    continue;
                                }
                                if (System.Text.RegularExpressions.Regex.IsMatch(PlateName, @"^[-+]?[0-9]*\.?[0-9]+$"))
                                {
                                    if (Convert.ToSingle(PlateName) > 0)
                                    {
                                        newARow["PlateType"] = Sheet.Cells[1, 1].Value.ToString().Substring(0, 2);
                                        newARow["HandType"] = Sheet.Cells[3, 2].Value;
                                        newARow["FaceConduct"] = Sheet.Cells[3, 4].Value;
                                        newARow["CenterMaterials"] = Sheet.Cells[4, 2].Value;

                                        for (int j = sAColNum; j <= eAColNum; j++)
                                        {
                                            con.Close();
                                            newARow["ProductOrderId"] = ParentId;
                                            ExcelRange Rang = Sheet.Cells[i, j];
                                            object objectCellValue = Sheet.GetValue(i, j);//单元格数据
                                            string CellValue = objectCellValue != null ? objectCellValue.ToString().Trim() : "";
                                            if (Rang.Merge)
                                            {
                                                CellValue = GetMergeValue(Sheet, i, j);
                                            }
                                            switch (j)
                                            {
                                                case 1:
                                                    newARow["OrderDetailId"] = CellValue;
                                                    break;
                                                case 2:
                                                    if (CellValue == "" || CellValue == null)
                                                    {
                                                        CellValue = "0";
                                                        Convert.ToSingle(CellValue);
                                                        newARow["FWide"] = CellValue;
                                                    }
                                                    else
                                                    {
                                                        if (System.Text.RegularExpressions.Regex.IsMatch(CellValue, @"^[-+]?[0-9]*\.?[0-9]+$"))
                                                        {
                                                            newARow["FWide"] = CellValue;
                                                        }
                                                        else
                                                        {
                                                            MessageBox.Show("请检查工作表" + Sheet.Name + "第" + i + "行第" + j + "列数据是否正确");
                                                            //IsOrderDetailQueryDoMethod = false;
                                                        }
                                                    }
                                                    break;
                                                case 3:
                                                    if (CellValue == "" || CellValue == null)
                                                    {
                                                        CellValue = "0";
                                                        Convert.ToSingle(CellValue);
                                                        newARow["FHigh"] = CellValue;
                                                    }
                                                    else
                                                    {
                                                        if (System.Text.RegularExpressions.Regex.IsMatch(CellValue, @"^[-+]?[0-9]*\.?[0-9]+$"))
                                                        {
                                                            newARow["FHigh"] = CellValue;
                                                        }
                                                        else
                                                        {
                                                            MessageBox.Show("请检查工作表" + Sheet.Name + "第" + i + "行第" + j + "列数据是否正确");
                                                            //IsOrderDetailQueryDoMethod = false;
                                                        }
                                                    }
                                                    break;
                                                case 4:
                                                    if (CellValue == "" || CellValue == null)
                                                    {
                                                        CellValue = "0";
                                                        Convert.ToSingle(CellValue);
                                                        newARow["Qty"] = CellValue;
                                                    }
                                                    else
                                                    {
                                                        if (System.Text.RegularExpressions.Regex.IsMatch(CellValue, @"^[-+]?[0-9]*\.?[0-9]+$"))
                                                        {
                                                            newARow["Qty"] = CellValue;
                                                        }
                                                        else
                                                        {
                                                            MessageBox.Show("请检查工作表" + Sheet.Name + "第" + i + "行第" + j + "列数据是否正确");
                                                            //IsOrderDetailQueryDoMethod = false;
                                                        }
                                                    }
                                                    break;
                                                case 5: newARow["PlateName"] = CellValue; break;
                                                case 6:
                                                    if (CellValue == "" || CellValue == null)
                                                    {
                                                        CellValue = "0";
                                                        Convert.ToSingle(CellValue);
                                                        newARow["CutThick"] = CellValue;
                                                    }
                                                    else
                                                    {
                                                        if (System.Text.RegularExpressions.Regex.IsMatch(CellValue, @"^[-+]?[0-9]*\.?[0-9]+$"))
                                                        {
                                                            newARow["CutThick"] = CellValue;
                                                        }
                                                        else
                                                        {
                                                            MessageBox.Show("请检查工作表" + Sheet.Name + "第" + i + "行第" + j + "列数据是否正确");
                                                            //IsOrderDetailQueryDoMethod = false;
                                                        }
                                                    }
                                                    break;
                                                case 7:
                                                    if (CellValue == "" || CellValue == null)
                                                    {
                                                        CellValue = "0";
                                                        Convert.ToSingle(CellValue);
                                                        newARow["CutWide"] = CellValue;
                                                    }
                                                    else
                                                    {
                                                        if (System.Text.RegularExpressions.Regex.IsMatch(CellValue, @"^[-+]?[0-9]*\.?[0-9]+$"))
                                                        {
                                                            newARow["CutWide"] = CellValue;
                                                        }
                                                        else
                                                        {
                                                            MessageBox.Show("请检查工作表" + Sheet.Name + "第" + i + "行第" + j + "列数据是否正确");
                                                            //IsOrderDetailQueryDoMethod = false;
                                                        }
                                                    }
                                                    break;
                                                case 8:
                                                    if (CellValue == "" || CellValue == null)
                                                    {
                                                        CellValue = "0";
                                                        Convert.ToSingle(CellValue);
                                                        newARow["CutHigh"] = CellValue;
                                                    }
                                                    else
                                                    {
                                                        if (System.Text.RegularExpressions.Regex.IsMatch(CellValue, @"^[-+]?[0-9]*\.?[0-9]+$"))
                                                        {
                                                            newARow["CutHigh"] = CellValue;
                                                        }
                                                        else
                                                        {
                                                            MessageBox.Show("请检查工作表" + Sheet.Name + "第" + i + "行第" + j + "列数据是否正确");
                                                            //IsOrderDetailQueryDoMethod = false;
                                                        }
                                                    }
                                                    break;
                                                case 9:
                                                    if (CellValue == "" || CellValue == null)
                                                    {
                                                        CellValue = "0";
                                                        Convert.ToSingle(CellValue);
                                                    }
                                                    else
                                                    {
                                                        if (System.Text.RegularExpressions.Regex.IsMatch(CellValue, @"^[-+]?[0-9]*\.?[0-9]+$"))
                                                        {
                                                            newARow["CutQty"] = CellValue;
                                                        }
                                                        else
                                                        {
                                                            MessageBox.Show("请检查工作表" + Sheet.Name + "第" + i + "行第" + j + "列数据是否正确");
                                                            //IsOrderDetailQueryDoMethod = false;
                                                        }
                                                    }
                                                    break;
                                                case 10: newARow["MaterialDescription"] = CellValue; break;
                                                case 11: newARow["MaterialNote"] = CellValue; break;
                                                //case 12: newARow["DisplayMaterialSummary"] = CellValue; break;
                                                //case 13: newARow["AreaOfContour"] = CellValue; break;
                                            }
                                        }
                                        //if (IsOrderDetailQueryDoMethod == false)
                                        //{
                                        //    break;
                                        //}

                                        BlisterTemplateMESTable.Rows.Add(newARow);
                                    }
                                }

                                //}
                            }
                            BlisterTemplateMESTable.TableName = "IssueMaterialBills";
                            DS.Tables.Add(BlisterTemplateMESTable);

                            //}

                        }
                        //else
                        //{
                        //    MessageBox.Show("工作表不存在");
                        //    TheWorksheetExists = false;
                        //}
                    }
                    //else
                    //{
                    //    MessageBox.Show("工作表不存在");
                    //    TheWorksheetExists = false;
                    //}
                }
                con.Close();
                #endregion
                //if (BlisterTemplateMESTable.Rows.Count != 0)
                //{
                #region
                //if (IsOrderDetailQueryDoMethod)
                //{
                //    if (TheWorksheetExists)
                //    {

                using (ExcelPackage pck = new ExcelPackage(Fs))
                {
                    ExcelWorksheet Sheet = null;//数据所在Sheet
                    Sheet = pck.Workbook.Worksheets["吸塑料单"];
                    if (Sheet.Hidden.ToString() == "Visible")
                    {
                        //if (Sheet.Name == "吸塑料单")
                        //{
                        int maxColumnNum = Sheet.Dimension.End.Column;//最大列
                        int minColumnNum = Sheet.Dimension.Start.Column;//最小列
                        int minRowNum = Sheet.Dimension.Start.Row;//最小行
                        int maxRowNum = Sheet.Dimension.End.Row;//最大行
                        int sRowNum = 5;//开始行
                        int eRowNum = 0;//结束行
                        int sAColNum = 1;//区域A的开始栏位
                        int eAColNum = 6;//区域A的结束栏位

                        string ExcelValue2 = "";
                        //获取结束行
                        for (int d = 1; d < maxRowNum; d++)
                        {
                            if (CStr(Sheet.Cells[d, 1].Value) == "拆解人")
                            {
                                eRowNum = d;
                                break;
                            }
                        }
                        DataTable MaterialDescription = new DataTable();
                        MaterialDescription.Columns.Add(string.Format("MaterialDescription"), Type.GetType("System.String"));
                        MaterialDescription.Columns.Add(string.Format("ProductName"), Type.GetType("System.String"));
                        DataRow newRow = MaterialDescription.NewRow();
                        for (int i = sRowNum; i < eRowNum; i++)
                        {
                            string MaterialDescriptionValue = CStr(Sheet.Cells[i, 3].Value);
                            if (MaterialDescriptionValue == "物料描述" || MaterialDescriptionValue == "" || MaterialDescriptionValue == null)
                            {
                                continue;
                            }
                            else
                            {
                                newRow["MaterialDescription"] = CStr(Sheet.Cells[i, 3].Value);
                            }
                            MaterialDescription.Rows.Add(newRow.ItemArray);
                        }
                        con.Open();
                        SqlCommand cmd = new SqlCommand();
                        cmd.CommandText = "Pro_GetProductName";
                        cmd.Connection = con;
                        cmd.CommandType = CommandType.StoredProcedure;
                        SqlParameter param =
                        new SqlParameter("@Pro_GetProductName", SqlDbType.Structured)
                        {
                            Value = MaterialDescription
                        };
                        cmd.Parameters.Add(param);
                        cmd.ExecuteNonQuery();
                        cmd.Parameters.Add(new SqlParameter("@return", SqlDbType.Int));
                        cmd.Parameters["@return"].Direction = ParameterDirection.ReturnValue;
                        SqlDataReader reader = cmd.ExecuteReader();
                        DataTable dt1 = new DataTable();
                        dt1.Load(reader);
                        if (Convert.ToInt32(cmd.Parameters["@return"].Value) == 0)
                        {
                            string Unit = "";
                            DataRow SuctionPlasticSheetRow = GetMaterialBillsTable.NewRow();
                            for (int i = sRowNum; i < eRowNum; i++)
                            {
                                SuctionPlasticSheetRow["ProductOrderId"] = ParentId;
                                ExcelValue2 = CStr(Sheet.Cells[i, 3].Value);
                                if (ExcelValue2 == "" || ExcelValue2 == null)
                                {
                                    continue;
                                }
                                for (int j = sAColNum; j <= eAColNum; j++)
                                {

                                    ExcelRange Rang = Sheet.Cells[i, j];
                                    object objectCellValue = Sheet.GetValue(i, j);//单元格数据
                                    string CellValue = objectCellValue != null ? objectCellValue.ToString().Trim() : "";
                                    if (Rang.Merge)
                                    {
                                        CellValue = GetMergeValue(Sheet, i, j);

                                    }
                                    Unit = CellValue;
                                    if (Unit == "项目")
                                    {
                                        break;
                                    }
                                    switch (j)
                                    {
                                        case 1: SuctionPlasticSheetRow["MaterialType"] = CellValue; break;
                                        //case 2:
                                        //    if (System.Text.RegularExpressions.Regex.IsMatch(CellValue, @"^[-+]?[0-9]*\.?[0-9]+$"))
                                        //    {
                                        //        SuctionPlasticSheetRow["NumericalOrder"] = CellValue;

                                        //    }
                                        //    else
                                        //    {
                                        //        SuctionPlasticSheetRow["HardwareFitting"] = CellValue;
                                        //    }

                                        //    break;
                                        case 3:
                                            for (int q = 0; q < dt1.Rows.Count; q++)
                                            {
                                                string MaterialDescriptionSQL = dt1.Rows[q]["ProductDescription"].ToString();
                                                string ProductName = dt1.Rows[q]["ProductName"].ToString();
                                                if (MaterialDescriptionSQL == ExcelValue2)
                                                {
                                                    SuctionPlasticSheetRow["ProductName"] = ProductName;
                                                    break;
                                                }
                                                //newARow["ProductName"] = ProductName;
                                            }
                                            //MaterialDescription

                                            SuctionPlasticSheetRow["ProductDes"] = CellValue;
                                            break;
                                        case 4:
                                            if (CellValue == "" || CellValue == null)
                                            {
                                                CellValue = "0";
                                                Convert.ToSingle(CellValue);
                                                SuctionPlasticSheetRow["Qty"] = CellValue;
                                            }
                                            else
                                            {
                                                if (System.Text.RegularExpressions.Regex.IsMatch(CellValue, @"^[-+]?[0-9]*\.?[0-9]+$"))
                                                {
                                                    Decimal Qty = Math.Round(decimal.Parse(CellValue), 3, MidpointRounding.AwayFromZero);

                                                    SuctionPlasticSheetRow["Qty"] = Qty;
                                                }
                                                else
                                                {
                                                    SuctionPlasticSheetRow["Unit"] = CellValue;
                                                }
                                            }
                                            break;
                                        case 5:
                                            if (System.Text.RegularExpressions.Regex.IsMatch(CellValue, @"^[-+]?[0-9]*\.?[0-9]+$"))
                                            {
                                                if (CellValue == "" || CellValue == null)
                                                {
                                                    CellValue = "0";
                                                    Convert.ToSingle(CellValue);
                                                    SuctionPlasticSheetRow["Qty"] = CellValue;
                                                }
                                                else
                                                {
                                                    SuctionPlasticSheetRow["Qty"] = CellValue;
                                                }
                                            }
                                            else
                                            {
                                                SuctionPlasticSheetRow["Unit"] = CellValue;
                                            }
                                            break;
                                        case 6: SuctionPlasticSheetRow["PackingConfirmed"] = CellValue; break;

                                    }

                                }
                                if (Unit == "项目")
                                {
                                    continue;
                                }
                                GetMaterialBillsTable.Rows.Add(SuctionPlasticSheetRow.ItemArray);
                            }
                            GetMaterialBillsTable.TableName = "GetMaterialBills";
                            DS.Tables.Add(GetMaterialBillsTable);
                        }
                        //}
                        //else
                        //{
                        //    MessageBox.Show("工作表" + Sheet.Name + "不存在，请检查导入的Excel是否正确");
                        //    TheWorksheetExists = false;
                        //}
                    }
                }
                //    }

                //}
                #endregion
                DataToSQL Data = new DataToSQL();
                Data.DataToSQLobj(DS);
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
            finally
            {

            }
        }
        /// <summary>
        /// 判断合并单元格获取值
        /// </summary>
        /// <param name="worksheet"></param>
        /// <param name="row">单元格行</param>
        /// <param name="column">单元格列</param>
        /// <returns></returns>
        public static string GetMergeValue(ExcelWorksheet worksheet, int row, int column)
        {
            string MergeValue = "";
            ExcelWorksheet.MergeCellsCollection<string> MergeCells = worksheet.MergedCells;
            for (int i = 0; i < MergeCells.Count; i++)
            {
                string range = MergeCells[i];
                ExcelAddress add = new ExcelAddress(range);
                int srow = add.Start.Row;//合并单元格开始行
                int scol = add.Start.Column;//合并单元格开始行
                int erow = add.End.Row;//合并单元格结束行
                int ecol = add.End.Column;//合并单元格结束行
                object value = worksheet.Cells[(new ExcelAddress(range)).Start.Row, (new ExcelAddress(range)).Start.Column].Value;
                if (row >= srow && row <= erow && column >= scol && column <= ecol)
                {
                    MergeValue = value.ToString();
                    break;
                }
            }
            return MergeValue;
        }

    }





    /// <summary>
    /// 吸塑模板MES领料单导入数据库
    /// </summary>
    /// <param name="orderDaetail"></param>
    /// <param name="IssueMaterialBills"></param>
    public class BlisterDoorPlankMaterialRequisition : BlisterDoorPlankMaterialRequisitionMES
    {
        protected string CStr(object o) { return o != null ? o.ToString() : ""; }
        public override void ReadBlisterDoorPlankMaterialRequisitionMESData(string Path, string ParentId)
        {
            try
            {
                bool IsOrderDetailQueryDoMethod = true;
                FileStream Fs = new FileStream(Path, FileMode.Open, FileAccess.Read);
                SqlConnection con = new SqlConnection("Data Source=192.168.124.72;Initial Catalog=OrBitXI;User ID=sa;Password='admin@2017'");
                using (ExcelPackage pck = new ExcelPackage(Fs))
                {
                    ExcelWorksheet Sheet = null;//数据所在Sheet
                    Sheet = pck.Workbook.Worksheets["吸塑门板领料单"];
                    if (Sheet != null)
                    {
                        int maxColumnNum = Sheet.Dimension.End.Column;//最大列
                        int minColumnNum = Sheet.Dimension.Start.Column;//最小列
                        int minRowNum = Sheet.Dimension.Start.Row;//最小行
                        int maxRowNum = Sheet.Dimension.End.Row;//最大行
                        int sRowNum = 6;//开始行
                        int eRowNum = 0;//结束行
                        int sAColNum = 1;//区域A的开始栏位
                        int eAColNum = 6;//区域A的结束栏位

                        //获取结束行
                        for (int d = 1; d < maxRowNum; d++)
                        {
                            if ((CStr(Sheet.Cells[d, 1].Value)).Trim() == "拆解人")
                            {
                                eRowNum = d - 3;
                                break;
                            }
                        }
                        DataTable ProductTable = new DataTable();
                        ProductTable.Columns.Add(string.Format("ProductDes"), Type.GetType("System.String"));
                        ProductTable.Columns.Add(string.Format("ProductName"), Type.GetType("System.String"));
                        DataRow ProductTableRow = ProductTable.NewRow();

                        for (int i = sRowNum; i < eRowNum; i++)
                        {
                            string ProductDes = CStr(Sheet.Cells[i, 3].Value);
                            if (ProductDes == "" || ProductDes == null)
                            {
                                continue;
                            }
                            else
                            {
                                ProductTableRow["ProductDes"] = ProductDes;
                            }
                            ProductTable.Rows.Add(ProductTableRow.ItemArray);
                        }
                        con.Open();
                        SqlCommand cmd = new SqlCommand();
                        cmd.CommandText = "Pro_GetproductName";
                        cmd.Connection = con;
                        cmd.CommandType = CommandType.StoredProcedure;
                        SqlParameter paremeters = new SqlParameter("@Pro_GetproductName", SqlDbType.Structured);
                        paremeters.Value = ProductTable;
                        cmd.Parameters.Add(paremeters);
                        cmd.ExecuteNonQuery();
                        //获取到存储过程返回的参数
                        cmd.Parameters.Add(new SqlParameter("@return", SqlDbType.Int));
                        cmd.Parameters["@return"].Direction = ParameterDirection.ReturnValue;
                        SqlDataReader reader = cmd.ExecuteReader();
                        //用来存放物料号和物料描述的新的datatable
                        DataTable dt1 = new DataTable();
                        dt1.Load(reader);
                        con.Close();
                        DataRow newARow = BlisterDoorPlankMaterialRequisitionTable.NewRow();
                        //领料单数据读取
                        for (int i = sRowNum; i <= eRowNum; i++)
                        {
                            string PlateName = "";
                            if (IsOrderDetailQueryDoMethod)
                            {
                                PlateName = CStr(Sheet.Cells[i, 3].Value);
                                if (PlateName == "" || PlateName == null)
                                {
                                    continue;
                                }
                                for (int b = 0; b < dt1.Rows.Count; b++)
                                {
                                    string ProductDes = Sheet.Cells[i, 3].Value.ToString();
                                    string ProductName = dt1.Rows[b]["ProductName"].ToString();
                                    if (ProductDes == dt1.Rows[b]["ProductDescription"].ToString())
                                    {
                                        newARow["ProductDes"] = ProductDes;
                                        newARow["ProductName"] = ProductName;
                                    }
                                }
                                newARow["CateGory"] = Sheet.Cells[1, 1].Value.ToString().Substring(3, 2);
                                for (int j = sAColNum; j <= eAColNum; j++)
                                {
                                    con.Close();
                                    newARow["ProductOrderId"] = ParentId;
                                    ExcelRange Rang = Sheet.Cells[i, j];
                                    object objectCellValue = Sheet.GetValue(i, j);//单元格数据
                                    string CellValue = objectCellValue != null ? objectCellValue.ToString().Trim() : "";
                                    if (Rang.Merge)
                                    {
                                        CellValue = GetMergeValue(Sheet, i, j);
                                    }
                                    switch (j)
                                    {
                                        case 1:
                                            newARow["MaterialType"] = CellValue;
                                            break;
                                        //case 3:
                                        //    newARow["ProductDes"] = Sheet.Cells[i,3].Value;
                                        //    break;
                                        case 4:
                                            newARow["Qty"] = Sheet.Cells[i, 4].Value;
                                            break;
                                        case 5:
                                            newARow["Unit"] = Sheet.Cells[i, 5].Value;
                                            break;
                                        case 6:
                                            newARow["Remark"] = Sheet.Cells[i, 6].Value;
                                            break;
                                    }
                                }
                                if (IsOrderDetailQueryDoMethod == false)
                                {
                                    break;
                                }

                                BlisterDoorPlankMaterialRequisitionTable.Rows.Add(newARow.ItemArray);
                            }
                        }
                    }
                    //else
                    //{
                    //    MessageBox.Show("工作表不存在");
                    //}
                }

            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
            finally
            {

            }
        }
        /// <summary>
        /// 判断合并单元格获取值
        /// </summary>
        /// <param name="worksheet"></param>
        /// <param name="row">单元格行</param>
        /// <param name="column">单元格列</param>
        /// <returns></returns>
        public static string GetMergeValue(ExcelWorksheet worksheet, int row, int column)
        {
            string MergeValue = "";
            ExcelWorksheet.MergeCellsCollection<string> MergeCells = worksheet.MergedCells;
            for (int i = 0; i < MergeCells.Count; i++)
            {
                string range = MergeCells[i];
                ExcelAddress add = new ExcelAddress(range);
                int srow = add.Start.Row;//合并单元格开始行
                int scol = add.Start.Column;//合并单元格开始行
                int erow = add.End.Row;//合并单元格结束行
                int ecol = add.End.Column;//合并单元格结束行
                object value = worksheet.Cells[(new ExcelAddress(range)).Start.Row, (new ExcelAddress(range)).Start.Column].Value;
                if (row >= srow && row <= erow && column >= scol && column <= ecol)
                {
                    MergeValue = value.ToString();
                    break;
                }
            }
            return MergeValue;
        }

    }





    /// <summary>
    /// 包装导入数据库
    /// </summary>
    public class ReadPacking_ListTableTableExcelData : Packing_List
    {
        /// <summary>
        /// 判断合并单元格获取值
        /// </summary>
        /// <param name="worksheet"></param>
        /// <param name="row">单元格行</param>
        /// <param name="column">单元格列</param>
        /// <returns></returns>
        public static string GetMergeValue(ExcelWorksheet worksheet, int row, int column)
        {
            string MergeValue = "";
            ExcelWorksheet.MergeCellsCollection<string> MergeCells = worksheet.MergedCells;
            for (int i = 0; i < MergeCells.Count; i++)
            {
                string range = MergeCells[i];
                ExcelAddress add = new ExcelAddress(range);
                int srow = add.Start.Row;//合并单元格开始行
                int scol = add.Start.Column;//合并单元格开始行
                int erow = add.End.Row;//合并单元格结束行
                int ecol = add.End.Column;//合并单元格结束行
                object value = worksheet.Cells[(new ExcelAddress(range)).Start.Row, (new ExcelAddress(range)).Start.Column].Value;
                if (row >= srow && row <= erow && column >= scol && column <= ecol)
                {
                    if (value == null)
                    {
                        MergeValue = "";
                        break;
                    }
                    else
                    {
                        MergeValue = value.ToString();
                        break;

                    }
                }
            }
            return MergeValue;
        }
        protected string CStr(object o) { return o != null ? o.ToString() : ""; }
        public override void ReadPacking_ListTableTableData(string Path, string ParentId)
        {
            try
            {
                FileStream Fs = new FileStream(Path, FileMode.Open, FileAccess.Read);
                using (ExcelPackage pck = new ExcelPackage(Fs))
                {
                    ExcelWorksheet Sheet = null;//数据所在Sheet
                    Sheet = pck.Workbook.Worksheets["速美包装"];
                    int maxColumnNum = Sheet.Dimension.End.Column;//最大列
                    int minColumnNum = Sheet.Dimension.Start.Column;//最小列
                    int minRowNum = Sheet.Dimension.Start.Row;//最小行
                    int maxRowNum = Sheet.Dimension.End.Row;//最大行
                    int sRowNum = 5;//开始行
                    int eRowNum = 0;//结束行
                    int sAColNum = 1;//区域A的开始栏位
                    int eAColNum = 11;//区域A的结束栏位

                    string ExcelValue2 = "";
                    int[] list = new int[maxRowNum + 1];
                    for (int d = 5; d <= maxRowNum; d++)
                    {
                        string Num1Value = CStr(Sheet.Cells[d, 1].Value);
                        if (Num1Value.Trim() == "拆解人" || Num1Value.Trim() == "序号" || Num1Value.Trim() == "三、整件发货部分（功能柜）" || Num1Value.Trim() == "1.整件包装---可使用对口箱的柜体（抽屉柜、拉篮柜）（备注：所有速美整柜包装需增加15厚以上同柜体材质垫板）" || Num1Value.Trim() == "2.整件包装--所有无法使用对口箱的所有柜体" || Num1Value.Trim() == "散件包装的柜体---可使用一片成型包装箱的明细" || Num1Value.Trim() == "注：以上包装箱适用地柜560深、720高散件柜体；吊柜300深、720高柜体；高柜560深2160高的散件柜体（除特定两种柜形外），外地所有玻璃层板单独包装" || Num1Value.Trim() == "散件包装的柜体--所有无法使用一片成型包装箱的柜体散件（玻璃层板单独包装）" || Num1Value.Trim() == "散件包装柜体的背板" || Num1Value.Trim() == "二、散件门板部分（备注：所有速美门板包装需使用双层包装纸箱）" || Num1Value.Trim() == "1.散件包装的门板---可使用一片成型包装箱的明细" || Num1Value.Trim() == "2.散件包装的门板--所有无法使用一片成型包装箱的门板散件" || Num1Value.Trim() == "四、装饰部件部分（本地、外地通用）")
                        {
                            eRowNum = d;
                            //list[d] = d;
                            if (Num1Value == "序号" || Num1Value.Trim() == "三、整件发货部分（功能柜）" || Num1Value.Trim() == "1.整件包装---可使用对口箱的柜体（抽屉柜、拉篮柜）（备注：所有速美整柜包装需增加15厚以上同柜体材质垫板）" || Num1Value.Trim() == "2.整件包装--所有无法使用对口箱的所有柜体" || Num1Value.Trim() == "散件包装的柜体---可使用一片成型包装箱的明细" || Num1Value.Trim() == "注：以上包装箱适用地柜560深、720高散件柜体；吊柜300深、720高柜体；高柜560深2160高的散件柜体（除特定两种柜形外），外地所有玻璃层板单独包装" || Num1Value.Trim() == "散件包装的柜体--所有无法使用一片成型包装箱的柜体散件（玻璃层板单独包装）" || Num1Value.Trim() == "散件包装柜体的背板" || Num1Value.Trim() == "二、散件门板部分（备注：所有速美门板包装需使用双层包装纸箱）" || Num1Value.Trim() == "1.散件包装的门板---可使用一片成型包装箱的明细" || Num1Value.Trim() == "2.散件包装的门板--所有无法使用一片成型包装箱的门板散件" || Num1Value.Trim() == "四、装饰部件部分（本地、外地通用）")
                            {
                                list[d] = d;
                            }
                            continue;
                        }
                    }
                    //ExcelValue2 = CStr(Sheet.Cells[11, 9].Value);
                    //DataTable Packing_ListTable = Packing_List();
                    //A6包装数据读取
                    for (int i = sRowNum; i <= eRowNum; i++)
                    {
                        DataRow newARow = Packing_ListTable.NewRow();
                        ExcelValue2 = CStr(Sheet.Cells[i, 9].Value);

                        ExcelRange Range = Sheet.Cells[i, 5];
                        object objectCellNumber = Sheet.GetValue(i, 5);//单元格数据
                        string CellNumber = objectCellNumber != null ? objectCellNumber.ToString().Trim() : "";
                        if (Range.Merge)
                        {
                            CellNumber = GetMergeValue(Sheet, i, 5);
                        }

                        if (CellNumber == "" || CellNumber == null)
                        {
                            continue;
                        }
                        if (System.Text.RegularExpressions.Regex.IsMatch(ExcelValue2.ToString(), @"^[-+]?[0-9]*\.?[0-9]+$") || ExcelValue2.Trim() == "车间调配")
                        {
                            decimal Value = 0;
                            int Value2 = 0;
                            if (ExcelValue2 == "车间调配")
                            {

                            }
                            else
                            {
                                Value = decimal.Parse(ExcelValue2);
                                Value2 = Convert.ToInt32(Value);
                            }
                            if (Value > 0 || ExcelValue2 == "车间调配")
                            {
                                for (int j = sAColNum; j <= eAColNum; j++)
                                {
                                    newARow["ProductOrderId"] = ParentId;
                                    //string TheDeliveryCateGory = CStr(Sheet.Cells[i, 1].Value).Trim();
                                    ExcelRange Rang = Sheet.Cells[i, j];
                                    object objectCellValue = Sheet.GetValue(i, j);//单元格数据
                                    string CellValue = objectCellValue != null ? objectCellValue.ToString().Trim() : "";
                                    if (Rang.Merge)
                                    {
                                        CellValue = GetMergeValue(Sheet, i, j);
                                    }


                                    switch (j)
                                    {
                                        case 1: newARow["PackingNumber"] = CellValue; break;
                                        case 2:

                                            newARow["Wide"] = CellValue;
                                            break;
                                        case 3:

                                            newARow["High"] = CellValue;
                                            break;
                                        case 4:
                                            ////string ExcelValue4 = CStr(Sheet.Cells[i, j].Value);

                                            ////if (ExcelValue4 == "" || ExcelValue4 == null)
                                            ////{
                                            //    newARow["Depth"] = "0";
                                            ////}
                                            ////else
                                            ////{
                                            ////    newARow["Depth"] = CellValue;
                                            ////}
                                            newARow["Depth"] = CellValue;
                                            break;
                                        case 5: newARow["Cell"] = CellValue; break;
                                        case 6: newARow["CabinetType"] = CellValue; break;
                                        case 7: newARow["NameOfPackagingMaterials"] = CellValue; break;
                                        case 8:
                                            if (CellValue == "" || CellValue == null)
                                            {
                                                newARow["MaterialCode"] = "null";
                                            }
                                            else
                                            {
                                                newARow["MaterialCode"] = CellValue;
                                            }
                                            break;

                                        case 9:
                                            if (System.Text.RegularExpressions.Regex.IsMatch(CellValue, @"^[-+]?[0-9]*\.?[0-9]+$"))
                                            {
                                                decimal QtyValue = Convert.ToDecimal(CellValue);
                                                Math.Round(QtyValue, 3, MidpointRounding.AwayFromZero);
                                                newARow["Qty"] = QtyValue;
                                            }
                                            else
                                            {
                                                newARow["PackingQuantity"] = CellValue;
                                            }
                                            break;
                                        case 10:
                                            if (CellValue == "车间调配")
                                            {
                                                newARow["Unit"] = null;
                                            }
                                            else
                                            {
                                                newARow["Unit"] = CellValue;
                                            }
                                            break;
                                        case 11: newARow["Remark"] = CellValue; break;
                                    }
                                    int TheDeliveryCateGoryId = 0;
                                    int TheDeliveryCateGoryId1 = 0;
                                    int TheDeliveryCateGoryId2 = 0;
                                    string TheDeliveryCateGory = "";
                                    string PackingGroup = "";
                                    for (int q = 5; q <= eRowNum; q++)
                                    {
                                        if (list[q] == 0 || CStr(Sheet.Cells[list[q], 1].Value).Trim() == "序号" || CStr(Sheet.Cells[list[q], 1].Value).Trim() == "注：以上包装箱适用地柜560深、720高散件柜体；吊柜300深、720高柜体；高柜560深2160高的散件柜体（除特定两种柜形外），外地所有玻璃层板单独包装")
                                        {
                                            continue;
                                        }
                                        TheDeliveryCateGory = CStr(Sheet.Cells[list[q], 1].Value).Trim();
                                        if (TheDeliveryCateGory == "三、整件发货部分（功能柜）")
                                        {
                                            TheDeliveryCateGoryId = q;
                                        }
                                        if (TheDeliveryCateGory == "二、散件门板部分（备注：所有速美门板包装需使用双层包装纸箱）")
                                        {
                                            TheDeliveryCateGoryId1 = q;
                                        }
                                        if (TheDeliveryCateGory == "四、装饰部件部分（本地、外地通用）")
                                        {
                                            TheDeliveryCateGoryId2 = q;
                                        }
                                    }
                                    int PackingGroupId = 0;
                                    int PackingGroupId1 = 0;
                                    int PackingGroupId2 = 0;
                                    int PackingGroupId3 = 0;
                                    int PackingGroupId4 = 0;
                                    int PackingGroupId5 = 0;
                                    int PackingGroupId6 = 0;

                                    for (int q = 6; q < eRowNum; q++)
                                    {
                                        if (list[q] == 0 || CStr(Sheet.Cells[list[q], 1].Value).Trim() == "序号" || CStr(Sheet.Cells[list[q], 1].Value).Trim() == "注：以上包装箱适用地柜560深、720高散件柜体；吊柜300深、720高柜体；高柜560深2160高的散件柜体（除特定两种柜形外），外地所有玻璃层板单独包装")
                                        {
                                            continue;
                                        }
                                        PackingGroup = CStr(Sheet.Cells[list[q], 1].Value).Trim();
                                        if (PackingGroup == "1.整件包装---可使用对口箱的柜体（抽屉柜、拉篮柜）（备注：所有速美整柜包装需增加15厚以上同柜体材质垫板）")
                                        {
                                            PackingGroupId = q;
                                        }
                                        if (PackingGroup == "2.整件包装--所有无法使用对口箱的所有柜体")
                                        {
                                            PackingGroupId1 = q;
                                        }
                                        if (PackingGroup == "散件包装的柜体---可使用一片成型包装箱的明细")
                                        {
                                            PackingGroupId2 = q;
                                        }
                                        if (PackingGroup == "散件包装的柜体--所有无法使用一片成型包装箱的柜体散件（玻璃层板单独包装）")
                                        {
                                            PackingGroupId3 = q;
                                        }
                                        if (PackingGroup == "散件包装柜体的背板")
                                        {
                                            PackingGroupId4 = q;
                                        }
                                        if (PackingGroup == "1.散件包装的门板---可使用一片成型包装箱的明细")
                                        {
                                            PackingGroupId5 = q;
                                        }
                                        if (PackingGroup == "2.散件包装的门板--所有无法使用一片成型包装箱的门板散件")
                                        {
                                            PackingGroupId6 = q;
                                        }
                                    }


                                    if (i >= TheDeliveryCateGoryId && i < TheDeliveryCateGoryId1)
                                    {
                                        newARow["TheDeliveryCateGory"] = CStr(Sheet.Cells[TheDeliveryCateGoryId, 1].Value).Trim();
                                    }
                                    else if (i >= TheDeliveryCateGoryId1 && i < TheDeliveryCateGoryId2)
                                    {
                                        newARow["TheDeliveryCateGory"] = CStr(Sheet.Cells[TheDeliveryCateGoryId1, 1].Value).Trim();
                                    }
                                    else if (i >= TheDeliveryCateGoryId2)
                                    {
                                        newARow["TheDeliveryCateGory"] = CStr(Sheet.Cells[TheDeliveryCateGoryId2, 1].Value).Trim();
                                    }

                                    if (i >= PackingGroupId && i < PackingGroupId1)
                                    {
                                        newARow["PackingGroup"] = CStr(Sheet.Cells[PackingGroupId, 1].Value).Trim();
                                    }
                                    if (i >= PackingGroupId1 && i < PackingGroupId2)
                                    {
                                        newARow["PackingGroup"] = CStr(Sheet.Cells[PackingGroupId1, 1].Value).Trim();
                                    }
                                    if (i >= PackingGroupId2 && i < PackingGroupId3)
                                    {
                                        newARow["PackingGroup"] = CStr(Sheet.Cells[PackingGroupId2, 1].Value).Trim();
                                    }
                                    if (i >= PackingGroupId3 && i < PackingGroupId4)
                                    {
                                        newARow["PackingGroup"] = CStr(Sheet.Cells[PackingGroupId3, 1].Value).Trim();
                                    }
                                    if (i >= PackingGroupId4 && i < PackingGroupId5)
                                    {
                                        newARow["PackingGroup"] = CStr(Sheet.Cells[PackingGroupId4, 1].Value).Trim();
                                    }
                                    if (i >= PackingGroupId5 && i < PackingGroupId6)
                                    {
                                        newARow["PackingGroup"] = CStr(Sheet.Cells[PackingGroupId5, 1].Value).Trim();
                                    }
                                    if (i >= PackingGroupId6 && i <= TheDeliveryCateGoryId2)
                                    {
                                        newARow["PackingGroup"] = CStr(Sheet.Cells[PackingGroupId6, 1].Value).Trim();
                                    }
                                    if (i >= TheDeliveryCateGoryId2)
                                    {
                                        newARow["PackingGroup"] = null;
                                    }
                                }
                            }
                            else
                            {
                                continue;
                            }

                        }

                        if ((ExcelValue2 == "") || (ExcelValue2 == null) || (ExcelValue2 == "数量"))
                        {
                            continue;
                        }
                        Packing_ListTable.Rows.Add(newARow);

                    }
                    //SqlConnection con = new SqlConnection("Data Source=192.168.124.72;Initial Catalog=OrBitXI;User ID=sa;Password='admin@2017'");

                    //SqlCommand com = new SqlCommand();
                    //con.Open();
                    //com.CommandText = "Insert_Packaging";
                    //com.Connection = con;
                    //com.CommandType = CommandType.StoredProcedure;
                    //SqlParameter paremeter = new SqlParameter("@Pro_Packaging", SqlDbType.Structured)
                    //{
                    //    Value = Packing_ListTable
                    //};
                    //com.Parameters.Add(paremeter);
                    //if ((com.ExecuteNonQuery() > 0))
                    //{
                    //    MessageBox.Show("导入成功");
                    //    con.Close();
                    //}
                    //else
                    //{
                    //    MessageBox.Show("导入失败");
                    //}
                }

            }
            catch (Exception ex)
            {

                MessageBox.Show(ex.Message);
            }

        }


    }


    /// <summary>
    /// A6包装导入数据库
    /// </summary>
    public class ReadPacking_ListTableTableExcelDataToSQL : Packing_List_ToSQL
    {
        /// <summary>
        /// 判断合并单元格获取值
        /// </summary>
        /// <param name="worksheet"></param>
        /// <param name="row">单元格行</param>
        /// <param name="column">单元格列</param>
        /// <returns></returns>
        public static string GetMergeValue(ExcelWorksheet worksheet, int row, int column)
        {
            string MergeValue = "";
            ExcelWorksheet.MergeCellsCollection<string> MergeCells = worksheet.MergedCells;
            for (int i = 0; i < MergeCells.Count; i++)
            {
                string range = MergeCells[i];
                ExcelAddress add = new ExcelAddress(range);
                int srow = add.Start.Row;//合并单元格开始行
                int scol = add.Start.Column;//合并单元格开始行
                int erow = add.End.Row;//合并单元格结束行
                int ecol = add.End.Column;//合并单元格结束行
                object value = worksheet.Cells[(new ExcelAddress(range)).Start.Row, (new ExcelAddress(range)).Start.Column].Value;
                if (row >= srow && row <= erow && column >= scol && column <= ecol)
                {
                    if (value == null)
                    {
                        MergeValue = "";
                        break;
                    }
                    else
                    {
                        MergeValue = value.ToString();
                        break;

                    }
                }
            }
            return MergeValue;
        }
        protected string CStr(object o) { return o != null ? o.ToString() : ""; }
        public override void ReadPacking_ListTableTableData(string Path, string ParentId)
        {
            try
            {
                FileStream Fs = new FileStream(Path, FileMode.Open, FileAccess.Read);
                using (ExcelPackage pck = new ExcelPackage(Fs))
                {
                    ExcelWorksheet Sheet = null;//数据所在Sheet
                    Sheet = pck.Workbook.Worksheets["A6包装"];
                    int maxColumnNum = Sheet.Dimension.End.Column;//最大列
                    int minColumnNum = Sheet.Dimension.Start.Column;//最小列
                    int minRowNum = Sheet.Dimension.Start.Row;//最小行
                    int maxRowNum = Sheet.Dimension.End.Row;//最大行
                    int sRowNum = 5;//开始行
                    int eRowNum = 0;//结束行
                    int sAColNum = 1;//区域A的开始栏位
                    int eAColNum = 11;//区域A的结束栏位

                    string ExcelValue2 = "";
                    int[] list = new int[maxRowNum + 1];
                    for (int d = 5; d <= maxRowNum; d++)
                    {
                        string Num1Value = CStr(Sheet.Cells[d, 1].Value);
                        if (Num1Value.Trim() == "备注：灯箱底板、拉篮、含玻璃镜子的板件都需要打硬包装" || Num1Value.Trim() == "序号" || Num1Value.Trim() == "三、整件发货部分（功能柜）" || Num1Value.Trim() == "1.整件包装---可使用对口箱的柜体（抽屉柜、拉篮柜）（备注：150宽、450宽、600宽整柜包装需增加15厚以上同柜体材质垫" || Num1Value.Trim() == "2.整件包装--所有无法使用对口箱的所有柜体" || Num1Value.Trim() == "散件包装的柜体---可使用一片成型包装箱的明细" || Num1Value.Trim() == "注：以上包装箱适用地柜560深、720高散件柜体；吊柜300深、720高柜体；高柜560深2160高的散件柜体（除特定两种柜形外），外地所有玻璃层板单独包装" || Num1Value.Trim() == "散件包装的柜体--所有无法使用一片成型包装箱的柜体散件（玻璃层板单独包装）" || Num1Value.Trim() == "散件包装柜体的背板" || Num1Value.Trim() == "二、散件门板部分" || Num1Value.Trim() == "1.散件包装的门板---可使用一片成型包装箱的明细" || Num1Value.Trim() == "2.散件包装的门板--所有无法使用一片成型包装箱的门板散件" || Num1Value.Trim() == "四、装饰部件部分（本地、外地通用）")
                        {
                            eRowNum = d;
                            //list[d] = d;
                            if (Num1Value == "序号" || Num1Value.Trim() == "三、整件发货部分（功能柜）" || Num1Value.Trim() == "1.整件包装---可使用对口箱的柜体（抽屉柜、拉篮柜）（备注：150宽、450宽、600宽整柜包装需增加15厚以上同柜体材质垫" || Num1Value.Trim() == "2.整件包装--所有无法使用对口箱的所有柜体" || Num1Value.Trim() == "散件包装的柜体---可使用一片成型包装箱的明细" || Num1Value.Trim() == "注：以上包装箱适用地柜560深、720高散件柜体；吊柜300深、720高柜体；高柜560深2160高的散件柜体（除特定两种柜形外），外地所有玻璃层板单独包装" || Num1Value.Trim() == "散件包装的柜体--所有无法使用一片成型包装箱的柜体散件（玻璃层板单独包装）" || Num1Value.Trim() == "散件包装柜体的背板" || Num1Value.Trim() == "二、散件门板部分" || Num1Value.Trim() == "1.散件包装的门板---可使用一片成型包装箱的明细" || Num1Value.Trim() == "2.散件包装的门板--所有无法使用一片成型包装箱的门板散件" || Num1Value.Trim() == "四、装饰部件部分（本地、外地通用）")
                            {
                                list[d] = d;
                            }
                            continue;
                        }
                    }
                    //ExcelValue2 = CStr(Sheet.Cells[11, 9].Value);
                    //DataTable Packing_ListTable = Packing_List();
                    //A6包装数据读取
                    for (int i = sRowNum; i <= eRowNum; i++)
                    {
                        DataRow newARow = Packing_ListA6Table.NewRow();
                        ExcelValue2 = CStr(Sheet.Cells[i, 9].Value);

                        ExcelRange Range = Sheet.Cells[i, 5];
                        object objectCellNumber = Sheet.GetValue(i, 5);//单元格数据
                        string CellNumber = objectCellNumber != null ? objectCellNumber.ToString().Trim() : "";
                        if (Range.Merge)
                        {
                            CellNumber = GetMergeValue(Sheet, i, 5);
                        }

                        if (CellNumber == "" || CellNumber == null)
                        {
                            continue;
                        }
                        if (System.Text.RegularExpressions.Regex.IsMatch(ExcelValue2.ToString(), @"^[-+]?[0-9]*\.?[0-9]+$") || ExcelValue2.Trim() == "车间调配")
                        {
                            decimal Value = 0;
                            int Value2 = 0;
                            if (ExcelValue2 == "车间调配")
                            {

                            }
                            else
                            {
                                Value = decimal.Parse(ExcelValue2);
                                Value2 = Convert.ToInt32(Value);
                            }
                            if (Value > 0 || ExcelValue2 == "车间调配")
                            {
                                for (int j = sAColNum; j <= eAColNum; j++)
                                {
                                    newARow["ProductOrderId"] = ParentId;
                                    //string TheDeliveryCateGory = CStr(Sheet.Cells[i, 1].Value).Trim();
                                    ExcelRange Rang = Sheet.Cells[i, j];
                                    object objectCellValue = Sheet.GetValue(i, j);//单元格数据
                                    string CellValue = objectCellValue != null ? objectCellValue.ToString().Trim() : "";
                                    if (Rang.Merge)
                                    {
                                        CellValue = GetMergeValue(Sheet, i, j);
                                    }


                                    switch (j)
                                    {
                                        case 1: newARow["PackingNumber"] = CellValue; break;
                                        case 2:

                                            newARow["Wide"] = CellValue;
                                            break;
                                        case 3:

                                            newARow["High"] = CellValue;
                                            break;
                                        case 4:
                                            string ExcelValue4 = CStr(Sheet.Cells[i, j].Value);


                                            if (ExcelValue4 == "" || ExcelValue4 == null)
                                            {
                                                newARow["Depth"] = "0";
                                            }
                                            else
                                            {
                                                newARow["Depth"] = CellValue;
                                            }

                                            break;
                                        case 5: newARow["Cell"] = CellValue; break;
                                        case 6: newARow["CabinetType"] = CellValue; break;
                                        case 7: newARow["NameOfPackagingMaterials"] = CellValue; break;
                                        case 8: newARow["MaterialCode"] = CellValue; break;

                                        case 9:
                                            if (System.Text.RegularExpressions.Regex.IsMatch(CellValue, @"^[-+]?[0-9]*\.?[0-9]+$"))
                                            {
                                                Decimal Qty = Math.Round(decimal.Parse(CellValue), 3, MidpointRounding.AwayFromZero);
                                                newARow["Qty"] = Qty;
                                            }
                                            else
                                            {
                                                newARow["PackingQuantity"] = CellValue;
                                            }
                                            break;
                                        case 10:
                                            if (CellValue == "车间调配")
                                            {
                                                newARow["Unit"] = null;
                                            }
                                            else
                                            {
                                                newARow["Unit"] = CellValue;
                                            }
                                            break;
                                        case 11: newARow["Remark"] = CellValue; break;
                                    }
                                    int TheDeliveryCateGoryId = 0;
                                    int TheDeliveryCateGoryId1 = 0;
                                    int TheDeliveryCateGoryId2 = 0;
                                    string TheDeliveryCateGory = "";
                                    string PackingGroup = "";
                                    for (int q = 5; q < eRowNum; q++)
                                    {
                                        if (list[q] == 0 || CStr(Sheet.Cells[list[q], 1].Value).Trim() == "序号" || CStr(Sheet.Cells[list[q], 1].Value).Trim() == "注：以上包装箱适用地柜560深、720高散件柜体；吊柜300深、720高柜体；高柜560深2160高的散件柜体（除特定两种柜形外），外地所有玻璃层板单独包装")
                                        {
                                            continue;
                                        }
                                        TheDeliveryCateGory = CStr(Sheet.Cells[list[q], 1].Value).Trim();
                                        if (TheDeliveryCateGory == "三、整件发货部分（功能柜）")
                                        {
                                            TheDeliveryCateGoryId = q;
                                        }
                                        if (TheDeliveryCateGory == "二、散件门板部分")
                                        {
                                            TheDeliveryCateGoryId1 = q;
                                        }
                                        if (TheDeliveryCateGory == "四、装饰部件部分（本地、外地通用）")
                                        {
                                            TheDeliveryCateGoryId2 = q;
                                        }
                                    }
                                    int PackingGroupId = 0;
                                    int PackingGroupId1 = 0;
                                    int PackingGroupId2 = 0;
                                    int PackingGroupId3 = 0;
                                    int PackingGroupId4 = 0;
                                    int PackingGroupId5 = 0;
                                    int PackingGroupId6 = 0;

                                    for (int q = 6; q < eRowNum; q++)
                                    {
                                        if (list[q] == 0 || CStr(Sheet.Cells[list[q], 1].Value).Trim() == "序号" || CStr(Sheet.Cells[list[q], 1].Value).Trim() == "注：以上包装箱适用地柜560深、720高散件柜体；吊柜300深、720高柜体；高柜560深2160高的散件柜体（除特定两种柜形外），外地所有玻璃层板单独包装")
                                        {
                                            continue;
                                        }
                                        PackingGroup = CStr(Sheet.Cells[list[q], 1].Value).Trim();
                                        if (PackingGroup == "1.整件包装---可使用对口箱的柜体（抽屉柜、拉篮柜）（备注：150宽、450宽、600宽整柜包装需增加15厚以上同柜体材质垫")
                                        {
                                            PackingGroupId = q;
                                        }
                                        if (PackingGroup == "2.整件包装--所有无法使用对口箱的所有柜体")
                                        {
                                            PackingGroupId1 = q;
                                        }
                                        if (PackingGroup == "散件包装的柜体---可使用一片成型包装箱的明细")
                                        {
                                            PackingGroupId2 = q;
                                        }
                                        if (PackingGroup == "散件包装的柜体--所有无法使用一片成型包装箱的柜体散件（玻璃层板单独包装）")
                                        {
                                            PackingGroupId3 = q;
                                        }
                                        if (PackingGroup == "散件包装柜体的背板")
                                        {
                                            PackingGroupId4 = q;
                                        }
                                        if (PackingGroup == "1.散件包装的门板---可使用一片成型包装箱的明细")
                                        {
                                            PackingGroupId5 = q;
                                        }
                                        if (PackingGroup == "2.散件包装的门板--所有无法使用一片成型包装箱的门板散件")
                                        {
                                            PackingGroupId6 = q;
                                        }
                                    }


                                    if (i >= TheDeliveryCateGoryId && i < TheDeliveryCateGoryId1)
                                    {
                                        newARow["TheDeliveryCateGory"] = CStr(Sheet.Cells[TheDeliveryCateGoryId, 1].Value).Trim();
                                    }
                                    else if (i >= TheDeliveryCateGoryId1 && i < TheDeliveryCateGoryId2)
                                    {
                                        newARow["TheDeliveryCateGory"] = CStr(Sheet.Cells[TheDeliveryCateGoryId1, 1].Value).Trim();
                                    }
                                    else if (i >= TheDeliveryCateGoryId2)
                                    {
                                        newARow["TheDeliveryCateGory"] = CStr(Sheet.Cells[TheDeliveryCateGoryId2, 1].Value).Trim();
                                    }

                                    if (i >= PackingGroupId && i < PackingGroupId1)
                                    {
                                        newARow["PackingGroup"] = CStr(Sheet.Cells[PackingGroupId, 1].Value).Trim();
                                    }
                                    if (i >= PackingGroupId1 && i < PackingGroupId2)
                                    {
                                        newARow["PackingGroup"] = CStr(Sheet.Cells[PackingGroupId1, 1].Value).Trim();
                                    }
                                    if (i >= PackingGroupId2 && i < PackingGroupId3)
                                    {
                                        newARow["PackingGroup"] = CStr(Sheet.Cells[PackingGroupId2, 1].Value).Trim();
                                    }
                                    if (i >= PackingGroupId3 && i < PackingGroupId4)
                                    {
                                        newARow["PackingGroup"] = CStr(Sheet.Cells[PackingGroupId3, 1].Value).Trim();
                                    }
                                    if (i >= PackingGroupId4 && i < PackingGroupId5)
                                    {
                                        newARow["PackingGroup"] = CStr(Sheet.Cells[PackingGroupId4, 1].Value).Trim();
                                    }
                                    if (i >= PackingGroupId5 && i < PackingGroupId6)
                                    {
                                        newARow["PackingGroup"] = CStr(Sheet.Cells[PackingGroupId5, 1].Value).Trim();
                                    }
                                    if (i >= PackingGroupId6 && i < TheDeliveryCateGoryId2)
                                    {
                                        newARow["PackingGroup"] = CStr(Sheet.Cells[PackingGroupId6, 1].Value).Trim();
                                    }
                                    if (i >= TheDeliveryCateGoryId2)
                                    {
                                        newARow["PackingGroup"] = null;
                                    }
                                }
                            }
                            else
                            {
                                continue;
                            }

                        }

                        if ((ExcelValue2 == "") || (ExcelValue2 == null) || (ExcelValue2 == "数量"))
                        {
                            continue;
                        }
                        Packing_ListA6Table.Rows.Add(newARow);

                    }
                    SqlConnection con = new SqlConnection("Data Source=192.168.124.72;Initial Catalog=OrBitXI;User ID=sa;Password=admin@2017");

                    SqlCommand com = new SqlCommand();
                    con.Open();
                    com.CommandText = "Insert_Packaging";
                    com.Connection = con;
                    com.CommandType = CommandType.StoredProcedure;
                    SqlParameter paremeter = new SqlParameter("@Pro_Packaging", SqlDbType.Structured)
                    {
                        Value = Packing_ListA6Table
                    };
                    com.Parameters.Add(paremeter);
                    if ((com.ExecuteNonQuery() > 0))
                    {
                        MessageBox.Show("导入成功");
                        con.Close();
                    }
                    else
                    {
                        MessageBox.Show("导入失败");
                        con.Close();
                    }
                }

            }
            catch (Exception ex)
            {

                MessageBox.Show(ex.Message);
            }

        }


    }


    /// <summary>
    /// 衣壁柜柜体数据导入SQL
    /// </summary>
    public class ClothesClosetMaterialListToSQL : ClothesClosetMaterialList_ToSQL
    {
        /// <summary>
        /// 判断合并单元格获取值
        /// </summary>
        /// <param name="worksheet"></param>
        /// <param name="row">单元格行</param>
        /// <param name="column">单元格列</param>
        /// <returns></returns>
        public static string GetMergeValue(ExcelWorksheet worksheet, int row, int column)
        {
            string MergeValue = "";
            ExcelWorksheet.MergeCellsCollection<string> MergeCells = worksheet.MergedCells;
            for (int i = 0; i < MergeCells.Count; i++)
            {
                string range = MergeCells[i];
                ExcelAddress add = new ExcelAddress(range);
                int srow = add.Start.Row;//合并单元格开始行
                int scol = add.Start.Column;//合并单元格开始列
                int erow = add.End.Row;//合并单元格结束行
                int ecol = add.End.Column;//合并单元格结束列
                object value = worksheet.Cells[(new ExcelAddress(range)).Start.Row, (new ExcelAddress(range)).Start.Column].Value;
                if (row >= srow && row <= erow && column >= scol && column <= ecol)
                {
                    if (value == null)
                    {
                        MergeValue = "";
                        break;
                    }
                    else
                    {
                        MergeValue = value.ToString();
                        break;
                    }
                }
            }
            return MergeValue;
        }
        protected string CStr(object o) { return o != null ? o.ToString() : ""; }
        public enum Ishidden
        {
            Visible = 0,
            Hidden = 1,
            VeryHidden = 2,
        };
        public override void ReadClothesClosetMaterialListData(string Path, string ParentId)
        {
            try
            {
                FileStream FileGuiti = new FileStream(Path, FileMode.Open, FileAccess.Read);
                using (ExcelPackage pck = new ExcelPackage(FileGuiti))
                {
                    ExcelWorksheet sheet = null;
                    sheet = pck.Workbook.Worksheets["柜体"];
                    if (sheet != null)
                    {
                        string hidden = sheet.Hidden.ToString();
                        int maxColumnNum = sheet.Dimension.End.Column;//最大列
                        int minColumnNum = sheet.Dimension.Start.Column;//最小列
                        int minRowNum = sheet.Dimension.Start.Row;//最小行
                        int maxRowNum = sheet.Dimension.End.Row;//最大行
                        int sRowNum = 8;//开始行
                        int eRowNum = 0;//结束行
                        if (Convert.ToString(sheet.Hidden) != "Hidden")
                        {
                            for (int i = sRowNum; i < maxRowNum; i++)
                            {
                                string EndRow = Convert.ToString(sheet.Cells[i, 1].Value);
                                if (EndRow.Trim() == "下料")
                                {
                                    eRowNum = i;
                                    break;
                                }
                            }

                            for (int i = sRowNum; i < eRowNum; i++)
                            {
                                DataRow GuitiIssueMaterialBillsDataTableRow = GuitiIssueMaterialBillsDataTable.NewRow();
                                GuitiIssueMaterialBillsDataTableRow["ProductOrderId"] = ParentId;
                                string Name = Convert.ToString(sheet.Cells[i, 3].Value);
                                if (Name == "" || Name == null)
                                {
                                    continue;
                                }
                                for (int j = 3; j < 25; j++)
                                {
                                    switch (j)
                                    {
                                        case 3:
                                            GuitiIssueMaterialBillsDataTableRow["PlateName"] = sheet.Cells[i, j].Value;
                                            break;
                                        case 6:
                                            GuitiIssueMaterialBillsDataTableRow["Deth"] = sheet.Cells[i, j].Value;
                                            break;
                                        case 8:
                                            GuitiIssueMaterialBillsDataTableRow["CenterMaterials"] = sheet.Cells[i, j].Value;
                                            break;
                                        case 11:
                                            GuitiIssueMaterialBillsDataTableRow["FaceConduct"] = sheet.Cells[i, j].Value;
                                            break;
                                        case 13:
                                            GuitiIssueMaterialBillsDataTableRow["Wide"] = sheet.Cells[i, j].Value;
                                            break;
                                        case 15:
                                            GuitiIssueMaterialBillsDataTableRow["High"] = sheet.Cells[i, j].Value;
                                            break;
                                        case 17:
                                            GuitiIssueMaterialBillsDataTableRow["Qty"] = sheet.Cells[i, j].Value;
                                            break;
                                        case 19:
                                            GuitiIssueMaterialBillsDataTableRow["Side"] = sheet.Cells[i, j].Value;
                                            break;
                                        case 24:
                                            GuitiIssueMaterialBillsDataTableRow["Remark"] = sheet.Cells[i, j].Value;
                                            break;
                                    }
                                    if (Name == "" || Name == null)
                                    {
                                        continue;
                                    }
                                }
                                GuitiIssueMaterialBillsDataTable.Rows.Add(GuitiIssueMaterialBillsDataTableRow);
                            }
                        }
                    }
                }


                FileStream Stream = new FileStream(Path, FileMode.Open, FileAccess.Read);
                using (ExcelPackage pck = new ExcelPackage(Stream))
                {
                    ExcelWorksheet Sheet = null;//数据所在Sheet
                    Sheet = pck.Workbook.Worksheets["吸料"];
                    if (Sheet != null)
                    {
                        int maxColumnNum = Sheet.Dimension.End.Column;//最大列
                        int minColumnNum = Sheet.Dimension.Start.Column;//最小列
                        int minRowNum = Sheet.Dimension.Start.Row;//最小行
                        int maxRowNum = Sheet.Dimension.End.Row;//最大行
                        int sRowNum = 5;//开始行
                        int eRowNum = 0;//结束行
                        int sAColNum = 1;//区域A的开始栏位

                        if (Convert.ToString(Sheet.Hidden) != "Hidden")
                        {
                            for (int i = 32; i <= maxRowNum; i++)
                            {
                                string EndValue = Convert.ToString(Sheet.Cells[i, 1].Value);
                                if (EndValue.Trim() == "制单人")
                                {
                                    eRowNum = i;
                                    break;
                                }
                            }
                            DataTable ProductTb = new DataTable();
                            ProductTb.Columns.Add(string.Format("ProductName"), Type.GetType("System.String"));
                            ProductTb.Columns.Add(string.Format("ProductDesCription"), Type.GetType("System.String"));
                            DataRow ProductTbRow = ProductTb.NewRow();
                            for (int i = sRowNum; i < eRowNum; i++)
                            {
                                if (Sheet.Cells[i, 2].Value == null)
                                {
                                    continue;
                                }
                                ProductTbRow["ProductDesCription"] = Sheet.Cells[i, 2].Value.ToString() + Sheet.Cells[i, 5].Value;
                                ProductTb.Rows.Add(ProductTbRow.ItemArray);
                            }




                            for (int i = sRowNum; i < eRowNum; i++)
                            {
                                DataRow GetMaterialBillsDataTableRow = GetMaterialBillsDataTable.NewRow();
                                GetMaterialBillsDataTableRow["ProductOrderId"] = ParentId;
                                string Name = Convert.ToString(Sheet.Cells[i, 2].Value);
                                //float Num =Convert.ToSingle( Sheet.Cells[i, 6].Value);
                                float Num = 0;
                                string Num1 = Convert.ToString(Sheet.Cells[i, 6].Value);
                                if (Num1 == "")
                                {
                                    Num = 0;
                                }
                                else
                                {
                                    Num = Convert.ToSingle(Num1);
                                }
                                if ((Name == "" || Name == null) && (Num == 0))
                                {
                                    continue;
                                }
                                for (int j = sAColNum; j < 8; j++)
                                {
                                    ExcelRange range = Sheet.Cells[i, j];
                                    object objectCellValue = Sheet.GetValue(i, j);//单元格数据
                                    string CellValue = objectCellValue != null ? objectCellValue.ToString().Trim() : "";
                                    if (range.Merge)
                                    {
                                        CellValue = GetMergeValue(Sheet, i, j);
                                    }
                                    switch (j)
                                    {
                                        case 1:
                                            GetMaterialBillsDataTableRow["MaterialType"] = CellValue;
                                            break;
                                        case 2:
                                            string GuiGe = Convert.ToString(Sheet.Cells[i, 5].Value);
                                            GetMaterialBillsDataTableRow["NumericalOrder"] = CellValue + GuiGe;
                                            break;
                                        //case 5:
                                        //    GetMaterialBillsDataTableRow["MaterialType"] = CellValue;
                                        //    break;
                                        case 6:
                                            GetMaterialBillsDataTableRow["Qty"] = CellValue;
                                            break;
                                        case 7:
                                            GetMaterialBillsDataTableRow["Unit"] = CellValue;
                                            break;
                                        case 8:
                                            GetMaterialBillsDataTableRow["PackingConfirmed"] = CellValue;
                                            break;
                                    }
                                    if ((Name == "" || Name == null) && (Num == 0))
                                    {
                                        continue;
                                    }
                                }
                                GetMaterialBillsDataTable.Rows.Add(GetMaterialBillsDataTableRow);
                            }
                        }
                    }
                }
                FileStream FStream = new FileStream(Path, FileMode.Open, FileAccess.Read);
                using (ExcelPackage pck = new ExcelPackage(FStream))
                {
                    ExcelWorksheet Sheet = null;//数据所在Sheet
                    Sheet = pck.Workbook.Worksheets["吸塑"];
                    if (Sheet != null)
                    {
                        int maxColumnNum = Sheet.Dimension.End.Column;//最大列
                        int minColumnNum = Sheet.Dimension.Start.Column;//最小列
                        int minRowNum = Sheet.Dimension.Start.Row;//最小行
                        int maxRowNum = Sheet.Dimension.End.Row;//最大行
                        int sRowNum = 8;//开始行
                        int eRowNum = 0;//结束行
                        string IsHidden = Convert.ToString(Sheet.Hidden);
                        if (IsHidden != "Hidden")
                        {
                            for (int i = 26; i < maxRowNum; i++)
                            {
                                string EndNum = Convert.ToString(Sheet.Cells[i, 1].Value);
                                if (EndNum.Trim() == "下料")
                                {
                                    eRowNum = i;
                                    break;
                                }
                            }
                            for (int i = sRowNum; i < eRowNum; i++)
                            {
                                DataRow IssueMaterialBillsDataTableRow = IssueMaterialBillsDataTable.NewRow();
                                IssueMaterialBillsDataTableRow["ProductOrderId"] = ParentId;
                                string Name = Convert.ToString(Sheet.Cells[i, 3].Value);
                                if (Name == "" || Name == null || Name.Trim() == "装饰侧板、装饰档板、屉面为下料尺寸")
                                {
                                    continue;
                                }
                                for (int j = 3; j < 25; j++)
                                {
                                    switch (j)
                                    {
                                        case 3:
                                            IssueMaterialBillsDataTableRow["PlateName"] = Sheet.Cells[i, j].Value;
                                            break;
                                        case 6:
                                            IssueMaterialBillsDataTableRow["Deth"] = Sheet.Cells[i, j].Value;
                                            break;
                                        case 8:
                                            IssueMaterialBillsDataTableRow["CenterMaterials"] = Sheet.Cells[i, j].Value;
                                            break;
                                        case 11:
                                            IssueMaterialBillsDataTableRow["FaceConduct"] = Sheet.Cells[i, j].Value;
                                            break;
                                        case 13:
                                            IssueMaterialBillsDataTableRow["Wide"] = Sheet.Cells[i, j].Value;
                                            break;
                                        case 15:
                                            IssueMaterialBillsDataTableRow["High"] = Sheet.Cells[i, j].Value;
                                            break;
                                        case 17:
                                            IssueMaterialBillsDataTableRow["Qty"] = Sheet.Cells[i, j].Value;
                                            break;
                                        case 19:
                                            IssueMaterialBillsDataTableRow["Side"] = Sheet.Cells[i, j].Value;
                                            break;
                                        case 24:
                                            IssueMaterialBillsDataTableRow["Remark"] = Sheet.Cells[i, j].Value;
                                            break;
                                    }
                                    if (Name == "" || Name == null || Name.Trim() == "装饰侧板、装饰档板、屉面为下料尺寸")
                                    {
                                        continue;
                                    }
                                }
                                IssueMaterialBillsDataTable.Rows.Add(IssueMaterialBillsDataTableRow);
                            }
                        }
                    }
                }
                FileStream FiStream = new FileStream(Path, FileMode.Open, FileAccess.Read);
                using (ExcelPackage pck = new ExcelPackage(FiStream))
                {
                    ExcelWorksheet Sheet = null;//数据所在Sheet
                    Sheet = pck.Workbook.Worksheets["附页"];
                    if (Sheet != null)
                    {
                        int maxColumnNum = Sheet.Dimension.End.Column;//最大列
                        int minColumnNum = Sheet.Dimension.Start.Column;//最小列
                        int minRowNum = Sheet.Dimension.Start.Row;//最小行
                        int maxRowNum = Sheet.Dimension.End.Row;//最大行
                        int sRowNum = 8;//开始行
                        int eRowNum = 0;//结束行

                        if (Convert.ToString(Sheet.Hidden) != "Hidden")
                        {
                            for (int i = 8; i < maxRowNum; i++)
                            {
                                string Col1 = Convert.ToString(Sheet.Cells[i, 1].Value);
                                if (Col1.Trim() == "下料")
                                {
                                    eRowNum = i;
                                    break;
                                }
                            }
                            for (int i = sRowNum; i < eRowNum; i++)
                            {
                                DataRow FuyeIssueMaterialBillsDataTableRow = FuyeIssueMaterialBillsDataTable.NewRow();
                                FuyeIssueMaterialBillsDataTableRow["ProductOrderId"] = ParentId;
                                string Name = Convert.ToString(Sheet.Cells[i, 3].Value);
                                if (Name == "" || Name == null)
                                {
                                    continue;
                                }
                                for (int j = 3; j < 25; j++)
                                {
                                    switch (j)
                                    {
                                        case 3:
                                            FuyeIssueMaterialBillsDataTableRow["PlateName"] = Sheet.Cells[i, j].Value;
                                            break;
                                        case 6:
                                            FuyeIssueMaterialBillsDataTableRow["Deth"] = Sheet.Cells[i, j].Value;
                                            break;
                                        case 8:
                                            FuyeIssueMaterialBillsDataTableRow["CenterMaterials"] = Sheet.Cells[i, j].Value;
                                            break;
                                        case 11:
                                            FuyeIssueMaterialBillsDataTableRow["FaceConduct"] = Sheet.Cells[i, j].Value;
                                            break;
                                        case 13:
                                            FuyeIssueMaterialBillsDataTableRow["Wide"] = Sheet.Cells[i, j].Value;
                                            break;
                                        case 15:
                                            FuyeIssueMaterialBillsDataTableRow["High"] = Sheet.Cells[i, j].Value;
                                            break;
                                        case 17:
                                            FuyeIssueMaterialBillsDataTableRow["Qty"] = Sheet.Cells[i, j].Value;
                                            break;
                                        case 19:
                                            FuyeIssueMaterialBillsDataTableRow["Side"] = Sheet.Cells[i, j].Value;
                                            break;
                                        case 24:
                                            FuyeIssueMaterialBillsDataTableRow["Remark"] = Sheet.Cells[i, j].Value;
                                            break;
                                    }
                                    if (Name == "" || Name == null)
                                    {
                                        continue;
                                    }
                                }
                                FuyeIssueMaterialBillsDataTable.Rows.Add(FuyeIssueMaterialBillsDataTableRow);
                            }
                        }
                    }
                }

                FileStream File = new FileStream(Path, FileMode.Open, FileAccess.Read);
                using (ExcelPackage pck = new ExcelPackage(File))
                {
                    ExcelWorksheet Sheet = null;//数据所在Sheet
                    Sheet = pck.Workbook.Worksheets["包装"];
                    if (Sheet != null)
                    {
                        int maxColumnNum = Sheet.Dimension.End.Column;//最大列
                        int minColumnNum = Sheet.Dimension.Start.Column;//最小列
                        int minRowNum = Sheet.Dimension.Start.Row;//最小行
                        int maxRowNum = Sheet.Dimension.End.Row;//最大行
                        int sRowNum = 6;//开始行
                        int eRowNum = 0;//结束行

                        if (Convert.ToString(Sheet.Hidden) != "Hidden")
                        {
                            for (int i = sRowNum; i < maxRowNum; i++)
                            {
                                string EndNum = Convert.ToString(Sheet.Cells[i, 1].Value);
                                if (EndNum.Trim() == "注：1.如遇个别非标产品不在上表尺寸内，则选择最相近的用量使用。")
                                {
                                    eRowNum = i;
                                    break;
                                }
                            }
                            for (int i = sRowNum; i < eRowNum; i++)
                            {
                                DataRow Li_PackingListTableRow = Li_PackingListTable.NewRow();
                                Li_PackingListTableRow["ProductOrderId"] = ParentId;
                                string PackingName = Convert.ToString(Sheet.Cells[i, 8].Value);
                                if (PackingName == "" || PackingName == null)
                                {
                                    continue;
                                }
                                for (int j = 1; j < 12; j++)
                                {
                                    ExcelRange rang = Sheet.Cells[i, j];
                                    object objectCellValue = Sheet.GetValue(i, j);//单元格数据
                                    string CellValue = objectCellValue != null ? objectCellValue.ToString().Trim() : "";
                                    if (rang.Merge)
                                    {
                                        CellValue = GetMergeValue(Sheet, i, j);
                                    }
                                    switch (j)
                                    {
                                        case 1:
                                            Li_PackingListTableRow["PackingNumber"] = CellValue;
                                            break;
                                        case 2:
                                            Li_PackingListTableRow["Wide"] = CellValue;
                                            break;
                                        case 3:
                                            Li_PackingListTableRow["High"] = CellValue;
                                            break;
                                        case 4:
                                            Li_PackingListTableRow["Depth"] = CellValue;
                                            break;
                                        case 5:
                                            if (System.Text.RegularExpressions.Regex.IsMatch(CellValue.ToString(), @"^[-+]?[0-9]*\.?[0-9]+$"))
                                            {
                                                Li_PackingListTableRow["Quantity"] = Convert.ToInt32(CellValue);
                                            }
                                            else
                                            {
                                                Li_PackingListTableRow["Quantity"] = 0;
                                            }
                                            break;
                                        case 6:
                                            Li_PackingListTableRow["Cell"] = CellValue;
                                            break;
                                        case 7:
                                            Li_PackingListTableRow["CabinetType"] = CellValue;
                                            break;
                                        case 8:
                                            Li_PackingListTableRow["NameOfPackagingMaterials"] = CellValue;
                                            break;
                                        case 9:
                                            Li_PackingListTableRow["MaterialCode"] = CellValue;
                                            break;
                                        case 10:
                                            if (System.Text.RegularExpressions.Regex.IsMatch(CellValue.ToString(), @"^[-+]?[0-9]*\.?[0-9]+$"))
                                            {
                                                Li_PackingListTableRow["Qty"] = CellValue;
                                            }
                                            else
                                            {
                                                Li_PackingListTableRow["PackingQuantity"] = CellValue;
                                            }
                                            break;
                                        case 11:
                                            Li_PackingListTableRow["Unit"] = Sheet.Cells[i, j].Value;
                                            break;
                                    }
                                    if (PackingName == "" || PackingName == null)
                                    {
                                        continue;
                                    }
                                }
                                Li_PackingListTable.Rows.Add(Li_PackingListTableRow);
                            }
                        }
                    }
                }



                FileStream Fs = new FileStream(Path, FileMode.Open, FileAccess.Read);
                using (ExcelPackage pck = new ExcelPackage(Fs))
                {
                    ExcelWorksheet Sheet = null;//数据所在Sheet
                    Sheet = pck.Workbook.Worksheets["料单"];
                    if (Sheet != null)
                    {
                        int maxColumnNum = Sheet.Dimension.End.Column;//最大列
                        int minColumnNum = Sheet.Dimension.Start.Column;//最小列
                        int minRowNum = Sheet.Dimension.Start.Row;//最小行
                        int maxRowNum = Sheet.Dimension.End.Row;//最大行
                        int sRowNum = 5;//开始行
                        int eRowNum = 0;//结束行
                        int sAColNum = 1;//区域A的开始栏位
                        int eAColNum = 8;//区域A的结束栏位
                        if (Convert.ToString(Sheet.Hidden) != "Hidden")
                        {
                            string ExcelValue2 = "";
                            for (int d = 5; d <= maxRowNum; d++)
                            {
                                //string Num1Value = CStr(Sheet.Cells[d, 1]);
                                string Value = GetMergeValue(Sheet, d, 1);
                                if (Value.Trim() == "拆解员：")
                                {
                                    eRowNum = d;
                                    break;
                                }
                            }
                            string QtyNum = "";
                            //衣壁柜装箱清单导入SQL
                            for (int i = sRowNum; i < eRowNum; i++)
                            {
                                DataRow PackingListTableRow = PackingListTable.NewRow();
                                PackingListTableRow["ProductOrderId"] = ParentId;
                                string Name = GetMergeValue(Sheet, i, 11);
                                QtyNum = CStr(Sheet.Cells[i, 15].Value);
                                if ((Name == "" || Name == null) || (QtyNum == "" || QtyNum == null))
                                {
                                    continue;
                                }
                                for (int j = 10; j < 18; j++)
                                {
                                    PackingListTableRow["ProductOrderId"] = ParentId;
                                    ExcelRange rang = Sheet.Cells[i, j];
                                    object objectCellValue = Sheet.GetValue(i, j);//单元格数据
                                    string CellValue = objectCellValue != null ? objectCellValue.ToString().Trim() : "";
                                    if (rang.Merge)
                                    {
                                        CellValue = GetMergeValue(Sheet, i, j);
                                    }
                                    switch (j)
                                    {
                                        case 10:
                                            PackingListTableRow["PackingNumber"] = CellValue;
                                            break;
                                        case 11:
                                            string GuiGe = CStr(Sheet.Cells[i, j + 3].Value);
                                            PackingListTableRow["NameOfPackagingMaterials"] = CellValue + GuiGe;
                                            break;
                                        case 15:
                                            float Qty = Convert.ToSingle(CellValue);
                                            PackingListTableRow["Qty"] = Math.Round(Qty, 2, MidpointRounding.AwayFromZero);
                                            break;
                                        case 16:
                                            PackingListTableRow["Unit"] = CellValue;
                                            break;
                                        case 17:
                                            PackingListTableRow["TheDeliveryCateGory"] = CellValue;
                                            break;
                                    }
                                    if ((Name == "" || Name == null) || (QtyNum == "" || QtyNum == null))
                                    {
                                        continue;
                                    }
                                }
                                PackingListTable.Rows.Add(PackingListTableRow);
                            }
                            //衣壁柜领料单读取
                            for (int i = sRowNum; i <= eRowNum; i++)
                            {
                                DataRow newGetMaterialBillsDataTableRow = GuitiGetMaterialBillsDataTable.NewRow();
                                ExcelValue2 = CStr(Sheet.Cells[i, 2].Value);

                                //ExcelRange Range = Sheet.Cells[i, 5];
                                //object objectCellNumber = Sheet.GetValue(i, 5);//单元格数据
                                //string CellNumber = objectCellNumber != null ? objectCellNumber.ToString().Trim() : "";
                                //if (Range.Merge)
                                //{
                                //    CellNumber =GetMergeValue(Sheet, i, 5);
                                //}

                                if ((ExcelValue2 == "" || ExcelValue2 == null) && (QtyNum == "" || QtyNum == null))
                                {
                                    continue;
                                }
                                for (int j = sAColNum; j <= eAColNum; j++)
                                {
                                    newGetMaterialBillsDataTableRow["ProductOrderId"] = ParentId;
                                    //string TheDeliveryCateGory = CStr(Sheet.Cells[i, 1].Value).Trim();
                                    ExcelRange Rang = Sheet.Cells[i, j];
                                    object objectCellValue = Sheet.GetValue(i, j);//单元格数据
                                    string CellValue = objectCellValue != null ? objectCellValue.ToString().Trim() : "";
                                    if (Rang.Merge)
                                    {
                                        CellValue = GetMergeValue(Sheet, i, j);
                                    }
                                    switch (j)
                                    {
                                        case 1: newGetMaterialBillsDataTableRow["MaterialType"] = CellValue; break;
                                        case 2:
                                            string Specification = CStr(Sheet.Cells[i, 5].Value);
                                            newGetMaterialBillsDataTableRow["NumericalOrder"] = CellValue + Specification;
                                            break;
                                        case 6:
                                            string ExcelValue4 = CStr(Sheet.Cells[i, j].Value);
                                            //newGetMaterialBillsDataTableRow["Qty"] = CellValue;
                                            if (ExcelValue4 == "" || ExcelValue4 == null)
                                            {
                                                newGetMaterialBillsDataTableRow["Qty"] = "0";
                                            }
                                            else
                                            {
                                                //Math.Round(, 2, MidpointRounding.AwayFromZero)
                                                float Qty = Convert.ToSingle(CellValue);
                                                newGetMaterialBillsDataTableRow["Qty"] = Math.Round(Qty, 2, MidpointRounding.AwayFromZero);
                                            }
                                            break;
                                        case 7:
                                            newGetMaterialBillsDataTableRow["Unit"] = CellValue;
                                            break;
                                        case 8: newGetMaterialBillsDataTableRow["PackingConfirmed"] = CellValue; break;
                                    }
                                }
                                if ((ExcelValue2 == "") || (ExcelValue2 == null))
                                {
                                    continue;
                                }
                                GuitiGetMaterialBillsDataTable.Rows.Add(newGetMaterialBillsDataTableRow);
                            }
                        }
                    }
                }
                //SqlConnection con = new SqlConnection("Data Source=192.168.124.72;Initial Catalog=OrBitXI;User ID=sa;Password=admin@2017");

                //SqlCommand com = new SqlCommand();
                //con.Open();
                //com.CommandText = "Insert_Packaging";
                //com.Connection = con;
                //com.CommandType = CommandType.StoredProcedure;
                //SqlParameter paremeter = new SqlParameter("@Pro_Packaging", SqlDbType.Structured)
                //{
                //    Value = GetMaterialBillsDataTable
                //};
                //com.Parameters.Add(paremeter);
                //if ((com.ExecuteNonQuery() > 0))
                //{
                //    MessageBox.Show("导入成功");
                //    con.Close();
                //}
                //else
                //{
                //    MessageBox.Show("导入失败");
                //    con.Close();
                //}
                //FileStream stream = new FileStream(Path, FileMode.Open, FileAccess.Read);
                //using (ExcelPackage pck = new ExcelPackage(Fs))
                //{
                //    ExcelWorksheet Sheet = null;//数据所在Sheet
                //    Sheet = pck.Workbook.Worksheets["料单"];
                //    int maxColumnNum = Sheet.Dimension.End.Column;//最大列
                //    int minColumnNum = Sheet.Dimension.Start.Column;//最小列
                //    int minRowNum = Sheet.Dimension.Start.Row;//最小行
                //    int maxRowNum = Sheet.Dimension.End.Row;//最大行
                //    int sRowNum = 5;//开始行
                //    int eRowNum = 0;//结束行
                //    int sAColNum = 1;//区域A的开始栏位
                //    int eAColNum = 8;//区域A的结束栏位

                //    string ExcelValue2 = "";
                //    int[] list = new int[maxRowNum + 1];
                //    for (int d = 5; d <= maxRowNum; d++)
                //    {
                //        //string Num1Value = CStr(Sheet.Cells[d, 1]);
                //        string Value = GetMergeValue(Sheet, d, 1);
                //        if (Value.Trim() == "拆解员：")
                //        {
                //            eRowNum = d;
                //            break;
                //        }
                //    }
                //}





            }
            catch (Exception ex)
            {

                MessageBox.Show(ex.Message);
            }
        }
    }




    /// <summary>
    /// 对比柜体数据是否正确
    /// </summary>
    public class CheckTicketData1 : CheckTicket_ToSQL
    {

        public override void CheckTicketData(string Path, string ParentId, System.Windows.Forms.DataGridView Gridview)
        {
            try
            {


                //存储数据流
                FileStream Fs = new FileStream(Path, FileMode.Open, FileAccess.Read);


                //读取Excel
                using (ExcelPackage pck = new ExcelPackage(Fs))
                {
                    //数据所在Sheet
                    ExcelWorksheet Sheet = null;
                    //打开的Sheet名
                    Sheet = pck.Workbook.Worksheets["Sheet1"];
                    if (Sheet != null)
                    {
                        if (Sheet.Name == "Sheet1")
                        {
                            //最大列
                            int maxColumnNum = Sheet.Dimension.End.Column;
                            //最小列
                            int minColumnNum = Sheet.Dimension.Start.Column;
                            //最小行
                            int minRowNum = Sheet.Dimension.Start.Row;
                            //最大行
                            int maxRowNum = Sheet.Dimension.End.Row;
                            //开始行
                            int sRowNum = 10;
                            //结束行
                            int eRowNum = 0;
                            //区域A的开始栏位
                            int sAColNum = 1;
                            //区域A的结束栏位
                            int eAColNum = 14;
                            //S单号所在行
                            int SNum = 5;
                            string str = null;
                            //找到结束行
                            for (int i = 1; i <= maxRowNum; i++)
                            {
                                if ((CStr(Sheet.Cells[i, 1].Value)).Trim() == "总合计：")
                                {
                                    eRowNum = i;
                                    break;
                                }
                            }

                            string OrderDetailId = Sheet.Cells[SNum, 1].Value.ToString();
                            string OrderDetailId1 = OrderDetailId.Substring(7, 10);

                            for (int i = sRowNum; i <= eRowNum; i++)
                            {
                                DataRow orderDetailDataTableRow = orderDetailDataTable.NewRow();
                                object o = Sheet.Cells[i, 1].Value;
                                if (o == null || o.ToString() == "")
                                {
                                    continue;
                                }
                                str = o.ToString();
                                if (!System.Text.RegularExpressions.Regex.IsMatch(str.ToString(), @"^[-+]?[0-9]*\.?[0-9]+$"))
                                {
                                    continue;
                                }
                                orderDetailDataTableRow["OrderDetailId"] = OrderDetailId1;

                                for (int j = sAColNum; j <= eAColNum; j++)
                                {

                                    switch (j)
                                    {
                                        case 3:
                                            orderDetailDataTableRow["ProductName"] = Sheet.Cells[i, j].Value.ToString();
                                            break;
                                        case 4:
                                            orderDetailDataTableRow["CutLong"] = Sheet.Cells[i, j].Value.ToString();
                                            break;
                                        case 6:
                                            orderDetailDataTableRow["CutWide"] = Sheet.Cells[i, j].Value.ToString();
                                            break;
                                        case 7:
                                            orderDetailDataTableRow["CutThick"] = Sheet.Cells[i, j].Value.ToString();
                                            break;
                                        case 8:
                                            orderDetailDataTableRow["Qty"] = 1;
                                            //orderDetailDataTableRow["Qty"] = Sheet.Cells[i, j].Value.ToString();
                                            break;
                                        case 9:
                                            object Side1 = Sheet.Cells[i, j].Value;
                                            if (Side1 == null)
                                            {
                                                orderDetailDataTableRow["Side1"] = "";
                                            }
                                            else
                                            {
                                                orderDetailDataTableRow["Side1"] = Side1;
                                            }
                                            break;
                                        case 10:
                                            object Side2 = Sheet.Cells[i, j].Value;
                                            if (Side2 == null)
                                            {
                                                orderDetailDataTableRow["Side2"] = "";
                                            }
                                            else
                                            {
                                                orderDetailDataTableRow["Side2"] = Side2;
                                            }
                                            //orderDetailDataTableRow["Side2"] = Sheet.Cells[i, j].Value.ToString();
                                            break;
                                        case 11:
                                            object Side3 = Sheet.Cells[i, j].Value;
                                            if (Side3 == null)
                                            {
                                                orderDetailDataTableRow["Side3"] = "";
                                            }
                                            else
                                            {
                                                orderDetailDataTableRow["Side3"] = Side3;
                                            }
                                            //orderDetailDataTableRow["Side3"] = Sheet.Cells[i, j].Value.ToString();
                                            break;
                                        case 12:
                                            object Side4 = Sheet.Cells[i, j].Value;
                                            if (Side4 == null)
                                            {
                                                orderDetailDataTableRow["Side4"] = "";
                                            }
                                            else
                                            {
                                                orderDetailDataTableRow["Side4"] = Side4;
                                            }
                                            //orderDetailDataTableRow["Side4"] = Sheet.Cells[i, j].Value.ToString();
                                            break;
                                        case 13:
                                            orderDetailDataTableRow["CenterMaterials"] = Sheet.Cells[i, j].Value.ToString();
                                            break;
                                    }
                                }
                                for (int q = 0; q < Convert.ToInt32(Sheet.Cells[i, 8].Value); q++)
                                {
                                    orderDetailDataTable.Rows.Add(orderDetailDataTableRow.ItemArray);
                                }
                            }
                            SqlConnection con = new SqlConnection("Data Source=192.168.124.72;Initial Catalog=OrBitXI;Persist Security Info=True;User ID=sa;Password=admin@2017");
                            con.Open();

                            SqlCommand cmd = new SqlCommand();
                            cmd.CommandText = "Insert_CheckTicket";
                            cmd.Connection = con;
                            cmd.CommandType = CommandType.StoredProcedure;
                            SqlParameter[] para = new SqlParameter[]{
                                new SqlParameter("@Pro_CheckTicket",SqlDbType.Structured)
                                {
                                    Value=orderDetailDataTable
                                },
                                new SqlParameter("@OrderDetailId",SqlDbType.Char)
                                {
                                    Value=OrderDetailId1
                                }
                             };


                            cmd.Parameters.AddRange(para);
                            cmd.ExecuteNonQuery();
                            ////获取到存储过程返回的参数
                            cmd.Parameters.Add(new SqlParameter("@return", SqlDbType.Int));
                            cmd.Parameters["@return"].Direction = ParameterDirection.ReturnValue;
                            SqlDataReader reader = cmd.ExecuteReader();
                            //用来存放物料号和物料描述的新的datatable
                            DataTable dt1 = new DataTable();
                            dt1.Load(reader);


                            //存储过程返回0为true
                            if (Convert.ToInt32(cmd.Parameters["@return"].Value) == 0)
                            {
                                MessageBox.Show("数据相同");
                            }
                            else if (Convert.ToInt32(cmd.Parameters["@return"].Value) == -1)
                            {
                                MessageBox.Show("数据不相同");
                                Gridview.DataSource = dt1;
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }

        }
        /// <summary>
        /// 判断合并单元格获取值
        /// </summary>
        /// <param name="worksheet"></param>
        /// <param name="row">单元格行</param>
        /// <param name="column">单元格列</param>
        /// <returns></returns>
        public static string GetMergeValue(ExcelWorksheet worksheet, int row, int column)
        {
            string MergeValue = "";
            ExcelWorksheet.MergeCellsCollection<string> MergeCells = worksheet.MergedCells;
            for (int i = 0; i < MergeCells.Count; i++)
            {
                string range = MergeCells[i];
                ExcelAddress add = new ExcelAddress(range);
                int srow = add.Start.Row;//合并单元格开始行
                int scol = add.Start.Column;//合并单元格开始行
                int erow = add.End.Row;//合并单元格结束行
                int ecol = add.End.Column;//合并单元格结束行
                object value = worksheet.Cells[(new ExcelAddress(range)).Start.Row, (new ExcelAddress(range)).Start.Column].Value;
                if (row >= srow && row <= erow && column >= scol && column <= ecol)
                {
                    if (value == null || value.ToString() == "")
                    {
                        MergeValue = "";
                    }
                    else
                    {
                        MergeValue = value.ToString();
                    }
                    break;
                }
            }
            return MergeValue;
        }

        protected string CStr(object o) { return o != null ? o.ToString() : ""; }

    }


    /// <summary>
    /// 对比门板数据是否正确
    /// </summary>
    public class CheckTicketData2 : CheckTicketDoorSheet_ToSQL
    {

        public override void CheckTicketDoorSheetData(string Path, string ParentId, System.Windows.Forms.DataGridView Gridview)
        {


            //存储数据流
            FileStream Fs = new FileStream(Path, FileMode.Open, FileAccess.Read);

            //读取Excel
            using (ExcelPackage pck = new ExcelPackage(Fs))
            {
                //数据所在Sheet
                ExcelWorksheet Sheet = null;
                //打开的Sheet名
                Sheet = pck.Workbook.Worksheets["Sheet1"];
                if (Sheet != null)
                {
                    if (Sheet.Name == "Sheet1")
                    {
                        //最大列
                        int maxColumnNum = Sheet.Dimension.End.Column;
                        //最小列
                        int minColumnNum = Sheet.Dimension.Start.Column;
                        //最小行
                        int minRowNum = Sheet.Dimension.Start.Row;
                        //最大行
                        int maxRowNum = Sheet.Dimension.End.Row;
                        //开始行
                        int sRowNum = 9;
                        //结束行
                        int eRowNum = 0;
                        //区域A的开始栏位
                        int sAColNum = 1;
                        //区域A的结束栏位
                        int eAColNum = 11;
                        //S单号所在行
                        int SNum = 5;
                        string str = null;
                        //找到结束行
                        for (int i = 1; i <= maxRowNum; i++)
                        {
                            if ((CStr(Sheet.Cells[i, 1].Value)).Trim() == "总合计：")
                            {
                                eRowNum = i;
                                break;
                            }
                        }

                        string OrderDetailId = Sheet.Cells[SNum, 1].Value.ToString();
                        string OrderDetailId1 = OrderDetailId.Substring(7, 10);

                        for (int i = sRowNum; i <= eRowNum; i++)
                        {
                            DataRow orderDetailDataTableRow = orderDetailDataTable.NewRow();
                            object o = Sheet.Cells[i, 1].Value;
                            if (o == null || o.ToString() == "")
                            {
                                continue;
                            }
                            str = o.ToString();
                            if (!System.Text.RegularExpressions.Regex.IsMatch(str.ToString(), @"^[-+]?[0-9]*\.?[0-9]+$"))
                            {
                                continue;
                            }
                            orderDetailDataTableRow["OrderDetailId"] = OrderDetailId1;
                            orderDetailDataTableRow["Side1"] = 0;
                            orderDetailDataTableRow["Side2"] = 0;
                            orderDetailDataTableRow["Side3"] = 0;
                            orderDetailDataTableRow["Side4"] = 0;
                            for (int j = sAColNum; j <= eAColNum; j++)
                            {

                                switch (j)
                                {
                                    case 3:
                                        orderDetailDataTableRow["ProductName"] = Sheet.Cells[i, j].Value.ToString();
                                        break;
                                    case 5:
                                        orderDetailDataTableRow["FWide"] = Sheet.Cells[i, j].Value.ToString();
                                        break;
                                    case 6:
                                        orderDetailDataTableRow["FLong"] = Sheet.Cells[i, j].Value.ToString();
                                        break;
                                    case 8:
                                        orderDetailDataTableRow["CutWide"] = Sheet.Cells[i, j].Value.ToString();
                                        break;
                                    case 9:
                                        orderDetailDataTableRow["CutLong"] = Sheet.Cells[i, j].Value.ToString();
                                        break;
                                    case 10:
                                        orderDetailDataTableRow["Qty"] = 1;
                                        break;
                                    case 11:
                                        orderDetailDataTableRow["CenterMaterials"] = Sheet.Cells[i, j].Value.ToString();
                                        break;
                                }
                            }
                            for (int q = 0; q < Convert.ToInt32(Sheet.Cells[i, 10].Value); q++)
                            {
                                orderDetailDataTable.Rows.Add(orderDetailDataTableRow.ItemArray);
                            }
                        }
                        SqlConnection con = new SqlConnection("Data Source=192.168.124.72;Initial Catalog=OrBitXI;Persist Security Info=True;User ID=sa;Password=admin@2017");
                        con.Open();

                        SqlCommand cmd = new SqlCommand();
                        cmd.CommandText = "Insert_CheckTicketDoorSheet";
                        cmd.Connection = con;
                        cmd.CommandType = CommandType.StoredProcedure;
                        SqlParameter[] para = new SqlParameter[]{
                                new SqlParameter("@Pro_CheckTicketDoorSheet",SqlDbType.Structured)
                                {
                                    Value=orderDetailDataTable
                                },
                                new SqlParameter("@OrderDetailId",SqlDbType.Char)
                                {
                                    Value=OrderDetailId1
                                }
                             };


                        cmd.Parameters.AddRange(para);
                        cmd.ExecuteNonQuery();
                        ////获取到存储过程返回的参数
                        cmd.Parameters.Add(new SqlParameter("@return", SqlDbType.Int));
                        cmd.Parameters["@return"].Direction = ParameterDirection.ReturnValue;
                        SqlDataReader reader = cmd.ExecuteReader();
                        //用来存放物料号和物料描述的新的datatable
                        DataTable dt1 = new DataTable();
                        dt1.Load(reader);


                        //存储过程返回0为true
                        if (Convert.ToInt32(cmd.Parameters["@return"].Value) == 0)
                        {
                            MessageBox.Show("数据相同");
                        }
                        else if (Convert.ToInt32(cmd.Parameters["@return"].Value) == -1)
                        {
                            MessageBox.Show("数据不相同");
                            Gridview.DataSource = dt1;
                        }
                    }
                }
            }
        }
        /// <summary>
        /// 判断合并单元格获取值
        /// </summary>
        /// <param name="worksheet"></param>
        /// <param name="row">单元格行</param>
        /// <param name="column">单元格列</param>
        /// <returns></returns>
        public static string GetMergeValue(ExcelWorksheet worksheet, int row, int column)
        {
            string MergeValue = "";
            ExcelWorksheet.MergeCellsCollection<string> MergeCells = worksheet.MergedCells;
            for (int i = 0; i < MergeCells.Count; i++)
            {
                string range = MergeCells[i];
                ExcelAddress add = new ExcelAddress(range);
                int srow = add.Start.Row;//合并单元格开始行
                int scol = add.Start.Column;//合并单元格开始行
                int erow = add.End.Row;//合并单元格结束行
                int ecol = add.End.Column;//合并单元格结束行
                object value = worksheet.Cells[(new ExcelAddress(range)).Start.Row, (new ExcelAddress(range)).Start.Column].Value;
                if (row >= srow && row <= erow && column >= scol && column <= ecol)
                {
                    if (value == null || value.ToString() == "")
                    {
                        MergeValue = "";
                    }
                    else
                    {
                        MergeValue = value.ToString();
                    }
                    break;
                }
            }
            return MergeValue;
        }

        protected string CStr(object o) { return o != null ? o.ToString() : ""; }

    }





    /// <summary>
    /// 对比柜体领料单数据是否正确
    /// </summary>
    public class CheckCabinetTicketData : CheckTicketDoorSheet_ToSQL
    {

        public override void CheckTicketDoorSheetData(string Path, string ParentId, System.Windows.Forms.DataGridView Gridview)
        {


            //存储数据流
            FileStream Fs = new FileStream(Path, FileMode.Open, FileAccess.Read);

            //读取Excel
            using (ExcelPackage pck = new ExcelPackage(Fs))
            {
                //数据所在Sheet
                ExcelWorksheet Sheet = null;
                //打开的Sheet名
                Sheet = pck.Workbook.Worksheets["Sheet1"];
                if (Sheet != null)
                {
                    if (Sheet.Name == "Sheet1")
                    {
                        //最大列
                        int maxColumnNum = Sheet.Dimension.End.Column;
                        //最小列
                        int minColumnNum = Sheet.Dimension.Start.Column;
                        //最小行
                        int minRowNum = Sheet.Dimension.Start.Row;
                        //最大行
                        int maxRowNum = Sheet.Dimension.End.Row;
                        //开始行
                        int sRowNum = 9;
                        //结束行
                        int eRowNum = 0;
                        //区域A的开始栏位
                        int sAColNum = 1;
                        //区域A的结束栏位
                        int eAColNum = 11;
                        //S单号所在行
                        int SNum = 5;
                        string str = null;
                        //找到结束行
                        for (int i = 1; i <= maxRowNum; i++)
                        {
                            if ((CStr(Sheet.Cells[i, 1].Value)).Trim() == "总合计：")
                            {
                                eRowNum = i;
                                break;
                            }
                        }

                        string OrderDetailId = Sheet.Cells[SNum, 1].Value.ToString();
                        string OrderDetailId1 = OrderDetailId.Substring(7, 10);

                        for (int i = sRowNum; i <= eRowNum; i++)
                        {
                            DataRow orderDetailDataTableRow = orderDetailDataTable.NewRow();
                            object o = Sheet.Cells[i, 1].Value;
                            if (o == null || o.ToString() == "")
                            {
                                continue;
                            }
                            str = o.ToString();
                            if (!System.Text.RegularExpressions.Regex.IsMatch(str.ToString(), @"^[-+]?[0-9]*\.?[0-9]+$"))
                            {
                                continue;
                            }
                            orderDetailDataTableRow["OrderDetailId"] = OrderDetailId1;
                            orderDetailDataTableRow["Side1"] = 0;
                            orderDetailDataTableRow["Side2"] = 0;
                            orderDetailDataTableRow["Side3"] = 0;
                            orderDetailDataTableRow["Side4"] = 0;
                            for (int j = sAColNum; j <= eAColNum; j++)
                            {

                                switch (j)
                                {
                                    case 3:
                                        orderDetailDataTableRow["ProductName"] = Sheet.Cells[i, j].Value.ToString();
                                        break;
                                    case 5:
                                        orderDetailDataTableRow["FWide"] = Sheet.Cells[i, j].Value.ToString();
                                        break;
                                    case 6:
                                        orderDetailDataTableRow["FLong"] = Sheet.Cells[i, j].Value.ToString();
                                        break;
                                    case 8:
                                        orderDetailDataTableRow["CutWide"] = Sheet.Cells[i, j].Value.ToString();
                                        break;
                                    case 9:
                                        orderDetailDataTableRow["CutLong"] = Sheet.Cells[i, j].Value.ToString();
                                        break;
                                    case 10:
                                        orderDetailDataTableRow["Qty"] = 1;
                                        break;
                                    case 11:
                                        orderDetailDataTableRow["CenterMaterials"] = Sheet.Cells[i, j].Value.ToString();
                                        break;
                                }
                            }
                            for (int q = 0; q < Convert.ToInt32(Sheet.Cells[i, 10].Value); q++)
                            {
                                orderDetailDataTable.Rows.Add(orderDetailDataTableRow.ItemArray);
                            }
                        }
                        SqlConnection con = new SqlConnection("Data Source=192.168.124.72;Initial Catalog=OrBitXI;Persist Security Info=True;User ID=sa;Password=admin@2017");
                        con.Open();

                        SqlCommand cmd = new SqlCommand();
                        cmd.CommandText = "Insert_CheckTicketDoorSheet";
                        cmd.Connection = con;
                        cmd.CommandType = CommandType.StoredProcedure;
                        SqlParameter[] para = new SqlParameter[]{
                                new SqlParameter("@Pro_CheckTicketDoorSheet",SqlDbType.Structured)
                                {
                                    Value=orderDetailDataTable
                                },
                                new SqlParameter("@OrderDetailId",SqlDbType.Char)
                                {
                                    Value=OrderDetailId1
                                }
                             };


                        cmd.Parameters.AddRange(para);
                        cmd.ExecuteNonQuery();
                        ////获取到存储过程返回的参数
                        cmd.Parameters.Add(new SqlParameter("@return", SqlDbType.Int));
                        cmd.Parameters["@return"].Direction = ParameterDirection.ReturnValue;
                        SqlDataReader reader = cmd.ExecuteReader();
                        //用来存放物料号和物料描述的新的datatable
                        DataTable dt1 = new DataTable();
                        dt1.Load(reader);


                        //存储过程返回0为true
                        if (Convert.ToInt32(cmd.Parameters["@return"].Value) == 0)
                        {
                            MessageBox.Show("数据相同");
                        }
                        else if (Convert.ToInt32(cmd.Parameters["@return"].Value) == -1)
                        {
                            MessageBox.Show("数据不相同");
                            Gridview.DataSource = dt1;
                        }
                    }
                }
            }
        }
        /// <summary>
        /// 判断合并单元格获取值
        /// </summary>
        /// <param name="worksheet"></param>
        /// <param name="row">单元格行</param>
        /// <param name="column">单元格列</param>
        /// <returns></returns>
        public static string GetMergeValue(ExcelWorksheet worksheet, int row, int column)
        {
            string MergeValue = "";
            ExcelWorksheet.MergeCellsCollection<string> MergeCells = worksheet.MergedCells;
            for (int i = 0; i < MergeCells.Count; i++)
            {
                string range = MergeCells[i];
                ExcelAddress add = new ExcelAddress(range);
                int srow = add.Start.Row;//合并单元格开始行
                int scol = add.Start.Column;//合并单元格开始行
                int erow = add.End.Row;//合并单元格结束行
                int ecol = add.End.Column;//合并单元格结束行
                object value = worksheet.Cells[(new ExcelAddress(range)).Start.Row, (new ExcelAddress(range)).Start.Column].Value;
                if (row >= srow && row <= erow && column >= scol && column <= ecol)
                {
                    if (value == null || value.ToString() == "")
                    {
                        MergeValue = "";
                    }
                    else
                    {
                        MergeValue = value.ToString();
                    }
                    break;
                }
            }
            return MergeValue;
        }

        protected string CStr(object o) { return o != null ? o.ToString() : ""; }

    }




    /// <summary>
    /// 油漆+混油衣壁柜柜体数据导入SQL2018.7.4
    /// </summary>
    public class The_PaintDataToSQL : The_PaintToSQL
    {
        /// <summary>
        /// 判断合并单元格获取值
        /// </summary>
        /// <param name="worksheet"></param>
        /// <param name="row">单元格行</param>
        /// <param name="column">单元格列</param>
        /// <returns></returns>
        public static string GetMergeValue(ExcelWorksheet worksheet, int row, int column)
        {
            string MergeValue = "";
            ExcelWorksheet.MergeCellsCollection<string> MergeCells = worksheet.MergedCells;
            for (int i = 0; i < MergeCells.Count; i++)
            {
                string range = MergeCells[i];
                ExcelAddress add = new ExcelAddress(range);
                int srow = add.Start.Row;//合并单元格开始行
                int scol = add.Start.Column;//合并单元格开始列
                int erow = add.End.Row;//合并单元格结束行
                int ecol = add.End.Column;//合并单元格结束列
                object value = worksheet.Cells[(new ExcelAddress(range)).Start.Row, (new ExcelAddress(range)).Start.Column].Value;
                if (row >= srow && row <= erow && column >= scol && column <= ecol)
                {
                    if (value == null)
                    {
                        MergeValue = "";
                        break;
                    }
                    else
                    {
                        MergeValue = value.ToString();
                        break;
                    }
                }
            }
            return MergeValue;
        }
        protected string CStr(object o) { return o != null ? o.ToString() : ""; }

        public override void ReadThe_PaintToSQLData(string Path, string ParentId)
        {
            DataSet DS = new DataSet();
            try
            {
                //goto aa;
                //柜体Sheet页
                #region
                try
                {
                    FileStream FileGuiti = new FileStream(Path, FileMode.Open, FileAccess.Read);
                    using (ExcelPackage pck = new ExcelPackage(FileGuiti))
                    {
                        ExcelWorksheet sheet = null;
                        sheet = pck.Workbook.Worksheets["柜体"];
                        if (sheet.Hidden.ToString() == "Visible")
                        {
                            string hidden = sheet.Hidden.ToString();
                            int maxColumnNum = sheet.Dimension.End.Column;//最大列
                            int minColumnNum = sheet.Dimension.Start.Column;//最小列
                            int minRowNum = sheet.Dimension.Start.Row;//最小行
                            int maxRowNum = sheet.Dimension.End.Row;//最大行
                            int sRowNum = 8;//开始行
                            int eRowNum = 0;//结束行
                            if (Convert.ToString(sheet.Hidden) != "Hidden")
                            {
                                for (int i = sRowNum; i < maxRowNum; i++)
                                {
                                    string EndRow = Convert.ToString(sheet.Cells[i, 1].Value);
                                    if (EndRow.Trim() == "下料")
                                    {
                                        eRowNum = i;
                                        break;
                                    }
                                }

                                for (int i = sRowNum; i < eRowNum; i++)
                                {
                                    DataRow GuitiIssueMaterialBillsDataTableRow = MianQiYiBiGui_GuiTiDataTable.NewRow();
                                    GuitiIssueMaterialBillsDataTableRow["IssueMaterialBillsId"] = System.Guid.NewGuid().ToString().Substring(0, 12).ToUpper();
                                    GuitiIssueMaterialBillsDataTableRow["ProductOrderId"] = ParentId;
                                    string PlateType = Convert.ToString(sheet.Cells[1, 1].Value);
                                    GuitiIssueMaterialBillsDataTableRow["PlateType"] = PlateType.Substring(1, 4); ;//板件类型
                                    string Stytle = Convert.ToString(sheet.Cells[3, 5].Value);
                                    GuitiIssueMaterialBillsDataTableRow["Stytle"] = Stytle;//款式名称
                                    string MaterialNote = Convert.ToString(sheet.Cells[5, 2].Value);
                                    GuitiIssueMaterialBillsDataTableRow["MaterialNote"] = MaterialNote;//材质说明
                                    string Qty = Convert.ToString(sheet.Cells[i, 8].Value);
                                    if (Qty == "" || Qty == null)
                                    {
                                        continue;
                                    }
                                    else
                                    {
                                        if (System.Text.RegularExpressions.Regex.IsMatch(Qty, @"^[-+]?[0-9]*\.?[0-9]+$"))
                                        {
                                            if (Convert.ToSingle(Qty) > 0)
                                            {
                                                for (int j = 1; j < 11; j++)
                                                {
                                                    ExcelRange Rang = sheet.Cells[i, j];
                                                    object objectCellValue = sheet.GetValue(i, j);//单元格数据
                                                    string CellValue = objectCellValue != null ? objectCellValue.ToString().Trim() : "";
                                                    if (Rang.Merge)
                                                    {
                                                        CellValue = GetMergeValue(sheet, i, j);
                                                    }
                                                    switch (j)
                                                    {
                                                        case 1:
                                                            GuitiIssueMaterialBillsDataTableRow["CabinetNO"] = CellValue;
                                                            break;
                                                        case 2:
                                                            GuitiIssueMaterialBillsDataTableRow["PlateName"] = CellValue;
                                                            break;
                                                        case 3:
                                                            string ExcelValue4 = CStr(sheet.Cells[i, j].Value);
                                                            if (ExcelValue4 == "" || ExcelValue4 == null)
                                                            {
                                                                GuitiIssueMaterialBillsDataTableRow["FThick"] = "0";
                                                            }
                                                            else
                                                            {
                                                                GuitiIssueMaterialBillsDataTableRow["FThick"] = CellValue;
                                                            }
                                                            break;
                                                        case 4:
                                                            GuitiIssueMaterialBillsDataTableRow["CenterMaterials"] = CellValue;
                                                            break;
                                                        case 5:
                                                            GuitiIssueMaterialBillsDataTableRow["FaceConduct"] = CellValue;
                                                            break;
                                                        case 6:
                                                            string Wide = CStr(sheet.Cells[i, j].Value);
                                                            if (Wide == "" || Wide == null)
                                                            {
                                                                GuitiIssueMaterialBillsDataTableRow["CutWide"] = "0";
                                                            }
                                                            else
                                                            {
                                                                GuitiIssueMaterialBillsDataTableRow["CutWide"] = CellValue;
                                                            }
                                                            break;
                                                        case 7:
                                                            string High = CStr(sheet.Cells[i, j].Value);
                                                            if (High == "" || High == null)
                                                            {
                                                                GuitiIssueMaterialBillsDataTableRow["CutHigh"] = "0";
                                                            }
                                                            else
                                                            {
                                                                GuitiIssueMaterialBillsDataTableRow["CutHigh"] = CellValue;
                                                            }
                                                            break;
                                                        case 8:
                                                            GuitiIssueMaterialBillsDataTableRow["Qty"] = CellValue;
                                                            break;
                                                        case 9:
                                                            GuitiIssueMaterialBillsDataTableRow["SealingSide"] = CellValue;
                                                            break;
                                                        case 10:
                                                            GuitiIssueMaterialBillsDataTableRow["Remark"] = CellValue;
                                                            break;
                                                    }
                                                }
                                                MianQiYiBiGui_GuiTiDataTable.Rows.Add(GuitiIssueMaterialBillsDataTableRow);
                                            }
                                            else
                                            {
                                                continue;
                                            }
                                        }
                                    }
                                }
                                MianQiYiBiGui_GuiTiDataTable.TableName = "IssueMaterialBills1";
                                DS.Tables.Add(MianQiYiBiGui_GuiTiDataTable);
                            }
                        }
                    }
                }
                catch (Exception ex)
                {
                    throw ex;
                }

                #endregion
                //吸料Sheet页
                #region
                try
                {
                    FileStream Stream = new FileStream(Path, FileMode.Open, FileAccess.Read);
                    using (ExcelPackage pck = new ExcelPackage(Stream))
                    {
                        ExcelWorksheet Sheet = null;//数据所在Sheet
                        Sheet = pck.Workbook.Worksheets["吸料"];
                        if (Sheet != null)
                        {
                            if (Sheet.Hidden.ToString() == "Visible")
                            {
                                int maxColumnNum = Sheet.Dimension.End.Column;//最大列
                                int minColumnNum = Sheet.Dimension.Start.Column;//最小列
                                int minRowNum = Sheet.Dimension.Start.Row;//最小行
                                int maxRowNum = Sheet.Dimension.End.Row;//最大行
                                int sRowNum = 5;//开始行
                                int eRowNum = 0;//结束行
                                int sAColNum = 1;//区域A的开始栏位

                                if (Convert.ToString(Sheet.Hidden) != "Hidden")
                                {
                                    for (int i = sRowNum; i <= maxRowNum; i++)
                                    {
                                        string EndValue = Convert.ToString(Sheet.Cells[i, 1].Value);
                                        if (EndValue.Trim() == "制单人")
                                        {
                                            eRowNum = i;
                                            break;
                                        }
                                    }
                                    DataTable MaterialTable = new DataTable();
                                    MaterialTable.Columns.Add(string.Format("MaterialDescription"), Type.GetType("System.String"));
                                    MaterialTable.Columns.Add(string.Format("ProductName"), Type.GetType("System.String"));
                                    DataRow MaterialTableRow = MaterialTable.NewRow();
                                    //领料单读取
                                    for (int i = sRowNum; i <= eRowNum; i++)
                                    {
                                        string MaterialDescription = CStr(Sheet.Cells[i, 3].Value);
                                        if (MaterialDescription == null || MaterialDescription == "" || MaterialDescription == "物料描述")
                                        {
                                            continue;
                                        }
                                        else
                                        {
                                            MaterialTableRow["MaterialDescription"] = MaterialDescription;
                                            MaterialTable.Rows.Add(MaterialTableRow.ItemArray);
                                        }

                                    }
                                    SqlCommand cmd = new SqlCommand();
                                    SqlConnection con = new SqlConnection("Data Source=192.168.124.72;Initial Catalog=OrBitXI;User ID=sa;PassWord=admin@2017");
                                    con.Open();
                                    cmd.CommandText = "Pro_GetproductName";
                                    cmd.Connection = con;
                                    cmd.CommandType = CommandType.StoredProcedure;
                                    SqlParameter parm = new SqlParameter("@Pro_GetproductName", SqlDbType.Structured)
                                    {
                                        Value = MaterialTable
                                    };
                                    cmd.Parameters.Add(parm);
                                    cmd.ExecuteNonQuery();
                                    DataTable GetMaterialBillsTable = new DataTable();
                                    cmd.Parameters.Add(new SqlParameter("@return", SqlDbType.Int));
                                    cmd.Parameters["@return"].Direction = ParameterDirection.ReturnValue;
                                    SqlDataReader Datereader = cmd.ExecuteReader();
                                    GetMaterialBillsTable.Load(Datereader);

                                    for (int i = sRowNum; i < eRowNum; i++)
                                    {
                                        DataRow GetMaterialBillsDataTableRow = XiLiao_DataTable.NewRow();
                                        GetMaterialBillsDataTableRow["GetMaterialBillsId"] = System.Guid.NewGuid().ToString().Substring(0, 12).ToUpper();
                                        GetMaterialBillsDataTableRow["ProductOrderId"] = ParentId;
                                        //string Name = Convert.ToString(Sheet.Cells[i, 2].Value);
                                        //float Num =Convert.ToSingle( Sheet.Cells[i, 6].Value);
                                        string Num1 = Convert.ToString(Sheet.Cells[i, 4].Value);
                                        if (Num1 == "" || Num1 == null)
                                        {
                                            continue;
                                        }
                                        if (System.Text.RegularExpressions.Regex.IsMatch(Num1, @"^[-+]?[0-9]*\.?[0-9]+$"))
                                        {
                                            for (int j = sAColNum; j < 7; j++)
                                            {
                                                ExcelRange range = Sheet.Cells[i, j];
                                                object objectCellValue = Sheet.GetValue(i, j);//单元格数据
                                                string CellValue = objectCellValue != null ? objectCellValue.ToString().Trim() : "";
                                                if (range.Merge)
                                                {
                                                    CellValue = GetMergeValue(Sheet, i, j);
                                                }
                                                switch (j)
                                                {
                                                    case 1:
                                                        GetMaterialBillsDataTableRow["MaterialType"] = CellValue;
                                                        break;
                                                    //case 2:
                                                    //    string GuiGe = Convert.ToString(Sheet.Cells[i, 5].Value);
                                                    //    GetMaterialBillsDataTableRow["NumericalOrder"] = CellValue + GuiGe;
                                                    //    break;
                                                    case 3:
                                                        //GetMaterialBillsDataTableRow["ProductDesCription"] = CellValue;
                                                        for (int q = 0; q < GetMaterialBillsTable.Rows.Count; q++)
                                                        {
                                                            string SQLproductDescription = GetMaterialBillsTable.Rows[q]["ProductDescription"].ToString();
                                                            string ProductName = GetMaterialBillsTable.Rows[q]["ProductName"].ToString();
                                                            if (SQLproductDescription == CellValue)
                                                            {
                                                                GetMaterialBillsDataTableRow["ProductName"] = ProductName;
                                                                GetMaterialBillsDataTableRow["ProductDes"] = SQLproductDescription;
                                                            }
                                                        }
                                                        break;

                                                    //case 5:
                                                    //    GetMaterialBillsDataTableRow["MaterialType"] = CellValue;
                                                    //    break;
                                                    case 4:
                                                        GetMaterialBillsDataTableRow["Qty"] = CellValue;
                                                        break;
                                                    case 5:
                                                        GetMaterialBillsDataTableRow["Unit"] = CellValue;
                                                        break;
                                                    case 6:
                                                        GetMaterialBillsDataTableRow["PackingConfirmed"] = CellValue;
                                                        break;
                                                }
                                            }
                                            XiLiao_DataTable.Rows.Add(GetMaterialBillsDataTableRow);
                                        }
                                    }
                                    XiLiao_DataTable.TableName = "GetMaterialBills1";
                                    DS.Tables.Add(XiLiao_DataTable);
                                }
                            }
                        }
                    }
                }
                catch (Exception ex)
                {
                    throw ex;
                }

                #endregion
                //吸塑Sheet页
                #region
                try
                {
                    FileStream FStream = new FileStream(Path, FileMode.Open, FileAccess.Read);
                    using (ExcelPackage pck = new ExcelPackage(FStream))
                    {
                        try
                        {
                            ExcelWorksheet Sheet = null;//数据所在Sheet
                            Sheet = pck.Workbook.Worksheets["吸塑"];
                            if (Sheet != null)
                            {
                                if (Sheet.Hidden.ToString() == "Visible")
                                {
                                    int maxColumnNum = Sheet.Dimension.End.Column;//最大列
                                    int minColumnNum = Sheet.Dimension.Start.Column;//最小列
                                    int minRowNum = Sheet.Dimension.Start.Row;//最小行
                                    int maxRowNum = Sheet.Dimension.End.Row;//最大行
                                    int sRowNum = 7;//开始行
                                    int eRowNum = 0;//结束行
                                    string IsHidden = Convert.ToString(Sheet.Hidden);
                                    if (IsHidden != "Hidden")
                                    {
                                        for (int i = sRowNum; i < maxRowNum; i++)
                                        {
                                            string EndNum = Convert.ToString(Sheet.Cells[i, 1].Value);
                                            if (EndNum.Trim() == "下料")
                                            {
                                                eRowNum = i;
                                                break;
                                            }
                                        }
                                        for (int i = sRowNum; i < eRowNum; i++)
                                        {
                                            DataRow IssueMaterialBillsDataTableRow = XiSu_DataTable.NewRow();
                                            IssueMaterialBillsDataTableRow["IssueMaterialBillsId"] = System.Guid.NewGuid().ToString().Substring(0, 12).ToUpper();
                                            IssueMaterialBillsDataTableRow["ProductOrderId"] = ParentId;
                                            string Qty = Convert.ToString(Sheet.Cells[i, 8].Value);
                                            if (Qty == "" || Qty == null)
                                            {
                                                continue;
                                            }
                                            if (System.Text.RegularExpressions.Regex.IsMatch(Qty, @"^[-+]?[0-9]*\.?[0-9]+$"))
                                            {
                                                if (Convert.ToSingle(Qty) > 0)
                                                {
                                                    for (int j = 2; j < 11; j++)
                                                    {
                                                        ExcelRange range = Sheet.Cells[i, j];
                                                        object objectCellValue = Sheet.GetValue(i, j);//单元格数据
                                                        string CellValue = objectCellValue != null ? objectCellValue.ToString().Trim() : "";
                                                        if (range.Merge)
                                                        {
                                                            CellValue = GetMergeValue(Sheet, i, j);
                                                        }
                                                        switch (j)
                                                        {
                                                            case 2:
                                                                IssueMaterialBillsDataTableRow["PlateName"] = CellValue;
                                                                break;
                                                            case 3:
                                                                string Deth = CStr(Sheet.Cells[i, j].Value);
                                                                if (Deth == "" || Deth == null)
                                                                {
                                                                    IssueMaterialBillsDataTableRow["CutThick"] = "0";
                                                                }
                                                                else
                                                                {
                                                                    IssueMaterialBillsDataTableRow["CutThick"] = CellValue;
                                                                }
                                                                break;
                                                            case 4:
                                                                IssueMaterialBillsDataTableRow["CenterMaterials"] = CellValue;
                                                                break;
                                                            case 5:
                                                                IssueMaterialBillsDataTableRow["FaceConduct"] = CellValue;
                                                                break;
                                                            case 6:
                                                                string Wide = CStr(Sheet.Cells[i, j].Value);
                                                                if (Wide == "" || Wide == null)
                                                                {
                                                                    IssueMaterialBillsDataTableRow["CutWide"] = "0";
                                                                }
                                                                else
                                                                {
                                                                    IssueMaterialBillsDataTableRow["CutWide"] = CellValue;
                                                                }
                                                                //IssueMaterialBillsDataTableRow["Wide"] = CellValue;
                                                                break;
                                                            case 7:
                                                                string High = CStr(Sheet.Cells[i, j].Value);
                                                                if (High == "" || High == null)
                                                                {
                                                                    IssueMaterialBillsDataTableRow["CutHigh"] = "0";
                                                                }
                                                                else
                                                                {
                                                                    IssueMaterialBillsDataTableRow["CutHigh"] = CellValue;
                                                                }
                                                                //IssueMaterialBillsDataTableRow["High"] = CellValue;
                                                                break;
                                                            case 8:
                                                                IssueMaterialBillsDataTableRow["Qty"] = CellValue;
                                                                break;
                                                            //case 9:
                                                            //    IssueMaterialBillsDataTableRow["Side"] = CellValue;
                                                            //    break;
                                                            case 10:
                                                                IssueMaterialBillsDataTableRow["Remark"] = CellValue;
                                                                break;
                                                        }
                                                    }
                                                    XiSu_DataTable.Rows.Add(IssueMaterialBillsDataTableRow);
                                                }
                                            }
                                        }
                                        XiSu_DataTable.TableName = "IssueMaterialBills2";
                                        DS.Tables.Add(XiSu_DataTable);
                                    }
                                }
                            }
                        }
                        catch (Exception ex)
                        {
                            throw ex;
                        }
                    }
                }
                catch (Exception ex)
                {
                    throw ex;
                }

                #endregion
                //附页Sheet页
                #region
                try
                {
                    FileStream FiStream = new FileStream(Path, FileMode.Open, FileAccess.Read);
                    using (ExcelPackage pck = new ExcelPackage(FiStream))
                    {
                        try
                        {
                            ExcelWorksheet Sheet = null;//数据所在Sheet
                            Sheet = pck.Workbook.Worksheets["附页"];
                            if (Sheet.Hidden.ToString() == "Visible")
                            {
                                int maxColumnNum = Sheet.Dimension.End.Column;//最大列
                                int minColumnNum = Sheet.Dimension.Start.Column;//最小列
                                int minRowNum = Sheet.Dimension.Start.Row;//最小行
                                int maxRowNum = Sheet.Dimension.End.Row;//最大行
                                int sRowNum = 8;//开始行
                                int eRowNum = 0;//结束行

                                if (Convert.ToString(Sheet.Hidden) != "Hidden")
                                {
                                    for (int i = 8; i < maxRowNum; i++)
                                    {
                                        string Col1 = Convert.ToString(Sheet.Cells[i, 1].Value);
                                        if (Col1.Trim() == "下料")
                                        {
                                            eRowNum = i;
                                            break;
                                        }
                                    }
                                    for (int i = sRowNum; i < eRowNum; i++)
                                    {
                                        DataRow FuyeIssueMaterialBillsDataTableRow = MianQiYiBiGui_FuyeDataTable.NewRow();
                                        FuyeIssueMaterialBillsDataTableRow["IssueMaterialBillsId"] = System.Guid.NewGuid().ToString().Substring(0, 12).ToUpper();
                                        FuyeIssueMaterialBillsDataTableRow["ProductOrderId"] = ParentId;
                                        string PlateType = Convert.ToString(Sheet.Cells[1, 1].Value);
                                        FuyeIssueMaterialBillsDataTableRow["PlateType"] = PlateType.Trim().Substring(1, 4); ;//板件类型
                                        string Stytle = Convert.ToString(Sheet.Cells[3, 6].Value);
                                        FuyeIssueMaterialBillsDataTableRow["Stytle"] = Stytle;//款式名称
                                        string MaterialNote = Convert.ToString(Sheet.Cells[5, 2].Value);
                                        FuyeIssueMaterialBillsDataTableRow["MaterialNote"] = MaterialNote;//材质说明
                                        string Name = Convert.ToString(Sheet.Cells[i, 8].Value);
                                        if (Name == "" || Name == null)
                                        {
                                            continue;
                                        }
                                        if (System.Text.RegularExpressions.Regex.IsMatch(Name, @"^[-+]?[0-9]*\.?[0-9]+$"))
                                        {
                                            if (Convert.ToSingle(Name) > 0)
                                            {
                                                for (int j = 1; j < 11; j++)
                                                {
                                                    ExcelRange range = Sheet.Cells[i, j];
                                                    object objectCellValue = Sheet.GetValue(i, j);//单元格数据
                                                    string CellValue = objectCellValue != null ? objectCellValue.ToString().Trim() : "";
                                                    if (range.Merge)
                                                    {
                                                        CellValue = GetMergeValue(Sheet, i, j);
                                                    }
                                                    switch (j)
                                                    {
                                                        case 1:
                                                            FuyeIssueMaterialBillsDataTableRow["CabinetNO"] = CellValue;
                                                            break;
                                                        case 2:
                                                            FuyeIssueMaterialBillsDataTableRow["PlateName"] = CellValue;
                                                            break;
                                                        case 3:
                                                            string Deth = CStr(Sheet.Cells[i, j].Value);
                                                            if (Deth == "" || Deth == null)
                                                            {
                                                                FuyeIssueMaterialBillsDataTableRow["CutThick"] = "0";
                                                            }
                                                            else
                                                            {
                                                                FuyeIssueMaterialBillsDataTableRow["CutThick"] = CellValue;
                                                            }
                                                            //FuyeIssueMaterialBillsDataTableRow["Deth"] = CellValue;
                                                            break;
                                                        case 4:
                                                            FuyeIssueMaterialBillsDataTableRow["CenterMaterials"] = CellValue;
                                                            break;
                                                        case 5:
                                                            FuyeIssueMaterialBillsDataTableRow["FaceConduct"] = CellValue;
                                                            break;
                                                        case 6:
                                                            string Wide = CStr(Sheet.Cells[i, j].Value);
                                                            if (Wide == "" || Wide == null)
                                                            {
                                                                FuyeIssueMaterialBillsDataTableRow["CutWide"] = "0";
                                                            }
                                                            else
                                                            {
                                                                FuyeIssueMaterialBillsDataTableRow["CutWide"] = CellValue;
                                                            }
                                                            //FuyeIssueMaterialBillsDataTableRow["Wide"] = CellValue;
                                                            break;
                                                        case 7:
                                                            string High = CStr(Sheet.Cells[i, j].Value);
                                                            if (High == "" || High == null)
                                                            {
                                                                FuyeIssueMaterialBillsDataTableRow["CutHigh"] = "0";
                                                            }
                                                            else
                                                            {
                                                                FuyeIssueMaterialBillsDataTableRow["CutHigh"] = CellValue;
                                                            }
                                                            //FuyeIssueMaterialBillsDataTableRow["High"] = CellValue;
                                                            break;
                                                        case 8:
                                                            FuyeIssueMaterialBillsDataTableRow["Qty"] = CellValue;
                                                            break;
                                                        case 9:
                                                            FuyeIssueMaterialBillsDataTableRow["SealingSide"] = CellValue;
                                                            break;
                                                        case 10:
                                                            FuyeIssueMaterialBillsDataTableRow["Remark"] = CellValue;
                                                            break;
                                                    }
                                                }
                                                MianQiYiBiGui_FuyeDataTable.Rows.Add(FuyeIssueMaterialBillsDataTableRow);
                                            }
                                        }
                                    }
                                    MianQiYiBiGui_FuyeDataTable.TableName = "IssueMaterialBills3";
                                    DS.Tables.Add(MianQiYiBiGui_FuyeDataTable);
                                }
                            }
                        }
                        catch (Exception ex)
                        {
                            throw ex;
                        }
                    }
                }
                catch (Exception ex)
                {
                    throw ex;
                }

                #endregion
                //A6包装Sheet页
                #region
                try
                {
                    FileStream File = new FileStream(Path, FileMode.Open, FileAccess.Read);
                    using (ExcelPackage pck = new ExcelPackage(File))
                    {
                        ExcelWorksheet Sheet = null;//数据所在Sheet
                        Sheet = pck.Workbook.Worksheets["A6包装"];
                        if (Sheet != null)
                        {
                            if (Sheet.Hidden.ToString() == "Visible")
                            {
                                int maxColumnNum = Sheet.Dimension.End.Column;//最大列
                                int minColumnNum = Sheet.Dimension.Start.Column;//最小列
                                int minRowNum = Sheet.Dimension.Start.Row;//最小行
                                int maxRowNum = Sheet.Dimension.End.Row;//最大行
                                int sRowNum = 4;//开始行
                                int eRowNum = 0;//结束行
                                //List<int> list = new List<int>();
                                int[] list = new int[maxRowNum + 1];
                                if (Convert.ToString(Sheet.Hidden) != "Hidden")
                                {
                                    for (int i = sRowNum; i < maxRowNum; i++)
                                    {
                                        ExcelRange range = Sheet.Cells[i, 1];
                                        object objectCellValue = Sheet.GetValue(i, 1);//单元格数据
                                        string EndNum = objectCellValue != null ? objectCellValue.ToString().Trim() : "";
                                        if (range.Merge)
                                        {
                                            EndNum = GetMergeValue(Sheet, i, 1);
                                        }
                                        //string EndNum = Convert.ToString(Sheet.Cells[i, 1].Value);
                                        if (EndNum.Trim() == "注：1.如遇个别非标产品不在上表尺寸内，则选择最相近的用量使用。")
                                        {
                                            eRowNum = i;
                                            break;
                                        }
                                        if (EndNum.Trim() == "衣帽间、壁柜、家具类侧板、顶底板、层板包装材料明细" || EndNum.Trim() == "背板、门板、装饰侧板、门厅柜单板、非标类板件包装材料" || EndNum.Trim() == "衣帽间板式类标准内胆柜包装材料明细" || EndNum.Trim() == "非标类内胆柜包装材料明细" || EndNum.Trim() == "罗马柱、顶线、图兰朵盖板" || EndNum.Trim() == "推拉门、玻璃门包装材料明细（所有玻璃产品需使用硬包装）" || EndNum.Trim() == "序号")
                                        {
                                            list[i] = i;
                                        }
                                    }
                                    int TheDeliveryCateGoryId = 0;
                                    int TheDeliveryCateGoryId1 = 0;
                                    int TheDeliveryCateGoryId2 = 0;
                                    int TheDeliveryCateGoryId3 = 0;
                                    int TheDeliveryCateGoryId4 = 0;
                                    int TheDeliveryCateGoryId5 = 0;
                                    string TheDeliveryCateGory = "";
                                    for (int q = 4; q < eRowNum; q++)
                                    {
                                        if (list[q] == 0 || CStr(Sheet.Cells[list[q], 1].Value).Trim() == "序号")
                                        {
                                            continue;
                                        }
                                        TheDeliveryCateGory = CStr(Sheet.Cells[list[q], 1].Value).Trim();
                                        if (TheDeliveryCateGory == "衣帽间、壁柜、家具类侧板、顶底板、层板包装材料明细")
                                        {
                                            TheDeliveryCateGoryId = q;
                                        }
                                        if (TheDeliveryCateGory == "背板、门板、装饰侧板、门厅柜单板、非标类板件包装材料")
                                        {
                                            TheDeliveryCateGoryId1 = q;
                                        }
                                        if (TheDeliveryCateGory == "衣帽间板式类标准内胆柜包装材料明细")
                                        {
                                            TheDeliveryCateGoryId2 = q;
                                        }
                                        if (TheDeliveryCateGory == "非标类内胆柜包装材料明细")
                                        {
                                            TheDeliveryCateGoryId3 = q;
                                        }
                                        if (TheDeliveryCateGory == "罗马柱、顶线、图兰朵盖板")
                                        {
                                            TheDeliveryCateGoryId4 = q;
                                        }
                                        if (TheDeliveryCateGory == "推拉门、玻璃门包装材料明细（所有玻璃产品需使用硬包装）")
                                        {
                                            TheDeliveryCateGoryId5 = q;
                                        }
                                    }
                                    for (int i = sRowNum; i < eRowNum; i++)
                                    {
                                        DataRow Li_PackingListTableRow = A6Li_PackingListTable.NewRow();
                                        Li_PackingListTableRow["ProductOrderId"] = ParentId;
                                        ExcelRange rangPackingNum = Sheet.Cells[i, 6];
                                        object objectPackingNum = Sheet.GetValue(i, 6);//单元格数据
                                        string PackingNum = objectPackingNum != null ? objectPackingNum.ToString().Trim() : "";
                                        if (rangPackingNum.Merge)
                                        {
                                            PackingNum = GetMergeValue(Sheet, i, 6);
                                        }
                                        //string PackingNum = Convert.ToString(Sheet.Cells[i, 6].Value);
                                        if (PackingNum == "" || PackingNum == null || PackingNum == "包数" || list.Contains(i))
                                        {
                                            continue;
                                        }
                                        for (int j = 1; j < 12; j++)
                                        {
                                            ExcelRange rang = Sheet.Cells[i, j];
                                            object objectCellValue = Sheet.GetValue(i, j);//单元格数据
                                            string CellValue = objectCellValue != null ? objectCellValue.ToString().Trim() : "";
                                            if (rang.Merge)
                                            {
                                                CellValue = GetMergeValue(Sheet, i, j);
                                            }
                                            switch (j)
                                            {
                                                case 1:
                                                    Li_PackingListTableRow["PackingNumber"] = CellValue;
                                                    break;
                                                case 2:
                                                    Li_PackingListTableRow["Wide"] = CellValue;
                                                    break;
                                                case 3:
                                                    Li_PackingListTableRow["High"] = CellValue;
                                                    break;
                                                case 4:
                                                    Li_PackingListTableRow["Depth"] = CellValue;
                                                    break;
                                                case 5:
                                                    if (System.Text.RegularExpressions.Regex.IsMatch(CellValue.ToString(), @"^[-+]?[0-9]*\.?[0-9]+$"))
                                                    {
                                                        Li_PackingListTableRow["Quantity"] = Convert.ToInt32(CellValue);
                                                    }
                                                    else
                                                    {
                                                        Li_PackingListTableRow["Quantity"] = 0;
                                                    }
                                                    break;
                                                case 6:
                                                    Li_PackingListTableRow["Cell"] = CellValue;
                                                    break;
                                                case 7:
                                                    Li_PackingListTableRow["CabinetType"] = CellValue;
                                                    break;
                                                case 8:
                                                    Li_PackingListTableRow["NameOfPackagingMaterials"] = CellValue;
                                                    break;
                                                case 9:
                                                    Li_PackingListTableRow["MaterialCode"] = CellValue;
                                                    break;
                                                case 10:
                                                    if (System.Text.RegularExpressions.Regex.IsMatch(CellValue.ToString(), @"^[-+]?[0-9]*\.?[0-9]+$"))
                                                    {
                                                        Li_PackingListTableRow["Qty"] = CellValue;
                                                    }
                                                    else
                                                    {
                                                        Li_PackingListTableRow["PackingQuantity"] = CellValue;
                                                    }
                                                    break;
                                                case 11:
                                                    Li_PackingListTableRow["Unit"] = Sheet.Cells[i, j].Value;
                                                    break;
                                            }
                                        }
                                        if (i >= TheDeliveryCateGoryId && i < TheDeliveryCateGoryId1)
                                        {
                                            Li_PackingListTableRow["TheDeliveryCateGory"] = CStr(Sheet.Cells[TheDeliveryCateGoryId, 1].Value).Trim();
                                        }
                                        else if (i >= TheDeliveryCateGoryId1 && i < TheDeliveryCateGoryId2)
                                        {
                                            Li_PackingListTableRow["TheDeliveryCateGory"] = CStr(Sheet.Cells[TheDeliveryCateGoryId1, 1].Value).Trim();
                                        }
                                        else if (i >= TheDeliveryCateGoryId2 && i < TheDeliveryCateGoryId3)
                                        {
                                            Li_PackingListTableRow["TheDeliveryCateGory"] = CStr(Sheet.Cells[TheDeliveryCateGoryId2, 1].Value).Trim();
                                        }
                                        else if (i >= TheDeliveryCateGoryId3 && i < TheDeliveryCateGoryId4)
                                        {
                                            Li_PackingListTableRow["TheDeliveryCateGory"] = CStr(Sheet.Cells[TheDeliveryCateGoryId3, 1].Value).Trim();
                                        }
                                        else if (i >= TheDeliveryCateGoryId4 && i < TheDeliveryCateGoryId5)
                                        {
                                            Li_PackingListTableRow["TheDeliveryCateGory"] = CStr(Sheet.Cells[TheDeliveryCateGoryId4, 1].Value).Trim();
                                        }
                                        else if (i >= TheDeliveryCateGoryId5)
                                        {
                                            Li_PackingListTableRow["TheDeliveryCateGory"] = CStr(Sheet.Cells[TheDeliveryCateGoryId5, 1].Value).Trim();
                                        }
                                        A6Li_PackingListTable.Rows.Add(Li_PackingListTableRow);
                                    }
                                }
                                A6Li_PackingListTable.TableName = "A6Li_Packaging";
                                DS.Tables.Add(A6Li_PackingListTable);
                            }
                        }
                    }
                }
                catch (Exception ex)
                {
                    throw ex;
                }

                #endregion
                //料单Sheet页
                #region
                try
                {
                    FileStream Stream = new FileStream(Path, FileMode.Open, FileAccess.Read);
                    using (ExcelPackage pck = new ExcelPackage(Stream))
                    {
                        ExcelWorksheet Sheet = null;//数据所在Sheet
                        Sheet = pck.Workbook.Worksheets["料单"];
                        if (Sheet != null)
                        {
                            if (Sheet.Hidden.ToString() == "Visible")
                            {
                                int maxColumnNum = Sheet.Dimension.End.Column;//最大列
                                int minColumnNum = Sheet.Dimension.Start.Column;//最小列
                                int minRowNum = Sheet.Dimension.Start.Row;//最小行
                                int maxRowNum = Sheet.Dimension.End.Row;//最大行
                                int sRowNum = 5;//开始行
                                int eRowNum = 0;//结束行
                                int sAColNum = 1;//区域A的开始栏位

                                if (Convert.ToString(Sheet.Hidden) != "Hidden")
                                {
                                    for (int i = sRowNum; i <= maxRowNum; i++)
                                    {
                                        string EndValue = Convert.ToString(Sheet.Cells[i, 1].Value);
                                        if (EndValue.Trim() == "拆解员：")
                                        {
                                            eRowNum = i;
                                            break;
                                        }
                                    }
                                    DataTable MaterialTable = new DataTable();
                                    MaterialTable.Columns.Add(string.Format("MaterialDescription"), Type.GetType("System.String"));
                                    MaterialTable.Columns.Add(string.Format("ProductName"), Type.GetType("System.String"));
                                    DataRow MaterialTableRow = MaterialTable.NewRow();
                                    //领料单读取
                                    for (int i = sRowNum; i <= eRowNum; i++)
                                    {
                                        string MaterialDescription = CStr(Sheet.Cells[i, 3].Value);
                                        if (MaterialDescription == null || MaterialDescription == "" || MaterialDescription == "物料描述")
                                        {
                                            continue;
                                        }
                                        else
                                        {
                                            MaterialTableRow["MaterialDescription"] = MaterialDescription;
                                            MaterialTable.Rows.Add(MaterialTableRow.ItemArray);
                                        }

                                    }
                                    SqlCommand cmd = new SqlCommand();
                                    SqlConnection con = new SqlConnection("Data Source=192.168.124.72;Initial Catalog=OrBitXI;User ID=sa;PassWord=admin@2017");
                                    con.Open();
                                    cmd.CommandText = "Pro_GetproductName";
                                    cmd.Connection = con;
                                    cmd.CommandType = CommandType.StoredProcedure;
                                    SqlParameter parm = new SqlParameter("@Pro_GetproductName", SqlDbType.Structured)
                                    {
                                        Value = MaterialTable
                                    };
                                    cmd.Parameters.Add(parm);
                                    cmd.ExecuteNonQuery();
                                    DataTable GetMaterialBillsTable = new DataTable();
                                    cmd.Parameters.Add(new SqlParameter("@return", SqlDbType.Int));
                                    cmd.Parameters["@return"].Direction = ParameterDirection.ReturnValue;
                                    SqlDataReader Datereader = cmd.ExecuteReader();
                                    GetMaterialBillsTable.Load(Datereader);

                                    for (int i = sRowNum; i < eRowNum; i++)
                                    {
                                        DataRow GetMaterialBillsDataTableRow = MianQiYiBiGui_LiaoDanDataTable.NewRow();
                                        GetMaterialBillsDataTableRow["GetMaterialBillsId"] = System.Guid.NewGuid().ToString().Substring(0, 12).ToUpper();
                                        GetMaterialBillsDataTableRow["ProductOrderId"] = ParentId;
                                        //string Name = Convert.ToString(Sheet.Cells[i, 2].Value);
                                        //float Num =Convert.ToSingle( Sheet.Cells[i, 6].Value);
                                        string Num1 = Convert.ToString(Sheet.Cells[i, 4].Value);
                                        if (Num1 == "" || Num1 == null)
                                        {
                                            continue;
                                        }
                                        if (System.Text.RegularExpressions.Regex.IsMatch(Num1, @"^[-+]?[0-9]*\.?[0-9]+$"))
                                        {
                                            for (int j = sAColNum; j < 7; j++)
                                            {
                                                ExcelRange range = Sheet.Cells[i, j];
                                                object objectCellValue = Sheet.GetValue(i, j);//单元格数据
                                                string CellValue = objectCellValue != null ? objectCellValue.ToString().Trim() : "";
                                                if (range.Merge)
                                                {
                                                    CellValue = GetMergeValue(Sheet, i, j);
                                                }
                                                switch (j)
                                                {
                                                    case 1:
                                                        GetMaterialBillsDataTableRow["MaterialType"] = CellValue;
                                                        break;
                                                    case 2:
                                                        //string GuiGe = Convert.ToString(Sheet.Cells[i, 5].Value);
                                                        GetMaterialBillsDataTableRow["NumericalOrder"] = CellValue;
                                                        break;
                                                    case 3:
                                                        //GetMaterialBillsDataTableRow["ProductDesCription"] = CellValue;
                                                        for (int q = 0; q < GetMaterialBillsTable.Rows.Count; q++)
                                                        {
                                                            string SQLproductDescription = GetMaterialBillsTable.Rows[q]["ProductDescription"].ToString();
                                                            string ProductName = GetMaterialBillsTable.Rows[q]["ProductName"].ToString();
                                                            if (SQLproductDescription == CellValue)
                                                            {
                                                                GetMaterialBillsDataTableRow["ProductName"] = ProductName;
                                                                GetMaterialBillsDataTableRow["ProductDes"] = SQLproductDescription;
                                                            }
                                                        }
                                                        break;

                                                    //case 5:
                                                    //    GetMaterialBillsDataTableRow["MaterialType"] = CellValue;
                                                    //    break;
                                                    case 4:
                                                        GetMaterialBillsDataTableRow["Qty"] = CellValue;
                                                        break;
                                                    case 5:
                                                        GetMaterialBillsDataTableRow["Unit"] = CellValue;
                                                        break;
                                                    case 6:
                                                        GetMaterialBillsDataTableRow["PackingConfirmed"] = CellValue;
                                                        break;
                                                }
                                            }
                                            MianQiYiBiGui_LiaoDanDataTable.Rows.Add(GetMaterialBillsDataTableRow);
                                        }
                                    }
                                    MianQiYiBiGui_LiaoDanDataTable.TableName = "GetMaterialBills3";
                                    DS.Tables.Add(MianQiYiBiGui_LiaoDanDataTable);
                                }
                            }
                        }
                    }
                }
                catch (Exception ex)
                {
                    throw ex;
                }

                #endregion
                //装箱清单Sheet页
                #region
                try
                {
                    FileStream Stream = new FileStream(Path, FileMode.Open, FileAccess.Read);
                    using (ExcelPackage pck = new ExcelPackage(Stream))
                    {
                        ExcelWorksheet Sheet = null;//数据所在Sheet
                        Sheet = pck.Workbook.Worksheets["装箱清单"];
                        if (Sheet != null)
                        {
                            if (Sheet.Hidden.ToString() == "Visible")
                            {
                                int maxColumnNum = Sheet.Dimension.End.Column;//最大列
                                int minColumnNum = Sheet.Dimension.Start.Column;//最小列
                                int minRowNum = Sheet.Dimension.Start.Row;//最小行
                                int maxRowNum = Sheet.Dimension.End.Row;//最大行
                                int sRowNum = 5;//开始行
                                int eRowNum = 0;//结束行
                                int sAColNum = 1;//区域A的开始栏位

                                if (Convert.ToString(Sheet.Hidden) != "Hidden")
                                {
                                    for (int i = sRowNum; i <= maxRowNum; i++)
                                    {
                                        string EndValue = Convert.ToString(Sheet.Cells[i, 1].Value);
                                        if (EndValue.Replace(" ", "") == "拆解员：装箱员：")
                                        {
                                            eRowNum = i;
                                            break;
                                        }
                                    }
                                    DataTable MaterialTable = new DataTable();
                                    MaterialTable.Columns.Add(string.Format("MaterialDescription"), Type.GetType("System.String"));
                                    MaterialTable.Columns.Add(string.Format("ProductName"), Type.GetType("System.String"));
                                    DataRow MaterialTableRow = MaterialTable.NewRow();
                                    //领料单读取
                                    for (int i = sRowNum; i <= eRowNum; i++)
                                    {
                                        string MaterialDescription = CStr(Sheet.Cells[i, 3].Value);
                                        if (MaterialDescription == null || MaterialDescription == "" || MaterialDescription == "物料描述")
                                        {
                                            continue;
                                        }
                                        else
                                        {
                                            MaterialTableRow["MaterialDescription"] = MaterialDescription;
                                            MaterialTable.Rows.Add(MaterialTableRow.ItemArray);
                                        }

                                    }
                                    SqlCommand cmd = new SqlCommand();
                                    SqlConnection con = new SqlConnection("Data Source=192.168.124.72;Initial Catalog=OrBitXI;User ID=sa;PassWord=admin@2017");
                                    con.Open();
                                    cmd.CommandText = "Pro_GetproductName";
                                    cmd.Connection = con;
                                    cmd.CommandType = CommandType.StoredProcedure;
                                    SqlParameter parm = new SqlParameter("@Pro_GetproductName", SqlDbType.Structured)
                                    {
                                        Value = MaterialTable
                                    };
                                    cmd.Parameters.Add(parm);
                                    cmd.ExecuteNonQuery();
                                    DataTable GetMaterialBillsTable = new DataTable();
                                    cmd.Parameters.Add(new SqlParameter("@return", SqlDbType.Int));
                                    cmd.Parameters["@return"].Direction = ParameterDirection.ReturnValue;
                                    SqlDataReader Datereader = cmd.ExecuteReader();
                                    GetMaterialBillsTable.Load(Datereader);

                                    for (int i = sRowNum; i < eRowNum; i++)
                                    {
                                        DataRow GetMaterialBillsDataTableRow = MianQiYiBiGui_ZhuangXiangQingDanDataTable.NewRow();
                                        GetMaterialBillsDataTableRow["GetMaterialBillsId"] = System.Guid.NewGuid().ToString().Substring(0, 12).ToUpper();
                                        GetMaterialBillsDataTableRow["ProductOrderId"] = ParentId;
                                        //string Name = Convert.ToString(Sheet.Cells[i, 2].Value);
                                        //float Num =Convert.ToSingle( Sheet.Cells[i, 6].Value);
                                        string Num1 = Convert.ToString(Sheet.Cells[i, 4].Value);
                                        if (Num1 == "" || Num1 == null)
                                        {
                                            continue;
                                        }
                                        if (System.Text.RegularExpressions.Regex.IsMatch(Num1, @"^[-+]?[0-9]*\.?[0-9]+$"))
                                        {
                                            for (int j = sAColNum; j < 7; j++)
                                            {
                                                ExcelRange range = Sheet.Cells[i, j];
                                                object objectCellValue = Sheet.GetValue(i, j);//单元格数据
                                                string CellValue = objectCellValue != null ? objectCellValue.ToString().Trim() : "";
                                                if (range.Merge)
                                                {
                                                    CellValue = GetMergeValue(Sheet, i, j);
                                                }
                                                switch (j)
                                                {
                                                    case 1:
                                                        GetMaterialBillsDataTableRow["MaterialType"] = CellValue;
                                                        break;
                                                    case 2:
                                                        //string GuiGe = Convert.ToString(Sheet.Cells[i, 5].Value);
                                                        GetMaterialBillsDataTableRow["NumericalOrder"] = CellValue;
                                                        break;
                                                    case 3:
                                                        //GetMaterialBillsDataTableRow["ProductDesCription"] = CellValue;
                                                        for (int q = 0; q < GetMaterialBillsTable.Rows.Count; q++)
                                                        {
                                                            string SQLproductDescription = GetMaterialBillsTable.Rows[q]["ProductDescription"].ToString();
                                                            string ProductName = GetMaterialBillsTable.Rows[q]["ProductName"].ToString();
                                                            if (SQLproductDescription == CellValue)
                                                            {
                                                                GetMaterialBillsDataTableRow["ProductName"] = ProductName;
                                                                GetMaterialBillsDataTableRow["ProductDes"] = SQLproductDescription;
                                                            }
                                                        }
                                                        break;

                                                    //case 5:
                                                    //    GetMaterialBillsDataTableRow["MaterialType"] = CellValue;
                                                    //    break;
                                                    case 4:
                                                        GetMaterialBillsDataTableRow["Qty"] = CellValue;
                                                        break;
                                                    case 5:
                                                        GetMaterialBillsDataTableRow["Unit"] = CellValue;
                                                        break;
                                                    case 6:
                                                        GetMaterialBillsDataTableRow["PackingConfirmed"] = CellValue;
                                                        break;
                                                }
                                            }
                                            MianQiYiBiGui_ZhuangXiangQingDanDataTable.Rows.Add(GetMaterialBillsDataTableRow);
                                        }
                                    }
                                    MianQiYiBiGui_ZhuangXiangQingDanDataTable.TableName = "GetMaterialBills4";
                                    DS.Tables.Add(MianQiYiBiGui_ZhuangXiangQingDanDataTable);
                                }
                            }
                        }
                    }
                }
                catch (Exception ex)
                {
                    throw ex;
                }
                #endregion
                //速美包装Sheet页
                #region
                try
                {
                    FileStream File = new FileStream(Path, FileMode.Open, FileAccess.Read);
                    using (ExcelPackage pck = new ExcelPackage(File))
                    {
                        ExcelWorksheet Sheet = null;//数据所在Sheet
                        Sheet = pck.Workbook.Worksheets["速美包装"];
                        if (Sheet != null)
                        {
                            if (Sheet.Hidden.ToString() == "Visible")
                            {
                                int maxColumnNum = Sheet.Dimension.End.Column;//最大列
                                int minColumnNum = Sheet.Dimension.Start.Column;//最小列
                                int minRowNum = Sheet.Dimension.Start.Row;//最小行
                                int maxRowNum = Sheet.Dimension.End.Row;//最大行
                                int sRowNum = 4;//开始行
                                int eRowNum = 0;//结束行
                                //List<int> list = new List<int>();
                                int[] list = new int[maxRowNum + 1];
                                if (Convert.ToString(Sheet.Hidden) != "Hidden")
                                {
                                    for (int i = sRowNum; i < maxRowNum; i++)
                                    {
                                        ExcelRange range = Sheet.Cells[i, 1];
                                        object objectCellValue = Sheet.GetValue(i, 1);//单元格数据
                                        string EndNum = objectCellValue != null ? objectCellValue.ToString().Trim() : "";
                                        if (range.Merge)
                                        {
                                            EndNum = GetMergeValue(Sheet, i, 1);
                                        }
                                        //string EndNum = Convert.ToString(Sheet.Cells[i, 1].Value);
                                        if (EndNum.Trim() == "注：1.如遇个别非标产品不在上表尺寸内，则选择最相近的用量使用。")
                                        {
                                            eRowNum = i;
                                            break;
                                        }
                                        if (EndNum.Trim() == "衣帽间、壁柜、家具类侧板、顶底板、层板包装材料明细" || EndNum.Trim() == "背板、门板、装饰侧板、门厅柜单板、非标类板件包装材料" || EndNum.Trim() == "衣帽间板式类标准内胆柜包装材料明细" || EndNum.Trim() == "非标类内胆柜包装材料明细" || EndNum.Trim() == "罗马柱、顶线、图兰朵盖板" || EndNum.Trim() == "推拉门、玻璃门包装材料明细（所有玻璃产品需使用硬包装）" || EndNum.Trim() == "序号")
                                        {
                                            list[i] = i;
                                        }
                                    }
                                    int TheDeliveryCateGoryId = 0;
                                    int TheDeliveryCateGoryId1 = 0;
                                    int TheDeliveryCateGoryId2 = 0;
                                    int TheDeliveryCateGoryId3 = 0;
                                    int TheDeliveryCateGoryId4 = 0;
                                    int TheDeliveryCateGoryId5 = 0;
                                    string TheDeliveryCateGory = "";
                                    for (int q = 4; q < eRowNum; q++)
                                    {
                                        if (list[q] == 0 || CStr(Sheet.Cells[list[q], 1].Value).Trim() == "序号")
                                        {
                                            continue;
                                        }
                                        TheDeliveryCateGory = CStr(Sheet.Cells[list[q], 1].Value).Trim();
                                        if (TheDeliveryCateGory == "衣帽间、壁柜、家具类侧板、顶底板、层板包装材料明细")
                                        {
                                            TheDeliveryCateGoryId = q;
                                        }
                                        if (TheDeliveryCateGory == "背板、门板、装饰侧板、门厅柜单板、非标类板件包装材料")
                                        {
                                            TheDeliveryCateGoryId1 = q;
                                        }
                                        if (TheDeliveryCateGory == "衣帽间板式类标准内胆柜包装材料明细")
                                        {
                                            TheDeliveryCateGoryId2 = q;
                                        }
                                        if (TheDeliveryCateGory == "非标类内胆柜包装材料明细")
                                        {
                                            TheDeliveryCateGoryId3 = q;
                                        }
                                        if (TheDeliveryCateGory == "罗马柱、顶线、图兰朵盖板")
                                        {
                                            TheDeliveryCateGoryId4 = q;
                                        }
                                        if (TheDeliveryCateGory == "推拉门、玻璃门包装材料明细（所有玻璃产品需使用硬包装）")
                                        {
                                            TheDeliveryCateGoryId5 = q;
                                        }
                                    }
                                    for (int i = sRowNum; i < eRowNum; i++)
                                    {
                                        DataRow Li_PackingListTableRow = SuMeiPackingListTable.NewRow();
                                        Li_PackingListTableRow["ProductOrderId"] = ParentId;
                                        string PackingNum = Convert.ToString(Sheet.Cells[i, 6].Value);
                                        if (PackingNum == "" || PackingNum == null || PackingNum == "包数")
                                        {
                                            continue;
                                        }
                                        for (int j = 1; j < 12; j++)
                                        {
                                            ExcelRange rang = Sheet.Cells[i, j];
                                            object objectCellValue = Sheet.GetValue(i, j);//单元格数据
                                            string CellValue = objectCellValue != null ? objectCellValue.ToString().Trim() : "";
                                            if (rang.Merge)
                                            {
                                                CellValue = GetMergeValue(Sheet, i, j);
                                            }
                                            switch (j)
                                            {
                                                case 1:
                                                    Li_PackingListTableRow["PackingNumber"] = CellValue;
                                                    break;
                                                case 2:
                                                    Li_PackingListTableRow["Wide"] = CellValue;
                                                    break;
                                                case 3:
                                                    Li_PackingListTableRow["High"] = CellValue;
                                                    break;
                                                case 4:
                                                    Li_PackingListTableRow["Depth"] = CellValue;
                                                    break;
                                                case 5:
                                                    if (System.Text.RegularExpressions.Regex.IsMatch(CellValue.ToString(), @"^[-+]?[0-9]*\.?[0-9]+$"))
                                                    {
                                                        Li_PackingListTableRow["Quantity"] = Convert.ToInt32(CellValue);
                                                    }
                                                    else
                                                    {
                                                        Li_PackingListTableRow["Quantity"] = 0;
                                                    }
                                                    break;
                                                case 6:
                                                    Li_PackingListTableRow["Cell"] = CellValue;
                                                    break;
                                                case 7:
                                                    Li_PackingListTableRow["CabinetType"] = CellValue;
                                                    break;
                                                case 8:
                                                    Li_PackingListTableRow["NameOfPackagingMaterials"] = CellValue;
                                                    break;
                                                case 9:
                                                    Li_PackingListTableRow["MaterialCode"] = CellValue;
                                                    break;
                                                case 10:
                                                    if (System.Text.RegularExpressions.Regex.IsMatch(CellValue.ToString(), @"^[-+]?[0-9]*\.?[0-9]+$"))
                                                    {
                                                        Li_PackingListTableRow["Qty"] = CellValue;
                                                    }
                                                    else
                                                    {
                                                        Li_PackingListTableRow["PackingQuantity"] = CellValue;
                                                    }
                                                    break;
                                                case 11:
                                                    Li_PackingListTableRow["Unit"] = Sheet.Cells[i, j].Value;
                                                    break;
                                            }
                                        }
                                        if (i >= TheDeliveryCateGoryId && i < TheDeliveryCateGoryId1)
                                        {
                                            Li_PackingListTableRow["TheDeliveryCateGory"] = CStr(Sheet.Cells[TheDeliveryCateGoryId, 1].Value).Trim();
                                        }
                                        else if (i >= TheDeliveryCateGoryId1 && i < TheDeliveryCateGoryId2)
                                        {
                                            Li_PackingListTableRow["TheDeliveryCateGory"] = CStr(Sheet.Cells[TheDeliveryCateGoryId1, 1].Value).Trim();
                                        }
                                        else if (i >= TheDeliveryCateGoryId2 && i < TheDeliveryCateGoryId3)
                                        {
                                            Li_PackingListTableRow["TheDeliveryCateGory"] = CStr(Sheet.Cells[TheDeliveryCateGoryId2, 1].Value).Trim();
                                        }
                                        else if (i >= TheDeliveryCateGoryId3 && i < TheDeliveryCateGoryId4)
                                        {
                                            Li_PackingListTableRow["TheDeliveryCateGory"] = CStr(Sheet.Cells[TheDeliveryCateGoryId3, 1].Value).Trim();
                                        }
                                        else if (i >= TheDeliveryCateGoryId4 && i < TheDeliveryCateGoryId5)
                                        {
                                            Li_PackingListTableRow["TheDeliveryCateGory"] = CStr(Sheet.Cells[TheDeliveryCateGoryId4, 1].Value).Trim();
                                        }
                                        else if (i >= TheDeliveryCateGoryId5)
                                        {
                                            Li_PackingListTableRow["TheDeliveryCateGory"] = CStr(Sheet.Cells[TheDeliveryCateGoryId5, 1].Value).Trim();
                                        }
                                        SuMeiPackingListTable.Rows.Add(Li_PackingListTableRow);
                                    }
                                }
                                SuMeiPackingListTable.TableName = "SuMeiLi_Packaging";
                                DS.Tables.Add(SuMeiPackingListTable);
                            }
                        }
                    }
                }
                catch (Exception ex)
                {
                    throw ex;
                }
                #endregion
            //油漆包装Sheet页
                #region
            //aa:
                try
                {
                    FileStream File = new FileStream(Path, FileMode.Open, FileAccess.Read);
                    using (ExcelPackage pck = new ExcelPackage(File))
                    {
                        ExcelWorksheet Sheet = null;//数据所在Sheet
                        Sheet = pck.Workbook.Worksheets["油漆包装"];
                        if (Sheet != null)
                        {
                            if (Sheet.Hidden.ToString() == "Visible")
                            {
                                int maxColumnNum = Sheet.Dimension.End.Column;//最大列
                                int minColumnNum = Sheet.Dimension.Start.Column;//最小列
                                int minRowNum = Sheet.Dimension.Start.Row;//最小行
                                int maxRowNum = Sheet.Dimension.End.Row;//最大行
                                int sRowNum = 4;//开始行
                                int eRowNum = 0;//结束行
                                //List<int> list = new List<int>();
                                int[] list = new int[maxRowNum + 1];
                                if (Convert.ToString(Sheet.Hidden) != "Hidden")
                                {
                                    for (int i = sRowNum; i < maxRowNum; i++)
                                    {
                                        ExcelRange range = Sheet.Cells[i, 1];
                                        object objectCellValue = Sheet.GetValue(i, 1);//单元格数据
                                        string EndNum = objectCellValue != null ? objectCellValue.ToString().Trim() : "";
                                        if (range.Merge)
                                        {
                                            EndNum = GetMergeValue(Sheet, i, 1);
                                        }
                                        //string EndNum = Convert.ToString(Sheet.Cells[i, 1].Value);
                                        if (EndNum.Trim() == "注：1.如遇个别非标产品不在上表尺寸内，则选择最相近的用量使用。")
                                        {
                                            eRowNum = i;
                                            break;
                                        }
                                        if (EndNum.Trim() == "衣帽间、壁柜、家具类侧板、顶底板、层板包装材料明细" || EndNum.Trim() == "背板、门板、装饰侧板、门厅柜单板、非标类板件包装材料" || EndNum.Trim() == "衣帽间板式类标准内胆柜包装材料明细" || EndNum.Trim() == "非标类内胆柜包装材料明细" || EndNum.Trim() == "罗马柱、顶线、图兰朵盖板" || EndNum.Trim() == "推拉门、玻璃门包装材料明细（所有玻璃产品需使用硬包装）" || EndNum.Trim() == "序号")
                                        {
                                            list[i] = i;
                                        }
                                    }
                                    int TheDeliveryCateGoryId = 0;
                                    int TheDeliveryCateGoryId1 = 0;
                                    int TheDeliveryCateGoryId2 = 0;
                                    int TheDeliveryCateGoryId3 = 0;
                                    int TheDeliveryCateGoryId4 = 0;
                                    int TheDeliveryCateGoryId5 = 0;
                                    string TheDeliveryCateGory = "";
                                    for (int q = 4; q < eRowNum; q++)
                                    {
                                        if (list[q] == 0 || CStr(Sheet.Cells[list[q], 1].Value).Trim() == "序号")
                                        {
                                            continue;
                                        }
                                        TheDeliveryCateGory = CStr(Sheet.Cells[list[q], 1].Value).Trim();
                                        if (TheDeliveryCateGory == "衣帽间、壁柜、家具类侧板、顶底板、层板包装材料明细")
                                        {
                                            TheDeliveryCateGoryId = q;
                                        }
                                        if (TheDeliveryCateGory == "背板、门板、装饰侧板、门厅柜单板、非标类板件包装材料")
                                        {
                                            TheDeliveryCateGoryId1 = q;
                                        }
                                        if (TheDeliveryCateGory == "衣帽间板式类标准内胆柜包装材料明细")
                                        {
                                            TheDeliveryCateGoryId2 = q;
                                        }
                                        if (TheDeliveryCateGory == "非标类内胆柜包装材料明细")
                                        {
                                            TheDeliveryCateGoryId3 = q;
                                        }
                                        if (TheDeliveryCateGory == "罗马柱、顶线、图兰朵盖板")
                                        {
                                            TheDeliveryCateGoryId4 = q;
                                        }
                                        if (TheDeliveryCateGory == "推拉门、玻璃门包装材料明细（所有玻璃产品需使用硬包装）")
                                        {
                                            TheDeliveryCateGoryId5 = q;
                                        }
                                    }
                                    for (int i = sRowNum; i < eRowNum; i++)
                                    {
                                        DataRow Li_PackingListTableRow = SuMeiPackingListTable.NewRow();
                                        Li_PackingListTableRow["ProductOrderId"] = ParentId;
                                        string PackingNum = Convert.ToString(Sheet.Cells[i, 6].Value);
                                        if (PackingNum == "" || PackingNum == null || PackingNum == "包数")
                                        {
                                            continue;
                                        }
                                        for (int j = 1; j < 12; j++)
                                        {
                                            ExcelRange rang = Sheet.Cells[i, j];
                                            object objectCellValue = Sheet.GetValue(i, j);//单元格数据
                                            string CellValue = objectCellValue != null ? objectCellValue.ToString().Trim() : "";
                                            if (rang.Merge)
                                            {
                                                CellValue = GetMergeValue(Sheet, i, j);
                                            }
                                            switch (j)
                                            {
                                                case 1:
                                                    Li_PackingListTableRow["PackingNumber"] = CellValue;
                                                    break;
                                                case 2:
                                                    Li_PackingListTableRow["Wide"] = CellValue;
                                                    break;
                                                case 3:
                                                    Li_PackingListTableRow["High"] = CellValue;
                                                    break;
                                                case 4:
                                                    Li_PackingListTableRow["Depth"] = CellValue;
                                                    break;
                                                case 5:
                                                    if (System.Text.RegularExpressions.Regex.IsMatch(CellValue.ToString(), @"^[-+]?[0-9]*\.?[0-9]+$"))
                                                    {
                                                        Li_PackingListTableRow["Quantity"] = Convert.ToInt32(CellValue);
                                                    }
                                                    else
                                                    {
                                                        Li_PackingListTableRow["Quantity"] = 0;
                                                    }
                                                    break;
                                                case 6:
                                                    Li_PackingListTableRow["Cell"] = CellValue;
                                                    break;
                                                case 7:
                                                    Li_PackingListTableRow["CabinetType"] = CellValue;
                                                    break;
                                                case 8:
                                                    Li_PackingListTableRow["NameOfPackagingMaterials"] = CellValue;
                                                    break;
                                                case 9:
                                                    Li_PackingListTableRow["MaterialCode"] = CellValue;
                                                    break;
                                                case 10:
                                                    if (System.Text.RegularExpressions.Regex.IsMatch(CellValue.ToString(), @"^[-+]?[0-9]*\.?[0-9]+$"))
                                                    {
                                                        Li_PackingListTableRow["Qty"] = CellValue;
                                                    }
                                                    else
                                                    {
                                                        Li_PackingListTableRow["PackingQuantity"] = CellValue;
                                                    }
                                                    break;
                                                case 11:
                                                    Li_PackingListTableRow["Unit"] = Sheet.Cells[i, j].Value;
                                                    break;
                                            }
                                        }
                                        if (i >= TheDeliveryCateGoryId && i < TheDeliveryCateGoryId1)
                                        {
                                            Li_PackingListTableRow["TheDeliveryCateGory"] = CStr(Sheet.Cells[TheDeliveryCateGoryId, 1].Value).Trim();
                                        }
                                        else if (i >= TheDeliveryCateGoryId1 && i < TheDeliveryCateGoryId2)
                                        {
                                            Li_PackingListTableRow["TheDeliveryCateGory"] = CStr(Sheet.Cells[TheDeliveryCateGoryId1, 1].Value).Trim();
                                        }
                                        else if (i >= TheDeliveryCateGoryId2 && i < TheDeliveryCateGoryId3)
                                        {
                                            Li_PackingListTableRow["TheDeliveryCateGory"] = CStr(Sheet.Cells[TheDeliveryCateGoryId2, 1].Value).Trim();
                                        }
                                        else if (i >= TheDeliveryCateGoryId3 && i < TheDeliveryCateGoryId4)
                                        {
                                            Li_PackingListTableRow["TheDeliveryCateGory"] = CStr(Sheet.Cells[TheDeliveryCateGoryId3, 1].Value).Trim();
                                        }
                                        else if (i >= TheDeliveryCateGoryId4 && i < TheDeliveryCateGoryId5)
                                        {
                                            Li_PackingListTableRow["TheDeliveryCateGory"] = CStr(Sheet.Cells[TheDeliveryCateGoryId4, 1].Value).Trim();
                                        }
                                        else if (i >= TheDeliveryCateGoryId5)
                                        {
                                            Li_PackingListTableRow["TheDeliveryCateGory"] = CStr(Sheet.Cells[TheDeliveryCateGoryId5, 1].Value).Trim();
                                        }
                                        SuMeiPackingListTable.Rows.Add(Li_PackingListTableRow);
                                    }
                                }
                                SuMeiPackingListTable.TableName = "SuMeiLi_Packaging";
                                DS.Tables.Add(SuMeiPackingListTable);
                            }
                        }
                    }
                }
                catch (Exception ex)
                {
                    throw ex;
                }
                #endregion
                //混油Sheet页
                #region
                try
                {
                    FileStream FileGuiti = new FileStream(Path, FileMode.Open, FileAccess.Read);
                    using (ExcelPackage pck = new ExcelPackage(FileGuiti))
                    {
                        ExcelWorksheet sheet = null;
                        sheet = pck.Workbook.Worksheets["混油"];
                        if (sheet != null)
                        {
                            if (sheet.Hidden.ToString() == "Visible")
                            {
                                string hidden = sheet.Hidden.ToString();
                                int maxColumnNum = sheet.Dimension.End.Column;//最大列
                                int minColumnNum = sheet.Dimension.Start.Column;//最小列
                                int minRowNum = sheet.Dimension.Start.Row;//最小行
                                int maxRowNum = sheet.Dimension.End.Row;//最大行
                                int sRowNum = 8;//开始行
                                int eRowNum = 0;//结束行
                                if (Convert.ToString(sheet.Hidden) != "Hidden")
                                {
                                    for (int i = sRowNum; i < maxRowNum; i++)
                                    {
                                        string EndRow = Convert.ToString(sheet.Cells[i, 1].Value);
                                        if (EndRow.Trim() == "下料")
                                        {
                                            eRowNum = i;
                                            break;
                                        }
                                    }

                                    for (int i = sRowNum; i < eRowNum; i++)
                                    {
                                        DataRow GuitiIssueMaterialBillsDataTableRow = MianQiYiBiGui_GuiTiDataTable.NewRow();
                                        GuitiIssueMaterialBillsDataTableRow["IssueMaterialBillsId"] = System.Guid.NewGuid().ToString().Substring(0, 12).ToUpper();
                                        GuitiIssueMaterialBillsDataTableRow["ProductOrderId"] = ParentId;
                                        string PlateType = Convert.ToString(sheet.Cells[1, 1].Value);
                                        GuitiIssueMaterialBillsDataTableRow["PlateType"] = PlateType.Substring(1, 4); ;//板件类型
                                        string Stytle = Convert.ToString(sheet.Cells[3, 5].Value);
                                        GuitiIssueMaterialBillsDataTableRow["Stytle"] = Stytle;//款式名称
                                        string MaterialNote = Convert.ToString(sheet.Cells[5, 2].Value);
                                        GuitiIssueMaterialBillsDataTableRow["MaterialNote"] = MaterialNote;//材质说明
                                        string Qty = Convert.ToString(sheet.Cells[i, 8].Value);
                                        if (Qty == "" || Qty == null)
                                        {
                                            continue;
                                        }
                                        else
                                        {
                                            if (System.Text.RegularExpressions.Regex.IsMatch(Qty, @"^[-+]?[0-9]*\.?[0-9]+$"))
                                            {
                                                if (Convert.ToSingle(Qty) > 0)
                                                {
                                                    for (int j = 1; j < 11; j++)
                                                    {
                                                        ExcelRange Rang = sheet.Cells[i, j];
                                                        object objectCellValue = sheet.GetValue(i, j);//单元格数据
                                                        string CellValue = objectCellValue != null ? objectCellValue.ToString().Trim() : "";
                                                        if (Rang.Merge)
                                                        {
                                                            CellValue = GetMergeValue(sheet, i, j);
                                                        }
                                                        switch (j)
                                                        {
                                                            case 1:
                                                                GuitiIssueMaterialBillsDataTableRow["CabinetNO"] = CellValue;
                                                                break;
                                                            case 2:
                                                                GuitiIssueMaterialBillsDataTableRow["PlateName"] = CellValue;
                                                                break;
                                                            case 3:
                                                                string ExcelValue4 = CStr(sheet.Cells[i, j].Value);
                                                                if (ExcelValue4 == "" || ExcelValue4 == null)
                                                                {
                                                                    GuitiIssueMaterialBillsDataTableRow["FThick"] = "0";
                                                                }
                                                                else
                                                                {
                                                                    GuitiIssueMaterialBillsDataTableRow["FThick"] = CellValue;
                                                                }
                                                                break;
                                                            case 4:
                                                                GuitiIssueMaterialBillsDataTableRow["CenterMaterials"] = CellValue;
                                                                break;
                                                            case 5:
                                                                GuitiIssueMaterialBillsDataTableRow["FaceConduct"] = CellValue;
                                                                break;
                                                            case 6:
                                                                string Wide = CStr(sheet.Cells[i, j].Value);
                                                                if (Wide == "" || Wide == null)
                                                                {
                                                                    GuitiIssueMaterialBillsDataTableRow["CutWide"] = "0";
                                                                }
                                                                else
                                                                {
                                                                    GuitiIssueMaterialBillsDataTableRow["CutWide"] = CellValue;
                                                                }
                                                                break;
                                                            case 7:
                                                                string High = CStr(sheet.Cells[i, j].Value);
                                                                if (High == "" || High == null)
                                                                {
                                                                    GuitiIssueMaterialBillsDataTableRow["CutHigh"] = "0";
                                                                }
                                                                else
                                                                {
                                                                    GuitiIssueMaterialBillsDataTableRow["CutHigh"] = CellValue;
                                                                }
                                                                break;
                                                            case 8:
                                                                GuitiIssueMaterialBillsDataTableRow["Qty"] = CellValue;
                                                                break;
                                                            case 9:
                                                                GuitiIssueMaterialBillsDataTableRow["SealingSide"] = CellValue;
                                                                break;
                                                            case 10:
                                                                GuitiIssueMaterialBillsDataTableRow["Remark"] = CellValue;
                                                                break;
                                                        }
                                                    }
                                                    MianQiYiBiGui_GuiTiDataTable.Rows.Add(GuitiIssueMaterialBillsDataTableRow);
                                                }
                                                else
                                                {
                                                    continue;
                                                }
                                            }
                                        }
                                    }
                                    MianQiYiBiGui_GuiTiDataTable.TableName = "IssueMaterialBills1";
                                    DS.Tables.Add(MianQiYiBiGui_GuiTiDataTable);
                                }
                            }
                        }
                    }
                }
                catch (Exception ex)
                {
                    throw ex;
                }
                #endregion
                //混料Sheet页
                #region
                try
                {
                    FileStream Stream = new FileStream(Path, FileMode.Open, FileAccess.Read);
                    using (ExcelPackage pck = new ExcelPackage(Stream))
                    {
                        ExcelWorksheet Sheet = null;//数据所在Sheet
                        Sheet = pck.Workbook.Worksheets["混料"];
                        if (Sheet != null)
                        {
                            if (Sheet.Hidden.ToString() == "Visible")
                            {
                                int maxColumnNum = Sheet.Dimension.End.Column;//最大列
                                int minColumnNum = Sheet.Dimension.Start.Column;//最小列
                                int minRowNum = Sheet.Dimension.Start.Row;//最小行
                                int maxRowNum = Sheet.Dimension.End.Row;//最大行
                                int sRowNum = 5;//开始行
                                int eRowNum = 0;//结束行
                                int sAColNum = 1;//区域A的开始栏位

                                if (Convert.ToString(Sheet.Hidden) != "Hidden")
                                {
                                    for (int i = sRowNum; i <= maxRowNum; i++)
                                    {
                                        string EndValue = Convert.ToString(Sheet.Cells[i, 1].Value);
                                        if (EndValue.Trim() == "拆解员：")
                                        {
                                            eRowNum = i;
                                            break;
                                        }
                                    }
                                    DataTable MaterialTable = new DataTable();
                                    MaterialTable.Columns.Add(string.Format("MaterialDescription"), Type.GetType("System.String"));
                                    MaterialTable.Columns.Add(string.Format("ProductName"), Type.GetType("System.String"));
                                    DataRow MaterialTableRow = MaterialTable.NewRow();
                                    //领料单读取
                                    for (int i = sRowNum; i <= eRowNum; i++)
                                    {
                                        string MaterialDescription = CStr(Sheet.Cells[i, 2].Value);
                                        if (MaterialDescription == null || MaterialDescription == "" || MaterialDescription == "物料描述")
                                        {
                                            continue;
                                        }
                                        else
                                        {
                                            MaterialTableRow["MaterialDescription"] = MaterialDescription;
                                            MaterialTable.Rows.Add(MaterialTableRow.ItemArray);
                                        }

                                    }
                                    SqlCommand cmd = new SqlCommand();
                                    SqlConnection con = new SqlConnection("Data Source=192.168.124.72;Initial Catalog=OrBitXI;User ID=sa;PassWord=admin@2017");
                                    con.Open();
                                    cmd.CommandText = "Pro_GetproductName";
                                    cmd.Connection = con;
                                    cmd.CommandType = CommandType.StoredProcedure;
                                    SqlParameter parm = new SqlParameter("@Pro_GetproductName", SqlDbType.Structured)
                                    {
                                        Value = MaterialTable
                                    };
                                    cmd.Parameters.Add(parm);
                                    cmd.ExecuteNonQuery();
                                    DataTable GetMaterialBillsTable = new DataTable();
                                    cmd.Parameters.Add(new SqlParameter("@return", SqlDbType.Int));
                                    cmd.Parameters["@return"].Direction = ParameterDirection.ReturnValue;
                                    SqlDataReader Datereader = cmd.ExecuteReader();
                                    GetMaterialBillsTable.Load(Datereader);

                                    for (int i = sRowNum; i < eRowNum; i++)
                                    {
                                        DataRow GetMaterialBillsDataTableRow = MianQiYiBiGui_LiaoDanDataTable.NewRow();
                                        GetMaterialBillsDataTableRow["GetMaterialBillsId"] = System.Guid.NewGuid().ToString().Substring(0, 12).ToUpper();
                                        GetMaterialBillsDataTableRow["ProductOrderId"] = ParentId;
                                        //string Name = Convert.ToString(Sheet.Cells[i, 2].Value);
                                        //float Num =Convert.ToSingle( Sheet.Cells[i, 6].Value);
                                        string Num1 = Convert.ToString(Sheet.Cells[i, 4].Value);
                                        if (Num1 == "" || Num1 == null)
                                        {
                                            continue;
                                        }
                                        if (System.Text.RegularExpressions.Regex.IsMatch(Num1, @"^[-+]?[0-9]*\.?[0-9]+$"))
                                        {
                                            for (int j = sAColNum; j < 7; j++)
                                            {
                                                ExcelRange range = Sheet.Cells[i, j];
                                                object objectCellValue = Sheet.GetValue(i, j);//单元格数据
                                                string CellValue = objectCellValue != null ? objectCellValue.ToString().Trim() : "";
                                                if (range.Merge)
                                                {
                                                    CellValue = GetMergeValue(Sheet, i, j);
                                                }
                                                switch (j)
                                                {
                                                    case 1:
                                                        GetMaterialBillsDataTableRow["MaterialType"] = CellValue;
                                                        break;
                                                    case 2:
                                                        //string GuiGe = Convert.ToString(Sheet.Cells[i, 5].Value);
                                                        GetMaterialBillsDataTableRow["NumericalOrder"] = CellValue;
                                                        break;
                                                    case 3:
                                                        //GetMaterialBillsDataTableRow["ProductDesCription"] = CellValue;
                                                        for (int q = 0; q < GetMaterialBillsTable.Rows.Count; q++)
                                                        {
                                                            string SQLproductDescription = GetMaterialBillsTable.Rows[q]["ProductDescription"].ToString();
                                                            string ProductName = GetMaterialBillsTable.Rows[q]["ProductName"].ToString();
                                                            if (SQLproductDescription == CellValue)
                                                            {
                                                                GetMaterialBillsDataTableRow["ProductName"] = ProductName;
                                                                GetMaterialBillsDataTableRow["ProductDes"] = SQLproductDescription;
                                                            }
                                                        }
                                                        break;

                                                    //case 5:
                                                    //    GetMaterialBillsDataTableRow["MaterialType"] = CellValue;
                                                    //    break;
                                                    case 4:
                                                        GetMaterialBillsDataTableRow["Qty"] = CellValue;
                                                        break;
                                                    case 5:
                                                        GetMaterialBillsDataTableRow["Unit"] = CellValue;
                                                        break;
                                                    case 6:
                                                        GetMaterialBillsDataTableRow["PackingConfirmed"] = CellValue;
                                                        break;
                                                }
                                            }
                                            for (int j = 7; j < 13; j++)
                                            {
                                                ExcelRange range = Sheet.Cells[i, j];
                                                object objectCellValue = Sheet.GetValue(i, j);//单元格数据
                                                string CellValue = objectCellValue != null ? objectCellValue.ToString().Trim() : "";
                                                if (range.Merge)
                                                {
                                                    CellValue = GetMergeValue(Sheet, i, j);
                                                }
                                                switch (j)
                                                {
                                                    case 7:
                                                        GetMaterialBillsDataTableRow["MaterialType"] = CellValue;
                                                        break;
                                                    case 8:
                                                        //string GuiGe = Convert.ToString(Sheet.Cells[i, 5].Value);
                                                        GetMaterialBillsDataTableRow["NumericalOrder"] = CellValue;
                                                        break;
                                                    case 9:
                                                        //GetMaterialBillsDataTableRow["ProductDesCription"] = CellValue;
                                                        for (int q = 0; q < GetMaterialBillsTable.Rows.Count; q++)
                                                        {
                                                            string SQLproductDescription = GetMaterialBillsTable.Rows[q]["ProductDescription"].ToString();
                                                            string ProductName = GetMaterialBillsTable.Rows[q]["ProductName"].ToString();
                                                            if (SQLproductDescription == CellValue)
                                                            {
                                                                GetMaterialBillsDataTableRow["ProductName"] = ProductName;
                                                                GetMaterialBillsDataTableRow["ProductDes"] = SQLproductDescription;
                                                            }
                                                        }
                                                        break;

                                                    //case 5:
                                                    //    GetMaterialBillsDataTableRow["MaterialType"] = CellValue;
                                                    //    break;
                                                    case 10:
                                                        GetMaterialBillsDataTableRow["Qty"] = CellValue;
                                                        break;
                                                    case 11:
                                                        GetMaterialBillsDataTableRow["Unit"] = CellValue;
                                                        break;
                                                    case 12:
                                                        GetMaterialBillsDataTableRow["PackingConfirmed"] = CellValue;
                                                        break;
                                                }
                                            }
                                            MianQiYiBiGui_LiaoDanDataTable.Rows.Add(GetMaterialBillsDataTableRow);
                                        }
                                    }
                                    MianQiYiBiGui_LiaoDanDataTable.TableName = "GetMaterialBills3";
                                    DS.Tables.Add(MianQiYiBiGui_LiaoDanDataTable);
                                }
                            }
                        }
                    }
                }
                catch (Exception ex)
                {
                    throw ex;
                }
                #endregion
















                DataToSQL Data = new DataToSQL();
                Data.DataToSQLobj(DS);
            }
            catch (Exception ex)
            {

                MessageBox.Show(ex.Message);
            }
        }
    }




    /// <summary>
    /// 盛可居手工拆解数据导入数据库
    /// </summary>
    public class ShengCanJu : ShengCanJuToSQL
    {
        public override void ReadShengCanJuData(string Path, string ParentId)
        {
            //存储数据流
            FileStream Fs = new FileStream(Path, FileMode.Open, FileAccess.Read);
            //读取Excel
            using (ExcelPackage pck = new ExcelPackage(Fs))
            {
                try
                {
                    //下料单
                    #region
                    //数据所在Sheet
                    ExcelWorksheet Sheet = null;
                    //打开的Sheet名
                    Sheet = pck.Workbook.Worksheets["下料单"];
                    if (Sheet.Name == "下料单")
                    {
                        //最大列
                        int maxColumnNum = Sheet.Dimension.End.Column;
                        //最小列
                        int minColumnNum = Sheet.Dimension.Start.Column;
                        //最小行
                        int minRowNum = Sheet.Dimension.Start.Row;
                        //最大行
                        int maxRowNum = Sheet.Dimension.End.Row;
                        //开始行
                        int sRowNum = 4;
                        //结束行
                        int eRowNum = 0;
                        //区域A的开始栏位
                        int sAColNum = 1;
                        //区域A的结束栏位
                        int eAColNum = 5;
                        //区域B的开始栏位
                        int sBColNum = 6;
                        //区域B的结束栏位
                        int eBColNum = 41;
                        //合计所在行
                        //int hJRowNum = 0;
                        //读取Excel内容
                        //修改开始行
                        sRowNum = 4;
                        //修改结束行
                        eRowNum = 23;
                        //地柜开始行
                        int GroundArk = 0;
                        //第一行合计
                        int ACombined1 = 0;
                        //第二行合计
                        int ACombined2 = 0;
                        //第三行合计
                        int ACombined3 = 0;
                        //吊柜开始行
                        int CondoleArk = 0;
                        //抽屉备用条等开始行
                        int DrawerBar = 0;
                        //板件名称所在行
                        int Row = 3;
                        int CebaCol = 10;
                        int dingbanCol = 15;
                        int dibanCol = 20;
                        int lianjiebanCol = 25;
                        int huogebanCol = 30;
                        int FeibiaoCol = 35;
                        int beibanCol = 40;
                        //备注列
                        //int ReMarkRow = 42;

                        for (int i = sRowNum; i < maxRowNum; i++)
                        {
                            object RowText = Sheet.Cells[i, 1].Value;
                            if (RowText == null)
                            {
                                continue;
                            }
                            if (RowText.ToString() == "地柜")
                            {
                                GroundArk = i;
                            }
                            if (RowText.ToString() == "合计:")
                            {
                                object NextText = Sheet.Cells[i + 1, 1].Value;
                                if (NextText.ToString() == "吊柜")
                                {
                                    ACombined1 = i;
                                    CondoleArk = i + 1;
                                }
                                if (NextText.ToString() == "抽屉、备用条等")
                                {
                                    ACombined2 = i;
                                    DrawerBar = i + 1;
                                }
                                if (NextText.ToString() == "总合计：")
                                {
                                    ACombined3 = i;
                                    eRowNum = i;
                                    break;
                                }
                            }
                        }
                        DataRow CabinetTableRow = CabinetTable.NewRow();
                        DataRow IssueMaterialBillsTableRow = IssueMaterialBillsTable.NewRow();
                        for (int i = sRowNum; i < eRowNum; i++)
                        {
                            object NextRow = Sheet.Cells[i, 1].Value;
                            if (NextRow == null || NextRow.ToString() == "地柜" || NextRow.ToString().Trim() == "合计:" || NextRow.ToString() == "吊柜" || NextRow.ToString() == "抽屉、备用条等")
                            {
                                continue;
                            }
                            for (int j = sAColNum; j <= eAColNum; j++)
                            {
                                switch (j)
                                {
                                    case 1:
                                        Object Guiti = Sheet.Cells[Row, 3].Value;
                                        CabinetTableRow["ProductDescription"] = Guiti + Sheet.Cells[i, j].Value.ToString();
                                        break;
                                    case 2:
                                        CabinetTableRow["Wide"] = Sheet.Cells[i, j].Value;
                                        break;
                                    case 3:
                                        CabinetTableRow["Deth"] = Sheet.Cells[i, j].Value;
                                        break;
                                    case 4:
                                        CabinetTableRow["High"] = Sheet.Cells[i, j].Value;
                                        break;
                                    case 5:
                                        CabinetTableRow["Qty"] = Sheet.Cells[i, j].Value;
                                        Object Remark = Sheet.Cells[i, 41].Value;
                                        CabinetTableRow["Remark"] = Remark;
                                        break;
                                }
                            }
                            CabinetTable.Rows.Add(CabinetTableRow.ItemArray);

                            int detail = 1;
                            for (int a = sBColNum; a < eBColNum; a++)
                            {
                                if (detail == 1)
                                {
                                    object PlateName = Sheet.Cells[i, a].Value;
                                    if (PlateName == null)
                                    {
                                        a = a + 5;
                                        detail = 1;
                                        continue;
                                    }
                                    Object platename1 = "";
                                    if (a >= sBColNum && a <= CebaCol)
                                    {
                                        platename1 = Sheet.Cells[Row, 8].Value;
                                    }
                                    else if (a >= CebaCol && a <= dingbanCol)
                                    {
                                        platename1 = Sheet.Cells[Row, 13].Value;
                                    }
                                    else if (a >= dingbanCol && a <= dibanCol)
                                    {
                                        platename1 = Sheet.Cells[Row, 18].Value;
                                    }
                                    else if (a >= dibanCol && a <= lianjiebanCol)
                                    {
                                        platename1 = Sheet.Cells[Row, 23].Value;
                                    }
                                    else if (a >= lianjiebanCol && a <= huogebanCol)
                                    {
                                        platename1 = Sheet.Cells[Row, 28].Value;
                                    }
                                    else if (a >= huogebanCol && a <= FeibiaoCol)
                                    {
                                        platename1 = Sheet.Cells[Row, 32].Value;
                                    }
                                    else if (a >= FeibiaoCol && a <= beibanCol)
                                    {
                                        platename1 = Sheet.Cells[Row, 38].Value;
                                    }
                                    if (i >= ACombined2)
                                    {
                                        IssueMaterialBillsTableRow["PlateName"] = PlateName.ToString();
                                    }
                                    else
                                    {
                                        IssueMaterialBillsTableRow["PlateName"] = platename1.ToString() + PlateName.ToString();
                                    }
                                    detail++;
                                }
                                else if (detail == 2)
                                {
                                    object FThick = Sheet.Cells[i, a].Value;
                                    if (FThick == null)
                                    {
                                        FThick = "0";
                                        IssueMaterialBillsTableRow["FThick"] = Convert.ToSingle(FThick);
                                        detail++;
                                    }
                                    else
                                    {
                                        IssueMaterialBillsTableRow["FThick"] = FThick;
                                        detail++;
                                    }
                                }
                                else if (detail == 3)
                                {
                                    object FWide = Sheet.Cells[i, a].Value;
                                    if (FWide == null)
                                    {
                                        FWide = "0";
                                        IssueMaterialBillsTableRow["FWide"] = FWide;
                                        detail++;
                                    }
                                    else
                                    {
                                        IssueMaterialBillsTableRow["FWide"] = FWide;
                                        detail++;
                                    }
                                }
                                else if (detail == 4)
                                {
                                    object FHigh = Sheet.Cells[i, a].Value;
                                    IssueMaterialBillsTableRow["FHigh"] = FHigh;
                                    detail++;
                                }
                                else if (detail == 5)
                                {
                                    object Qty = Sheet.Cells[i, a].Value;
                                    IssueMaterialBillsTableRow["Qty"] = Qty;
                                    Object Remark = Sheet.Cells[i, 41].Value;
                                    IssueMaterialBillsTableRow["Remark"] = Remark;
                                    detail = 1;
                                    IssueMaterialBillsTable.Rows.Add(IssueMaterialBillsTableRow.ItemArray);
                                }
                            }
                        }
                    }
                    #endregion
                    //铝材玻璃单
                    #region
                    //数据所在Sheet
                    ExcelWorksheet AluminumGlassSheet = null;
                    //打开的Sheet名
                    AluminumGlassSheet = pck.Workbook.Worksheets["铝材玻璃单"];
                    if (AluminumGlassSheet.Name == "铝材玻璃单")
                    {
                        //最大列
                        int maxColumnNum = AluminumGlassSheet.Dimension.End.Column;
                        //最小列
                        int minColumnNum = AluminumGlassSheet.Dimension.Start.Column;
                        //最小行
                        int minRowNum = AluminumGlassSheet.Dimension.Start.Row;
                        //最大行
                        int maxRowNum = AluminumGlassSheet.Dimension.End.Row;
                        //开始行
                        int sRowNum = 5;
                        //结束行
                        int eRowNum = 0;
                        //区域A的开始栏位
                        int sAColNum = 1;
                        //区域A的结束栏位
                        int eAColNum = 7;
                        //区域B的开始栏位
                        int sBColNum = 8;
                        //区域B的结束栏位
                        int eBColNum = 12;

                        for (int i = sRowNum; i < maxRowNum; i++)
                        {
                            object EndText = AluminumGlassSheet.Cells[i, 1].Value;
                            if (EndText == null)
                            {
                                continue;
                            }
                            if (EndText.ToString() == "制单人：")
                            {
                                eRowNum = i - 1;
                                break;
                            }
                        }

                        DataRow AluminumGlassLeftTableRow = AluminumGlassLeftTable.NewRow();
                        DataRow AluminumGlassRightTableRow = AluminumGlassRightTable.NewRow();
                        for (int i = sRowNum; i < eRowNum; i++)
                        {
                            object PlateName = AluminumGlassSheet.GetValue(i, 2);
                            if (PlateName == null)
                            {
                                continue;
                            }
                            for (int j = sAColNum; j <= eAColNum; j++)
                            {
                                switch (j)
                                {
                                    case 1:
                                        object Num = AluminumGlassSheet.Cells[i, j].Value;
                                        AluminumGlassLeftTableRow["Num"] = Num;
                                        break;
                                    case 2:
                                        object MaterialName = AluminumGlassSheet.GetValue(i, j);
                                        AluminumGlassLeftTableRow["MaterialName"] = MaterialName;
                                        break;
                                    case 3:
                                        object StandardsName = AluminumGlassSheet.GetValue(i, j);
                                        object StandardsName1 = AluminumGlassSheet.GetValue(i, j + 1);
                                        if (StandardsName == null && StandardsName1 == null)
                                        {
                                            continue;
                                        }
                                        else
                                        {
                                            if (StandardsName == null)
                                            {
                                                StandardsName = "";
                                            }
                                            if (StandardsName1 == null)
                                            {
                                                StandardsName1 = "";
                                            }
                                            AluminumGlassLeftTableRow["StandardsName"] = StandardsName.ToString() + StandardsName1.ToString();
                                        }
                                        break;
                                    case 5:
                                        object Qty = AluminumGlassSheet.Cells[i, j].Value;
                                        if (Qty == null || Qty.ToString() == "")
                                        {
                                            Qty = 0;
                                        }
                                        AluminumGlassLeftTableRow["Qty"] = Qty;
                                        break;
                                    case 6:
                                        Object Unit = AluminumGlassSheet.Cells[i, j].Value;
                                        AluminumGlassLeftTableRow["Unit"] = Unit;
                                        break;
                                    case 7:
                                        Object Remark = AluminumGlassSheet.Cells[i, j].Value;
                                        AluminumGlassLeftTableRow["Remark"] = Remark;
                                        break;
                                }
                            }
                            object PlateNameRight = AluminumGlassSheet.GetValue(i, 9);
                            if (PlateNameRight == null)
                            {
                                continue;
                            }
                            for (int q = sBColNum; q < eBColNum; q++)
                            {
                                switch (q)
                                {
                                    case 8:
                                        object Num1 = AluminumGlassSheet.Cells[i, q].Value;
                                        AluminumGlassRightTableRow["Num"] = Num1;
                                        break;
                                    case 9:
                                        AluminumGlassRightTableRow["MaterialName"] = PlateNameRight;
                                        break;
                                    case 10:
                                        object StandardsNameRight = AluminumGlassSheet.GetValue(i, q);
                                        AluminumGlassRightTableRow["StandardsName"] = StandardsNameRight;
                                        break;
                                    case 11:
                                        Object QtyRight = AluminumGlassSheet.GetValue(i, q);
                                        if (QtyRight == null || QtyRight.ToString() == "")
                                        {
                                            QtyRight = 0;
                                        }
                                        AluminumGlassRightTableRow["Qty"] = QtyRight;
                                        break;
                                    case 12:
                                        Object UnitRight = AluminumGlassSheet.Cells[i, q].Value;
                                        AluminumGlassRightTableRow["Unit"] = UnitRight;
                                        break;
                                }
                            }
                            AluminumGlassLeftTable.Rows.Add(AluminumGlassLeftTableRow.ItemArray);
                            AluminumGlassRightTable.Rows.Add(AluminumGlassRightTableRow.ItemArray);
                        }
                    }
                    #endregion
                    //领料单
                    #region
                    //数据所在Sheet
                    ExcelWorksheet MaterialRequisitionSheet = null;
                    //打开的Sheet名
                    MaterialRequisitionSheet = pck.Workbook.Worksheets["领料单"];
                    if (MaterialRequisitionSheet.Name == "领料单")
                    {
                        //最大列
                        int maxColumnNum = MaterialRequisitionSheet.Dimension.End.Column;
                        //最小列
                        int minColumnNum = MaterialRequisitionSheet.Dimension.Start.Column;
                        //最小行
                        int minRowNum = MaterialRequisitionSheet.Dimension.Start.Row;
                        //最大行
                        int maxRowNum = MaterialRequisitionSheet.Dimension.End.Row;
                        //开始行
                        int sRowNum = 5;
                        //结束行
                        int eRowNum = 0;
                        //区域A的开始栏位
                        int sColNum = 1;
                        //区域A的结束栏位
                        int eColNum = 7;
                        //区域B的开始栏位
                        //int sBRowNum = 1;
                        //区域B的结束栏位
                        int EBRowNum = 7;

                        for (int i = sRowNum; i < maxRowNum; i++)
                        {
                            object EndRowTag = MaterialRequisitionSheet.GetValue(i, 1);
                            if (EndRowTag == null)
                            {
                                continue;
                            }
                            else if (EndRowTag.ToString().Trim() == "拆解员：")
                            {
                                eRowNum = i;
                            }
                            else if (EndRowTag.ToString().Trim() == "1个UN30+尼龙胀塞8*60 1个+3.5*12自攻钉 3个")
                            {
                                EBRowNum = i - 3;
                                break;
                            }
                        }

                        DataRow MaterialRequisitionUnderTableRow = MaterialRequisitionUnderTable.NewRow();
                        DataRow MaterialRequisitionTopTableRow = MaterialRequisitionTopTable.NewRow();

                        //为领料单创建一个datatable
                        DataTable PickingTable = new DataTable();
                        PickingTable.Columns.Add(string.Format("ProductDescription"), Type.GetType("System.String"));//物料描述
                        PickingTable.Columns.Add(string.Format("ProductName"), Type.GetType("System.String"));
                        DataRow Pickingrows = PickingTable.NewRow();
                        //读取物料描述信息存放在datatable中
                        for (int i = sRowNum; i < eRowNum; i++)
                        {
                            object ProductDescription = CStr(MaterialRequisitionSheet.Cells[i, 3].Value);
                            if (ProductDescription == null)
                            {
                                continue;
                            }
                            Pickingrows["ProductDescription"] = ProductDescription.ToString();
                            PickingTable.Rows.Add(Pickingrows.ItemArray);

                        }
                        SqlConnection con = new SqlConnection("Data Source=192.168.124.72;Initial Catalog=OrBitXI;User ID=sa;PassWord=admin@2017");
                        con.Open();
                        //调用存储过程根据物料描述获取到物料编号存放在另一个datatable中
                        SqlCommand Pickingcmd = new SqlCommand();
                        Pickingcmd.CommandText = "Pro_GetProductName";
                        Pickingcmd.Connection = con;
                        Pickingcmd.CommandType = CommandType.StoredProcedure;
                        SqlParameter parameter =
                        new SqlParameter("@Pro_GetProductName", SqlDbType.Structured)
                        {
                            Value = PickingTable
                        };

                        Pickingcmd.Parameters.Add(parameter);
                        Pickingcmd.ExecuteNonQuery();
                        Pickingcmd.Parameters.Add(new SqlParameter("@return", SqlDbType.Int));
                        Pickingcmd.Parameters["@return"].Direction = ParameterDirection.ReturnValue;
                        SqlDataReader readerPicking = Pickingcmd.ExecuteReader();
                        DataTable Pickingdt = new DataTable();
                        Pickingdt.Load(readerPicking);
                        con.Close();

                        for (int i = sRowNum; i < eRowNum; i++)
                        {
                            object ProductDescription = MaterialRequisitionSheet.Cells[i, 3].Value;
                            if (ProductDescription == null)
                            {
                                continue;
                            }
                            for (int j = sColNum; j < eColNum; j++)
                            {
                                ExcelRange Rang = MaterialRequisitionSheet.Cells[i, j];
                                object objectCellValue = MaterialRequisitionSheet.GetValue(i, j);//单元格数据
                                string CellValue = objectCellValue != null ? objectCellValue.ToString().Trim() : "";
                                if (Rang.Merge)
                                {
                                    CellValue = GetMergeValue(MaterialRequisitionSheet, i, j);
                                }
                                switch (j)
                                {
                                    case 1:
                                        //object CateGory = MaterialRequisitionSheet.GetValue(i, j);

                                        MaterialRequisitionTopTableRow["CateGory"] = CellValue;
                                        break;
                                    case 2:
                                        //object NumericalOrder = MaterialRequisitionSheet.GetValue(i, j);
                                        //ExcelRange Rang = MaterialRequisitionSheet.Cells[i, j];
                                        //object objectCellValue = MaterialRequisitionSheet.GetValue(i, j);//单元格数据
                                        //string CellValue = objectCellValue != null ? objectCellValue.ToString().Trim() : "";
                                        //if (Rang.Merge)
                                        //{
                                        //    CellValue = GetMergeValue(MaterialRequisitionSheet, i, j);
                                        //}
                                        if (System.Text.RegularExpressions.Regex.IsMatch(CellValue.ToString(), @"^[-+]?[0-9]*\.?[0-9]+$"))
                                        {
                                            MaterialRequisitionTopTableRow["NumericalOrder"] = CellValue;
                                        }
                                        else
                                        {
                                            MaterialRequisitionTopTableRow["HardwareFitting"] = CellValue;
                                        }
                                        break;
                                    case 3:
                                        object ProductDes = MaterialRequisitionSheet.GetValue(i, j);
                                        for (int a = 0; a < Pickingdt.Rows.Count; a++)
                                        {
                                            string ProductDescription1 = Pickingdt.Rows[a]["ProductDescription"].ToString();
                                            string ProductName = Pickingdt.Rows[a]["ProductName"].ToString();
                                            if (ProductDes.ToString() == ProductDescription1)
                                            {
                                                MaterialRequisitionTopTableRow["ProductName"] = ProductName;
                                                break;
                                            }
                                        }
                                        MaterialRequisitionTopTableRow["ProductDes"] = ProductDes;
                                        break;
                                    case 4:
                                        object Qty = MaterialRequisitionSheet.GetValue(i, j);
                                        if (Qty == null || Qty.ToString() == "")
                                        {
                                            Qty = 0;
                                        }
                                        MaterialRequisitionTopTableRow["Qty"] = Qty;
                                        break;
                                    case 5:
                                        Object Unit = MaterialRequisitionSheet.GetValue(i, j);
                                        MaterialRequisitionTopTableRow["Unit"] = Unit;
                                        break;
                                    case 6:
                                        Object Remark = MaterialRequisitionSheet.GetValue(i, j);
                                        MaterialRequisitionTopTableRow["Remark"] = Remark;
                                        break;
                                }
                            }
                            MaterialRequisitionTopTable.Rows.Add(MaterialRequisitionTopTableRow.ItemArray);
                        }
                        //为领料单创建一个datatable
                        DataTable PickingTable1 = new DataTable();
                        PickingTable1.Columns.Add(string.Format("ProductDescription"), Type.GetType("System.String"));//物料描述
                        PickingTable1.Columns.Add(string.Format("ProductName"), Type.GetType("System.String"));
                        DataRow Pickingrows1 = PickingTable1.NewRow();
                        //读取物料描述信息存放在datatable中
                        for (int i = sRowNum; i < eRowNum; i++)
                        {
                            object ProductDescription = CStr(MaterialRequisitionSheet.Cells[i, 3].Value);
                            if (ProductDescription == null)
                            {
                                continue;
                            }
                            Pickingrows1["ProductDescription"] = ProductDescription.ToString();
                            PickingTable1.Rows.Add(Pickingrows1.ItemArray);

                        }
                        con.Open();
                        //调用存储过程根据物料描述获取到物料编号存放在另一个datatable中
                        SqlCommand Pickingcmda = new SqlCommand();
                        Pickingcmda.CommandText = "Pro_GetProductName";
                        Pickingcmda.Connection = con;
                        Pickingcmda.CommandType = CommandType.StoredProcedure;
                        SqlParameter parameters =
                        new SqlParameter("@Pro_GetProductName", SqlDbType.Structured)
                        {
                            Value = PickingTable1
                        };

                        Pickingcmda.Parameters.Add(parameters);
                        Pickingcmda.ExecuteNonQuery();
                        Pickingcmda.Parameters.Add(new SqlParameter("@return", SqlDbType.Int));
                        Pickingcmda.Parameters["@return"].Direction = ParameterDirection.ReturnValue;
                        SqlDataReader readerPickinga = Pickingcmda.ExecuteReader();
                        DataTable Pickingdta = new DataTable();
                        Pickingdta.Load(readerPickinga);
                        con.Close();
                        for (int i = eRowNum + 6; i < EBRowNum; i++)
                        {
                            Object PlateDescritpion = MaterialRequisitionSheet.Cells[i, 3].Value;
                            if (PlateDescritpion == null)
                            {
                                continue;
                            }
                            for (int s = sColNum; s < eColNum; s++)
                            {
                                ExcelRange Rang = MaterialRequisitionSheet.Cells[i, s];
                                object objectCellValue = MaterialRequisitionSheet.GetValue(i, s);//单元格数据
                                string CellValue = objectCellValue != null ? objectCellValue.ToString().Trim() : "";
                                if (Rang.Merge)
                                {
                                    CellValue = GetMergeValue(MaterialRequisitionSheet, i, s);
                                }
                                switch (s)
                                {
                                    case 1:
                                        //object CateGory = MaterialRequisitionSheet.GetValue(i, s);
                                        MaterialRequisitionUnderTableRow["CateGory"] = CellValue;
                                        break;
                                    case 2:
                                        if (System.Text.RegularExpressions.Regex.IsMatch(CellValue.ToString(), @"^[-+]?[0-9]*\.?[0-9]+$"))
                                        {
                                            MaterialRequisitionUnderTableRow["NumericalOrder"] = CellValue;
                                        }
                                        else
                                        {
                                            MaterialRequisitionUnderTableRow["HardwareFitting"] = CellValue;
                                        }
                                        break;
                                    case 3:
                                        object ProductDes = MaterialRequisitionSheet.GetValue(i, s);
                                        for (int a = 0; a < Pickingdta.Rows.Count; a++)
                                        {
                                            string ProductDescription1 = Pickingdta.Rows[a]["ProductDescription"].ToString();
                                            string ProductName = Pickingdta.Rows[a]["ProductName"].ToString();
                                            if (ProductDes.ToString() == ProductDescription1)
                                            {
                                                MaterialRequisitionUnderTableRow["ProductName"] = ProductName;
                                                break;
                                            }
                                        }
                                        MaterialRequisitionUnderTableRow["ProductDes"] = ProductDes;
                                        break;
                                    case 4:
                                        object Qty = MaterialRequisitionSheet.GetValue(i, s);
                                        if (Qty == null || Qty.ToString() == "")
                                        {
                                            Qty = 0;
                                        }
                                        MaterialRequisitionUnderTableRow["Qty"] = Qty;
                                        break;
                                    case 5:
                                        Object Unit = MaterialRequisitionSheet.GetValue(i, s);
                                        MaterialRequisitionUnderTableRow["Unit"] = Unit;
                                        break;
                                    case 6:
                                        Object Remark = MaterialRequisitionSheet.GetValue(i, s);
                                        MaterialRequisitionUnderTableRow["Remark"] = Remark;
                                        break;
                                }
                            }
                            MaterialRequisitionUnderTable.Rows.Add(MaterialRequisitionUnderTableRow.ItemArray);
                        }
                    }
                    #endregion
                    //A6包装
                    #region
                    //数据所在Sheet
                    ExcelWorksheet A6PackagingSheet = null;
                    //打开的Sheet名
                    A6PackagingSheet = pck.Workbook.Worksheets["A6包装"];
                    if (A6PackagingSheet.Name == "A6包装")
                    {
                        //最大列
                        int maxColumnNum = A6PackagingSheet.Dimension.End.Column;
                        //最小列
                        int minColumnNum = A6PackagingSheet.Dimension.Start.Column;
                        //最小行
                        int minRowNum = A6PackagingSheet.Dimension.Start.Row;
                        //最大行
                        int maxRowNum = A6PackagingSheet.Dimension.End.Row;
                        //开始行
                        int sRowNum = 5;
                        //结束行
                        int eRowNum = 0;
                        //区域A的开始栏位
                        int sColNum = 1;
                        //区域A的结束栏位
                        int eColNum = 10;

                        int Row1 = 0;
                        int Row2 = 0;
                        int Row3 = 0;
                        int Row4 = 0;
                        int Row5 = 0;
                        int Row6 = 0;
                        int Row7 = 0;
                        int Row8 = 0;
                        int Row9 = 0;
                        int Row10 = 0;
                        int Row11 = 0;

                        for (int i = sRowNum; i < maxRowNum; i++)
                        {
                            object Cell1 = A6PackagingSheet.Cells[i, 1].Value;
                            if (Cell1 == null || Cell1.ToString() == "序号" || Cell1.ToString() == "包装编号" || Cell1.ToString() == "名称")
                            {
                                continue;
                            }
                            else if (Cell1.ToString().Trim() == "三、整件发货部分（功能柜）")
                            {
                                Row1 = i;
                            }
                            else if (Cell1.ToString().Trim() == "1.整件包装---可使用对口箱的柜体（抽屉柜、拉篮柜）（备注：所有整柜包装需增加蜂窝纸板)")
                            {
                                Row2 = i;
                            }
                            else if (Cell1.ToString().Trim() == "2.整件包装--所有无法使用对口箱的所有柜体（备注：所有整柜包装需增加蜂窝纸板)")
                            {
                                Row3 = i;
                            }
                            else if (Cell1.ToString().Trim() == "散件包装的柜体---可使用一片成型包装箱的明细")
                            {
                                Row4 = i;
                            }
                            else if (Cell1.ToString().Trim() == "注：以上包装箱适用地柜560深、720高散件柜体；吊柜300深、720高柜体；高柜560深2160高的散件柜体（除特定两种柜形外），外地所有玻璃层板单独包装")
                            {
                                Row5 = i;
                            }
                            else if (Cell1.ToString().Trim() == "散件包装的柜体--所有无法使用一片成型包装箱的柜体散件（玻璃层板单独包装）")
                            {
                                Row6 = i;
                            }
                            else if (Cell1.ToString().Trim() == "散件包装柜体的背板")
                            {
                                Row7 = i;
                            }
                            else if (Cell1.ToString().Trim() == "二、散件门板部分")
                            {
                                Row8 = i;
                            }
                            else if (Cell1.ToString().Trim() == "1.散件包装的门板---可使用一片成型包装箱的明细")
                            {
                                Row9 = i;
                            }
                            else if (Cell1.ToString().Trim() == "2.散件包装的门板--所有无法使用一片成型包装箱的门板散件")
                            {
                                Row10 = i;
                            }
                            else if (Cell1.ToString().Trim() == "四、装饰部件部分（本地、外地通用）")
                            {
                                Row11 = i;
                            }
                            ExcelRange Rang = A6PackagingSheet.Cells[i, 1];
                            object objectCellValue = A6PackagingSheet.GetValue(i, 1);//单元格数据
                            string CellValue = objectCellValue != null ? objectCellValue.ToString().Trim() : "";
                            if (Rang.Merge)
                            {
                                CellValue = GetMergeValue(A6PackagingSheet, i, 1);
                            }
                            //object Cell = A6PackagingSheet.Cells[i, 5].Value;
                            if (CellValue == null)
                            {
                                continue;
                            }
                            if (CellValue.ToString().Trim() == "备注：灯箱底板、拉篮、含玻璃镜子的板件都需要打硬包装")
                            {
                                eRowNum = i;
                            }
                        }

                        DataRow A6PackagingSheetTableRow = A6PackagingSheetTable.NewRow();


                        for (int i = sRowNum; i < eRowNum; i++)
                        {
                            object cell = A6PackagingSheet.GetValue(i, 5);
                            if (cell == null)
                            {
                                continue;
                            }
                            for (int j = sColNum; j <= eColNum; j++)
                            {
                                switch (j)
                                {
                                    case 1:
                                        Object Num = A6PackagingSheet.GetValue(i, j);
                                        A6PackagingSheetTableRow["PackingNumber"] = Num;
                                        break;
                                    case 2:
                                        Object Wide = A6PackagingSheet.GetValue(i, j);
                                        A6PackagingSheetTableRow["Wide"] = Wide;
                                        break;
                                    case 3:
                                        Object High = A6PackagingSheet.GetValue(i, j);
                                        A6PackagingSheetTableRow["High"] = High;
                                        break;
                                    case 4:
                                        Object Depth = A6PackagingSheet.GetValue(i, j);
                                        A6PackagingSheetTableRow["Depth"] = Depth;
                                        break;
                                    case 5:
                                        A6PackagingSheetTableRow["Cell"] = cell;
                                        break;
                                    case 6:
                                        Object CabinetType = A6PackagingSheet.GetValue(i, j);
                                        A6PackagingSheetTableRow["CabinetType"] = CabinetType;
                                        break;
                                    case 7:
                                        Object NameOfPackagingMaterials = A6PackagingSheet.GetValue(i, j);
                                        A6PackagingSheetTableRow["NameOfPackagingMaterials"] = NameOfPackagingMaterials;
                                        break;
                                    case 8:
                                        Object Qty = A6PackagingSheet.GetValue(i, j);
                                        A6PackagingSheetTableRow["Qty"] = Qty;
                                        break;
                                    case 9:
                                        Object Unit = A6PackagingSheet.GetValue(i, j);
                                        A6PackagingSheetTableRow["Unit"] = Unit;
                                        break;
                                    case 10:
                                        Object Remark = A6PackagingSheet.GetValue(i, j);
                                        A6PackagingSheetTableRow["Remark"] = Remark;
                                        break;
                                }
                            }
                            A6PackagingSheetTable.Rows.Add(A6PackagingSheetTableRow.ItemArray);
                        }
                    }
                    #endregion
                    //速美包装
                    #region
                    //数据所在Sheet
                    ExcelWorksheet SpeedOfBeautyPackagingSheet = null;
                    //打开的Sheet名
                    SpeedOfBeautyPackagingSheet = pck.Workbook.Worksheets["速美包装"];
                    if (SpeedOfBeautyPackagingSheet.Name == "速美包装")
                    {
                        //最大列
                        int maxColumnNum = SpeedOfBeautyPackagingSheet.Dimension.End.Column;
                        //最小列
                        int minColumnNum = SpeedOfBeautyPackagingSheet.Dimension.Start.Column;
                        //最小行
                        int minRowNum = SpeedOfBeautyPackagingSheet.Dimension.Start.Row;
                        //最大行
                        int maxRowNum = SpeedOfBeautyPackagingSheet.Dimension.End.Row;
                        //开始行
                        int sRowNum = 5;
                        //结束行
                        int eRowNum = 0;
                        //区域A的开始栏位
                        int sColNum = 1;
                        //区域A的结束栏位
                        int eColNum = 7;

                        int Row1 = 0;
                        int Row2 = 0;
                        int Row3 = 0;
                        int Row4 = 0;
                        int Row5 = 0;
                        int Row6 = 0;
                        int Row7 = 0;
                        int Row8 = 0;
                        int Row9 = 0;
                        int Row10 = 0;
                        int Row11 = 0;
                        for (int i = sRowNum; i <= maxRowNum; i++)
                        {
                            //object Cell1 = SpeedOfBeautyPackagingSheet.Cells[i, 1].Value;
                            ExcelRange Rang = SpeedOfBeautyPackagingSheet.Cells[i, 1];
                            object objectCellValue = SpeedOfBeautyPackagingSheet.GetValue(i, 1);//单元格数据
                            string Cell1 = objectCellValue != null ? objectCellValue.ToString().Trim() : "";
                            if (Rang.Merge)
                            {
                                Cell1 = GetMergeValue(SpeedOfBeautyPackagingSheet, i, 1);
                            }
                            if (Cell1 == null || Cell1.ToString() == "序号" || Cell1.ToString() == "包装编号" || Cell1.ToString() == "名称")
                            {
                                continue;
                            }
                            else if (Cell1.ToString().Trim() == "三、整件发货部分（功能柜）")
                            {
                                Row1 = i;
                            }
                            else if (Cell1.ToString().Trim() == "1.整件包装---可使用对口箱的柜体（抽屉柜、拉篮柜）（备注：所有速美整柜包装需增加蜂窝纸板及配一根同柜体材质拉带）")
                            {
                                Row2 = i;
                            }
                            else if (Cell1.ToString().Trim() == "2.整件包装--所有无法使用对口箱的所有柜体（备注：所有速美整柜包装需增加蜂窝纸板及配一根同柜体材质拉带）")
                            {
                                Row3 = i;
                            }
                            else if (Cell1.ToString().Trim() == "散件包装的柜体---可使用一片成型包装箱的明细")
                            {
                                Row4 = i;
                            }
                            else if (Cell1.ToString().Trim() == "注：以上包装箱适用地柜560深、720高散件柜体；吊柜300深、720高柜体；高柜560深2160高的散件柜体（除特定两种柜形外），外地所有玻璃层板单独包装")
                            {
                                Row5 = i;
                            }
                            else if (Cell1.ToString().Trim() == "散件包装的柜体--所有无法使用一片成型包装箱的柜体散件（玻璃层板单独包装）")
                            {
                                Row6 = i;
                            }
                            else if (Cell1.ToString().Trim() == "散件包装柜体的背板")
                            {
                                Row7 = i;
                            }
                            else if (Cell1.ToString().Trim() == "二、散件门板部分")
                            {
                                Row8 = i;
                            }
                            else if (Cell1.ToString().Trim() == "1.散件包装的门板---可使用一片成型包装箱的明细")
                            {
                                Row9 = i;
                            }
                            else if (Cell1.ToString().Trim() == "2.散件包装的门板--所有无法使用一片成型包装箱的门板散件")
                            {
                                Row10 = i;
                            }
                            else if (Cell1.ToString().Trim() == "四、装饰部件部分（本地、外地通用）")
                            {
                                Row11 = i;
                            }
                            if (Cell1.ToString().Trim() == "制单人：")
                            {
                                eRowNum = i;
                            }
                        }

                        DataRow SpeedDfBeautyTableRow = SpeedDfBeautyTable.NewRow();


                        for (int i = sRowNum; i < eRowNum; i++)
                        {
                            object cell = SpeedOfBeautyPackagingSheet.GetValue(i, 5);
                            if (cell == null)
                            {
                                continue;
                            }
                            for (int j = sColNum; j <= eColNum; j++)
                            {
                                switch (j)
                                {
                                    case 1:
                                        Object Num = SpeedOfBeautyPackagingSheet.GetValue(i, j);
                                        SpeedDfBeautyTableRow["PackingNumber"] = Num;
                                        break;
                                    case 2:
                                        Object Wide = SpeedOfBeautyPackagingSheet.GetValue(i, j);
                                        SpeedDfBeautyTableRow["Wide"] = Wide;
                                        break;
                                    case 3:
                                        Object High = SpeedOfBeautyPackagingSheet.GetValue(i, j);
                                        SpeedDfBeautyTableRow["High"] = High;
                                        break;
                                    case 4:
                                        Object Depth = SpeedOfBeautyPackagingSheet.GetValue(i, j);
                                        SpeedDfBeautyTableRow["Depth"] = Depth;
                                        break;
                                    case 5:
                                        SpeedDfBeautyTableRow["Cell"] = cell;
                                        break;
                                    case 6:
                                        Object CabinetType = SpeedOfBeautyPackagingSheet.GetValue(i, j);
                                        SpeedDfBeautyTableRow["CabinetType"] = CabinetType;
                                        break;
                                    case 7:
                                        Object NameOfPackagingMaterials = SpeedOfBeautyPackagingSheet.GetValue(i, j);
                                        SpeedDfBeautyTableRow["NameOfPackagingMaterials"] = NameOfPackagingMaterials;
                                        break;
                                    case 8:
                                        Object Qty = SpeedOfBeautyPackagingSheet.GetValue(i, j);
                                        SpeedDfBeautyTableRow["Qty"] = Qty;
                                        break;
                                    case 9:
                                        Object Unit = SpeedOfBeautyPackagingSheet.GetValue(i, j);
                                        SpeedDfBeautyTableRow["Unit"] = Unit;
                                        break;
                                    case 10:
                                        Object Remark = SpeedOfBeautyPackagingSheet.GetValue(i, j);
                                        SpeedDfBeautyTableRow["Remark"] = Remark;
                                        break;
                                }
                            }
                            SpeedDfBeautyTable.Rows.Add(SpeedDfBeautyTableRow.ItemArray);
                        }
                    }
                    #endregion
                    //平板门板作业单
                    #region
                    //数据所在Sheet
                    ExcelWorksheet PlateDoorSheetWorkSheet = null;
                    //打开的Sheet名
                    PlateDoorSheetWorkSheet = pck.Workbook.Worksheets["平板门板作业单"];
                    if (PlateDoorSheetWorkSheet.Name == "平板门板作业单")
                    {
                        //最大列
                        int maxColumnNum = PlateDoorSheetWorkSheet.Dimension.End.Column;
                        //最小列
                        int minColumnNum = PlateDoorSheetWorkSheet.Dimension.Start.Column;
                        //最小行
                        int minRowNum = PlateDoorSheetWorkSheet.Dimension.Start.Row;
                        //最大行
                        int maxRowNum = PlateDoorSheetWorkSheet.Dimension.End.Row;
                        //开始行
                        int sRowNum = 7;
                        //结束行
                        int eRowNum = 0;
                        //区域A的开始栏位
                        int sColNum = 1;
                        //区域A的结束栏位
                        int eColNum = 13;

                        for (int i = sRowNum; i < maxRowNum; i++)
                        {
                            object PlateName = PlateDoorSheetWorkSheet.Cells[i, 1].Value;
                            if (PlateName == null)
                            {
                                continue;
                            }
                            Object EndRow = PlateDoorSheetWorkSheet.Cells[i, 1].Value;
                            if (EndRow.ToString() == "拆解人")
                            {
                                eRowNum = i - 2;
                                break;
                            }
                        }


                        DataRow PlateDoorSheetWorkSheetTableRow = PlateDoorSheetWorkSheetTable.NewRow();

                        //创建datatable存放箱体序号
                        DataTable BoxNum = new DataTable();
                        BoxNum.Columns.Add(string.Format("BoxNumId"), Type.GetType("System.String"));
                        BoxNum.Columns.Add(string.Format("BoxNum"), Type.GetType("System.String"));
                        BoxNum.Columns.Add(string.Format("OrderDetailId"), Type.GetType("System.String"));
                        BoxNum.Columns.Add(string.Format("Identification"), Type.GetType("System.String"));
                        DataRow BoxRow = BoxNum.NewRow();
                        for (int i = sRowNum; i < eRowNum; i++)
                        {
                            string BoxNumId = CStr(PlateDoorSheetWorkSheet.Cells[i, 1].Value);
                            string BoxName = CStr(PlateDoorSheetWorkSheet.Cells[i, 5].Value);
                            if (BoxName == "" || BoxName == null)
                            {
                                continue;
                            }
                            else
                            {
                                BoxRow["BoxNumId"] = System.Guid.NewGuid().ToString().Substring(0, 12).ToUpper();
                                BoxRow["BoxNum"] = BoxNumId;
                                BoxRow["OrderDetailId"] = ParentId;
                            }
                            BoxNum.Rows.Add(BoxRow.ItemArray);
                        }
                        //调用存储过程，判断数据库表是否存在记录
                        SqlCommand com = new SqlCommand();
                        SqlConnection con = new SqlConnection("Data Source=192.168.124.72;Initial Catalog=OrBitXI;User ID=sa;PassWord=admin@2017");
                        con.Open();
                        com.CommandText = "Pro_SelectCaseNumber";
                        com.Connection = con;
                        com.CommandType = CommandType.StoredProcedure;
                        SqlParameter paremeter = new SqlParameter("@Pro_SelectCaseNumber", SqlDbType.Structured)
                        {
                            Value = BoxNum
                        };
                        com.ExecuteNonQuery();
                        com.Parameters.Add(paremeter);
                        com.Parameters.Add(new SqlParameter("@return", SqlDbType.Int));
                        com.Parameters["@return"].Direction = ParameterDirection.ReturnValue;
                        com.ExecuteNonQuery();
                        //数据库存储过程返回0表示存在记录
                        if (Convert.ToInt32(com.Parameters["@return"].Value) == 0)
                        {
                            for (int i = sRowNum; i < eRowNum; i++)
                            {
                                Object PlateName = PlateDoorSheetWorkSheet.Cells[i, 5].Value;
                                if (PlateName == null)
                                {
                                    continue;
                                }
                                for (int j = sColNum; j <= eColNum; j++)
                                {
                                    ExcelRange Rang = PlateDoorSheetWorkSheet.Cells[i, j];
                                    object objectCellValue = PlateDoorSheetWorkSheet.GetValue(i, j);//单元格数据
                                    string CellValue = objectCellValue != null ? objectCellValue.ToString().Trim() : "";
                                    if (Rang.Merge)
                                    {
                                        CellValue = GetMergeValue(PlateDoorSheetWorkSheet, i, j);
                                    }
                                    switch (j)
                                    {
                                        case 1:
                                            PlateDoorSheetWorkSheetTableRow["OrderDetailId"] = CellValue;
                                            break;
                                        case 2:
                                            if (CellValue == "" || CellValue == null)
                                            {
                                                CellValue = "0";
                                                Convert.ToSingle(CellValue);
                                                PlateDoorSheetWorkSheetTableRow["FWide"] = CellValue;
                                            }
                                            else
                                            {
                                                if (System.Text.RegularExpressions.Regex.IsMatch(CellValue, @"^[-+]?[0-9]*\.?[0-9]+$"))
                                                {

                                                    PlateDoorSheetWorkSheetTableRow["FWide"] = CellValue;
                                                }
                                                else
                                                {
                                                    MessageBox.Show("请检查工作表" + PlateDoorSheetWorkSheet.Name + "第" + i + "行第" + j + "列数据是否正确");
                                                }
                                            }
                                            //newARow["FWide"] = CellValue;
                                            break;
                                        case 3:
                                            if (CellValue == "" || CellValue == null)
                                            {
                                                CellValue = "0";
                                                Convert.ToSingle(CellValue);
                                                PlateDoorSheetWorkSheetTableRow["FLong"] = CellValue;
                                            }
                                            else
                                            {
                                                if (System.Text.RegularExpressions.Regex.IsMatch(CellValue, @"^[-+]?[0-9]*\.?[0-9]+$"))
                                                {

                                                    PlateDoorSheetWorkSheetTableRow["FLong"] = CellValue;
                                                }
                                                else
                                                {
                                                    MessageBox.Show("请检查工作表" + PlateDoorSheetWorkSheet.Name + "第" + i + "行第" + j + "列数据是否正确");
                                                }
                                            }
                                            //newARow["FLong"] = CellValue;
                                            break;
                                        case 4:
                                            if (CellValue == "" || CellValue == null)
                                            {
                                                CellValue = "0";
                                                Convert.ToSingle(CellValue);
                                                PlateDoorSheetWorkSheetTableRow["Qty"] = CellValue;
                                            }
                                            else
                                            {
                                                if (System.Text.RegularExpressions.Regex.IsMatch(CellValue, @"^[-+]?[0-9]*\.?[0-9]+$"))
                                                {

                                                    PlateDoorSheetWorkSheetTableRow["Qty"] = CellValue;
                                                }
                                                else
                                                {
                                                    MessageBox.Show("请检查工作表" + PlateDoorSheetWorkSheet.Name + "第" + i + "行第" + j + "列数据是否正确");
                                                }
                                                //newARow["Qty"] = CellValue;
                                            }
                                            break;
                                        case 5:
                                            PlateDoorSheetWorkSheetTableRow["PlateName"] = CellValue;
                                            break;
                                        case 6:
                                            if (CellValue == "" || CellValue == null)
                                            {
                                                CellValue = "0";
                                                Convert.ToSingle(CellValue);
                                                PlateDoorSheetWorkSheetTableRow["CutThick"] = CellValue;
                                            }
                                            else
                                            {
                                                if (System.Text.RegularExpressions.Regex.IsMatch(CellValue, @"^[-+]?[0-9]*\.?[0-9]+$"))
                                                {

                                                    PlateDoorSheetWorkSheetTableRow["CutThick"] = CellValue;
                                                }
                                                else
                                                {
                                                    MessageBox.Show("请检查工作表" + PlateDoorSheetWorkSheet.Name + "第" + i + "行第" + j + "列数据是否正确");
                                                }
                                                //newARow["CutThick"] = CellValue;
                                            }
                                            //newARow["CutThick"] = CellValue;
                                            break;
                                        case 7:
                                            if (CellValue == "" || CellValue == null)
                                            {
                                                CellValue = "0";
                                                Convert.ToSingle(CellValue);
                                                PlateDoorSheetWorkSheetTableRow["CutWide"] = CellValue;
                                            }
                                            else
                                            {
                                                if (System.Text.RegularExpressions.Regex.IsMatch(CellValue, @"^[-+]?[0-9]*\.?[0-9]+$"))
                                                {

                                                    PlateDoorSheetWorkSheetTableRow["CutWide"] = CellValue;
                                                }
                                                else
                                                {
                                                    MessageBox.Show("请检查工作表" + PlateDoorSheetWorkSheet.Name + "第" + i + "行第" + j + "列数据是否正确");
                                                }
                                                //newARow["CutQty"] = CellValue;
                                            }
                                            //newARow["CutWide"] = CellValue;
                                            break;
                                        case 8:
                                            if (CellValue == "" || CellValue == null)
                                            {
                                                CellValue = "0";
                                                Convert.ToSingle(CellValue);
                                                PlateDoorSheetWorkSheetTableRow["CutLong"] = CellValue;
                                            }
                                            else
                                            {
                                                if (System.Text.RegularExpressions.Regex.IsMatch(CellValue, @"^[-+]?[0-9]*\.?[0-9]+$"))
                                                {

                                                    PlateDoorSheetWorkSheetTableRow["CutLong"] = CellValue;
                                                }
                                                else
                                                {
                                                    MessageBox.Show("请检查工作表" + PlateDoorSheetWorkSheet.Name + "第" + i + "行第" + j + "列数据是否正确");
                                                }
                                                //newARow["CutLong"] = CellValue;
                                            }
                                            //newARow["CutLong"] = CellValue;
                                            break;
                                        case 9:
                                            if (CellValue == "" || CellValue == null)
                                            {
                                                CellValue = "0";
                                                Convert.ToSingle(CellValue);
                                                PlateDoorSheetWorkSheetTableRow["CutQty"] = CellValue;
                                            }
                                            else
                                            {
                                                if (System.Text.RegularExpressions.Regex.IsMatch(CellValue, @"^[-+]?[0-9]*\.?[0-9]+$"))
                                                {

                                                    PlateDoorSheetWorkSheetTableRow["CutQty"] = CellValue;
                                                }
                                                else
                                                {
                                                    MessageBox.Show("请检查工作表" + PlateDoorSheetWorkSheet.Name + "第" + i + "行第" + j + "列数据是否正确");
                                                }
                                                //newARow["CutQty"] = CellValue;
                                            }
                                            break;
                                        case 10: PlateDoorSheetWorkSheetTableRow["MaterialDescription"] = CellValue; break;
                                        case 11: PlateDoorSheetWorkSheetTableRow["MaterialNote"] = CellValue; break;
                                        case 12: PlateDoorSheetWorkSheetTableRow["DisplayMaterialSummary"] = CellValue; break;
                                        case 13: PlateDoorSheetWorkSheetTableRow["AreaOfContour"] = CellValue; break;
                                    }
                                }
                            }
                            PlateDoorSheetWorkSheetTable.Rows.Add(PlateDoorSheetWorkSheetTableRow.ItemArray);
                        }
                    }
                    #endregion
                    //平板门板领料单
                    #region
                    //数据所在Sheet
                    ExcelWorksheet PlateDoorHandleSheet = null;
                    //打开的Sheet名
                    PlateDoorHandleSheet = pck.Workbook.Worksheets["平板门板领料单"];
                    if (PlateDoorHandleSheet.Name == "平板门板领料单")
                    {
                        //最大列
                        int maxColumnNum = PlateDoorHandleSheet.Dimension.End.Column;
                        //最小列
                        int minColumnNum = PlateDoorHandleSheet.Dimension.Start.Column;
                        //最小行
                        int minRowNum = PlateDoorHandleSheet.Dimension.Start.Row;
                        //最大行
                        int maxRowNum = PlateDoorHandleSheet.Dimension.End.Row;
                        //开始行
                        int sRowNum = 5;
                        //结束行
                        int eRowNum = 0;
                        //区域A的开始栏位
                        int sColNum = 1;
                        //区域A的结束栏位
                        int eColNum = 7;

                        for (int i = sRowNum; i <= maxRowNum; i++)
                        {
                            object PlateDescription = PlateDoorHandleSheet.Cells[i, 1].Value;
                            if (PlateDescription == null)
                            {
                                continue;
                            }
                            if (PlateDescription.ToString() == "拆解人")
                            {
                                eRowNum = i;
                                break;
                            }
                        }


                        DataRow PlateDoorHandleSheetTableRow = PlateDoorHandleSheetTable.NewRow();

                        for (int i = sRowNum; i < eRowNum; i++)
                        {
                            Object Description = PlateDoorHandleSheet.Cells[i, 3].Value;
                            if (Description == null)
                            {
                                continue;
                            }
                            for (int j = sColNum; j < eColNum; j++)
                            {
                                switch (j)
                                {
                                    case 1:
                                        Object CateGory = PlateDoorHandleSheet.Cells[i, j].Value;
                                        PlateDoorHandleSheetTableRow["CateGory"] = CateGory;
                                        break;
                                    case 2:
                                        Object NumericalOrder = PlateDoorHandleSheet.Cells[i, j].Value;
                                        PlateDoorHandleSheetTableRow["NumericalOrder"] = NumericalOrder;
                                        break;
                                    case 3:
                                        Object ProductDes = PlateDoorHandleSheet.Cells[i, j].Value;
                                        PlateDoorHandleSheetTableRow["ProductDes"] = ProductDes;
                                        break;
                                    case 4:
                                        Object Qty = PlateDoorHandleSheet.Cells[i, j].Value;
                                        if (Qty == null)
                                        {
                                            Qty = 0;
                                        }
                                        PlateDoorHandleSheetTableRow["Qty"] = Qty;
                                        break;
                                    case 5:
                                        Object Unit = PlateDoorHandleSheet.Cells[i, j].Value;
                                        PlateDoorHandleSheetTableRow["Unit"] = Unit;
                                        break;
                                    case 6:
                                        Object Remark = PlateDoorHandleSheet.Cells[i, j].Value;
                                        PlateDoorHandleSheetTableRow["Remark"] = Remark;
                                        break;
                                }
                            }
                            PlateDoorHandleSheetTable.Rows.Add(PlateDoorHandleSheetTableRow.ItemArray);
                        }
                    }
                    #endregion
                    //古典门板作业单
                    #region
                    //数据所在Sheet
                    ExcelWorksheet ClassicDoorSheet = null;
                    //打开的Sheet名
                    ClassicDoorSheet = pck.Workbook.Worksheets["古典门板作业单"];
                    if (ClassicDoorSheet.Name == "古典门板作业单")
                    {
                        //最大列
                        int maxColumnNum = ClassicDoorSheet.Dimension.End.Column;
                        //最小列
                        int minColumnNum = ClassicDoorSheet.Dimension.Start.Column;
                        //最小行
                        int minRowNum = ClassicDoorSheet.Dimension.Start.Row;
                        //最大行
                        int maxRowNum = ClassicDoorSheet.Dimension.End.Row;
                        //开始行
                        int sRowNum = 7;
                        //结束行
                        int eRowNum = 0;
                        //区域A的开始栏位
                        int sColNum = 1;
                        //区域A的结束栏位
                        int eColNum = 13;

                        for (int i = sRowNum; i < maxRowNum; i++)
                        {
                            Object plateName = ClassicDoorSheet.Cells[i, 1].Value;
                            if (plateName == null)
                            {
                                continue;
                            }
                            if (plateName.ToString() == "拆解员")
                            {
                                eRowNum = i - 3;
                                break;
                            }
                        }

                        DataRow ClassicDoorSheetTableRow = ClassicDoorSheetTable.NewRow();

                        //创建datatable存放箱体序号
                        DataTable BoxNum = new DataTable();
                        BoxNum.Columns.Add(string.Format("BoxNumId"), Type.GetType("System.String"));
                        BoxNum.Columns.Add(string.Format("BoxNum"), Type.GetType("System.String"));
                        BoxNum.Columns.Add(string.Format("OrderDetailId"), Type.GetType("System.String"));
                        BoxNum.Columns.Add(string.Format("Identification"), Type.GetType("System.String"));
                        DataRow BoxRow = BoxNum.NewRow();
                        for (int i = sRowNum; i < eRowNum; i++)
                        {
                            string BoxNumId = CStr(ClassicDoorSheet.Cells[i, 1].Value);
                            string BoxName = CStr(ClassicDoorSheet.Cells[i, 5].Value);
                            if (BoxName == "" || BoxName == null)
                            {
                                continue;
                            }
                            else
                            {
                                BoxRow["BoxNumId"] = System.Guid.NewGuid().ToString().Substring(0, 12).ToUpper();
                                BoxRow["BoxNum"] = BoxNumId;
                                BoxRow["OrderDetailId"] = ParentId;
                            }
                            BoxNum.Rows.Add(BoxRow.ItemArray);
                        }
                        //调用存储过程，判断数据库表是否存在记录
                        SqlCommand com = new SqlCommand();
                        SqlConnection con = new SqlConnection("Data Source=192.168.124.72;Initial Catalog=OrBitXI;User ID=sa;PassWord=admin@2017");
                        con.Open();
                        com.CommandText = "Pro_SelectCaseNumber";
                        com.Connection = con;
                        com.CommandType = CommandType.StoredProcedure;
                        SqlParameter paremeter = new SqlParameter("@Pro_SelectCaseNumber", SqlDbType.Structured)
                        {
                            Value = BoxNum
                        };
                        com.ExecuteNonQuery();
                        com.Parameters.Add(paremeter);
                        com.Parameters.Add(new SqlParameter("@return", SqlDbType.Int));
                        com.Parameters["@return"].Direction = ParameterDirection.ReturnValue;
                        com.ExecuteNonQuery();
                        //数据库存储过程返回0表示存在记录
                        if (Convert.ToInt32(com.Parameters["@return"].Value) == 0)
                        {
                            for (int i = sRowNum; i < eRowNum; i++)
                            {
                                Object platename = ClassicDoorSheet.Cells[i, 5].Value;
                                if (platename == null)
                                {
                                    continue;
                                }
                                for (int j = sColNum; j <= eColNum; j++)
                                {
                                    ExcelRange Rang = ClassicDoorSheet.Cells[i, j];
                                    object objectCellValue = ClassicDoorSheet.GetValue(i, j);//单元格数据
                                    string CellValue = objectCellValue != null ? objectCellValue.ToString().Trim() : "";
                                    if (Rang.Merge)
                                    {
                                        CellValue = GetMergeValue(ClassicDoorSheet, i, j);
                                    }
                                    switch (j)
                                    {
                                        case 1:
                                            ClassicDoorSheetTableRow["OrderDetailId"] = CellValue;
                                            break;
                                        case 2:
                                            if (CellValue == "" || CellValue == null)
                                            {
                                                CellValue = "0";
                                                Convert.ToSingle(CellValue);
                                                ClassicDoorSheetTableRow["FWide"] = CellValue;
                                            }
                                            else
                                            {
                                                if (System.Text.RegularExpressions.Regex.IsMatch(CellValue, @"^[-+]?[0-9]*\.?[0-9]+$"))
                                                {

                                                    ClassicDoorSheetTableRow["FWide"] = CellValue;
                                                }
                                                else
                                                {
                                                    MessageBox.Show("请检查工作表" + ClassicDoorSheet.Name + "第" + i + "行第" + j + "列数据是否正确");
                                                }
                                            }
                                            //newARow["FWide"] = CellValue;
                                            break;
                                        case 3:
                                            if (CellValue == "" || CellValue == null)
                                            {
                                                CellValue = "0";
                                                Convert.ToSingle(CellValue);
                                                ClassicDoorSheetTableRow["FLong"] = CellValue;
                                            }
                                            else
                                            {
                                                if (System.Text.RegularExpressions.Regex.IsMatch(CellValue, @"^[-+]?[0-9]*\.?[0-9]+$"))
                                                {

                                                    ClassicDoorSheetTableRow["FLong"] = CellValue;
                                                }
                                                else
                                                {
                                                    MessageBox.Show("请检查工作表" + ClassicDoorSheet.Name + "第" + i + "行第" + j + "列数据是否正确");
                                                }
                                            }
                                            //newARow["FLong"] = CellValue;
                                            break;
                                        case 4:
                                            if (CellValue == "" || CellValue == null)
                                            {
                                                CellValue = "0";
                                                Convert.ToSingle(CellValue);
                                                ClassicDoorSheetTableRow["Qty"] = CellValue;
                                            }
                                            else
                                            {
                                                if (System.Text.RegularExpressions.Regex.IsMatch(CellValue, @"^[-+]?[0-9]*\.?[0-9]+$"))
                                                {

                                                    ClassicDoorSheetTableRow["Qty"] = CellValue;
                                                }
                                                else
                                                {
                                                    MessageBox.Show("请检查工作表" + ClassicDoorSheet.Name + "第" + i + "行第" + j + "列数据是否正确");
                                                }
                                                //newARow["Qty"] = CellValue;
                                            }
                                            break;
                                        case 5:
                                            ClassicDoorSheetTableRow["PlateName"] = CellValue;
                                            break;
                                        case 6:
                                            if (CellValue == "" || CellValue == null)
                                            {
                                                CellValue = "0";
                                                Convert.ToSingle(CellValue);
                                                ClassicDoorSheetTableRow["CutThick"] = CellValue;
                                            }
                                            else
                                            {
                                                if (System.Text.RegularExpressions.Regex.IsMatch(CellValue, @"^[-+]?[0-9]*\.?[0-9]+$"))
                                                {

                                                    ClassicDoorSheetTableRow["CutThick"] = CellValue;
                                                }
                                                else
                                                {
                                                    MessageBox.Show("请检查工作表" + ClassicDoorSheet.Name + "第" + i + "行第" + j + "列数据是否正确");
                                                }
                                                //newARow["CutThick"] = CellValue;
                                            }
                                            //newARow["CutThick"] = CellValue;
                                            break;
                                        case 7:
                                            if (CellValue == "" || CellValue == null)
                                            {
                                                CellValue = "0";
                                                Convert.ToSingle(CellValue);
                                                ClassicDoorSheetTableRow["CutWide"] = CellValue;
                                            }
                                            else
                                            {
                                                if (System.Text.RegularExpressions.Regex.IsMatch(CellValue, @"^[-+]?[0-9]*\.?[0-9]+$"))
                                                {

                                                    ClassicDoorSheetTableRow["CutWide"] = CellValue;
                                                }
                                                else
                                                {
                                                    MessageBox.Show("请检查工作表" + ClassicDoorSheet.Name + "第" + i + "行第" + j + "列数据是否正确");
                                                }
                                                //newARow["CutQty"] = CellValue;
                                            }
                                            //newARow["CutWide"] = CellValue;
                                            break;
                                        case 8:
                                            if (CellValue == "" || CellValue == null)
                                            {
                                                CellValue = "0";
                                                Convert.ToSingle(CellValue);
                                                ClassicDoorSheetTableRow["CutLong"] = CellValue;
                                            }
                                            else
                                            {
                                                if (System.Text.RegularExpressions.Regex.IsMatch(CellValue, @"^[-+]?[0-9]*\.?[0-9]+$"))
                                                {

                                                    ClassicDoorSheetTableRow["CutLong"] = CellValue;
                                                }
                                                else
                                                {
                                                    MessageBox.Show("请检查工作表" + ClassicDoorSheet.Name + "第" + i + "行第" + j + "列数据是否正确");
                                                }
                                                //newARow["CutLong"] = CellValue;
                                            }
                                            //newARow["CutLong"] = CellValue;
                                            break;
                                        case 9:
                                            if (CellValue == "" || CellValue == null)
                                            {
                                                CellValue = "0";
                                                Convert.ToSingle(CellValue);
                                                ClassicDoorSheetTableRow["CutQty"] = CellValue;
                                            }
                                            else
                                            {
                                                if (System.Text.RegularExpressions.Regex.IsMatch(CellValue, @"^[-+]?[0-9]*\.?[0-9]+$"))
                                                {

                                                    ClassicDoorSheetTableRow["CutQty"] = CellValue;
                                                }
                                                else
                                                {
                                                    MessageBox.Show("请检查工作表" + ClassicDoorSheet.Name + "第" + i + "行第" + j + "列数据是否正确");
                                                }
                                            }
                                            break;
                                        case 10: ClassicDoorSheetTableRow["MaterialDescription"] = CellValue; break;
                                        case 11: ClassicDoorSheetTableRow["MaterialNote"] = CellValue; break;
                                        case 12: ClassicDoorSheetTableRow["DisplayMaterialSummary"] = CellValue; break;
                                        case 13: ClassicDoorSheetTableRow["AreaOfContour"] = CellValue; break;
                                    }
                                }
                            }
                            ClassicDoorSheetTable.Rows.Add(ClassicDoorSheetTableRow.ItemArray);
                        }
                    }
                    #endregion
                    //古典门板领料单
                    #region
                    //数据所在Sheet
                    ExcelWorksheet ClassicDoorHandleSheet = null;
                    //打开的Sheet名
                    ClassicDoorHandleSheet = pck.Workbook.Worksheets["古典门板领料单"];
                    if (ClassicDoorHandleSheet.Name == "古典门板领料单")
                    {
                        //最大列
                        int maxColumnNum = ClassicDoorHandleSheet.Dimension.End.Column;
                        //最小列
                        int minColumnNum = ClassicDoorHandleSheet.Dimension.Start.Column;
                        //最小行
                        int minRowNum = ClassicDoorHandleSheet.Dimension.Start.Row;
                        //最大行
                        int maxRowNum = ClassicDoorHandleSheet.Dimension.End.Row;
                        //开始行
                        int sRowNum = 6;
                        //结束行
                        int eRowNum = 0;
                        //区域A的开始栏位
                        int sColNum = 1;
                        //区域A的结束栏位
                        int eColNum = 7;

                        for (int i = sRowNum; i < maxRowNum; i++)
                        {
                            object PlateDescription = ClassicDoorHandleSheet.Cells[i, 1].Value;
                            if (PlateDescription == null)
                            {
                                continue;
                            }
                            if (PlateDescription.ToString() == "拆解人")
                            {
                                eRowNum = i - 1;
                                break;
                            }
                        }

                        DataRow ClassicDoorHandleSheetTableRow = ClassicDoorHandleSheetTable.NewRow();
                        //创建datatable存放箱体序号
                        DataTable BoxNum = new DataTable();
                        BoxNum.Columns.Add(string.Format("BoxNumId"), Type.GetType("System.String"));
                        BoxNum.Columns.Add(string.Format("BoxNum"), Type.GetType("System.String"));
                        BoxNum.Columns.Add(string.Format("OrderDetailId"), Type.GetType("System.String"));
                        BoxNum.Columns.Add(string.Format("Identification"), Type.GetType("System.String"));
                        DataRow BoxRow = BoxNum.NewRow();
                        for (int i = sRowNum; i < eRowNum; i++)
                        {
                            string BoxNumId = CStr(ClassicDoorHandleSheet.Cells[i, 1].Value);
                            string BoxName = CStr(ClassicDoorHandleSheet.Cells[i, 5].Value);
                            if (BoxName == "" || BoxName == null)
                            {
                                continue;
                            }
                            else
                            {
                                BoxRow["BoxNumId"] = System.Guid.NewGuid().ToString().Substring(0, 12).ToUpper();
                                BoxRow["BoxNum"] = BoxNumId;
                                BoxRow["OrderDetailId"] = ParentId;
                            }
                            BoxNum.Rows.Add(BoxRow.ItemArray);
                        }
                        //调用存储过程，判断数据库表是否存在记录
                        SqlCommand com = new SqlCommand();
                        SqlConnection con = new SqlConnection("Data Source=192.168.124.72;Initial Catalog=OrBitXI;User ID=sa;PassWord=admin@2017");
                        con.Open();
                        com.CommandText = "Pro_SelectCaseNumber";
                        com.Connection = con;
                        com.CommandType = CommandType.StoredProcedure;
                        SqlParameter paremeter = new SqlParameter("@Pro_SelectCaseNumber", SqlDbType.Structured)
                        {
                            Value = BoxNum
                        };
                        com.ExecuteNonQuery();
                        com.Parameters.Add(paremeter);
                        com.Parameters.Add(new SqlParameter("@return", SqlDbType.Int));
                        com.Parameters["@return"].Direction = ParameterDirection.ReturnValue;
                        //数据库存储过程返回0表示存在记录
                        if (Convert.ToInt32(com.Parameters["@return"].Value) == 0)
                        {
                            for (int i = sRowNum; i < eRowNum; i++)
                            {
                                object PlateName = ClassicDoorHandleSheet.Cells[i, 3].Value;
                                if (PlateName == null)
                                {
                                    continue;
                                }
                                for (int j = sColNum; j < eColNum; j++)
                                {
                                    switch (j)
                                    {
                                        case 1:
                                            object CateGory = ClassicDoorHandleSheet.Cells[i, j].Value;
                                            ClassicDoorHandleSheetTableRow["CateGory"] = CateGory;
                                            break;
                                        case 2:
                                            object NumericalOrder = ClassicDoorHandleSheet.Cells[i, j].Value;
                                            ClassicDoorHandleSheetTableRow["NumericalOrder"] = NumericalOrder;
                                            break;
                                        case 3:
                                            object ProductDes = ClassicDoorHandleSheet.Cells[i, j].Value;
                                            ClassicDoorHandleSheetTableRow["ProductDes"] = ProductDes;
                                            break;
                                        case 4:
                                            object Qty = ClassicDoorHandleSheet.Cells[i, j].Value;
                                            ClassicDoorHandleSheetTableRow["Qty"] = Qty;
                                            break;
                                        case 5:
                                            object Unit = ClassicDoorHandleSheet.Cells[i, j].Value;
                                            ClassicDoorHandleSheetTableRow["Unit"] = Unit;
                                            break;
                                        case 6:
                                            object Remark = ClassicDoorHandleSheet.Cells[i, j].Value;
                                            ClassicDoorHandleSheetTableRow["Remark"] = Remark;
                                            break;
                                    }
                                }
                                ClassicDoorHandleSheetTable.Rows.Add(ClassicDoorHandleSheetTableRow.ItemArray);
                            }
                        }
                    }
                    #endregion
                    //西迪布赛作业单
                    #region
                    //数据所在Sheet
                    ExcelWorksheet SidibJobListSheet = null;
                    //打开的Sheet名
                    SidibJobListSheet = pck.Workbook.Worksheets["西迪布赛作业单"];
                    if (SidibJobListSheet.Name == "西迪布赛作业单")
                    {
                        //最大列
                        int maxColumnNum = SidibJobListSheet.Dimension.End.Column;
                        //最小列
                        int minColumnNum = SidibJobListSheet.Dimension.Start.Column;
                        //最小行
                        int minRowNum = SidibJobListSheet.Dimension.Start.Row;
                        //最大行
                        int maxRowNum = SidibJobListSheet.Dimension.End.Row;
                        //开始行
                        int sRowNum = 8;
                        //结束行
                        int eRowNum = 0;
                        //区域A的开始栏位
                        int sColNum = 1;
                        //区域A的结束栏位
                        int eColNum = 15;

                        for (int i = sRowNum; i < maxRowNum; i++)
                        {
                            object BoxNum = SidibJobListSheet.Cells[i, 1].Value;
                            if (BoxNum == null)
                            {
                                continue;
                            }
                            string BoxNum1 = BoxNum.ToString();
                            String a = BoxNum1.Replace("\n", "");
                            if (a.ToString().Trim() == "此单分下料尺寸和成型尺寸2种，请生产各工段注意！如有材质、颜色、尺寸不明请和工艺组联系并确认！")
                            {
                                eRowNum = i - 1;
                                break;
                            }
                        }

                        DataRow SidibJobListSheetTableRow = SidibJobListSheetTable.NewRow();

                        for (int i = sRowNum; i < eRowNum; i++)
                        {
                            object PlateName = SidibJobListSheet.GetValue(i, 5);
                            if (PlateName == null)
                            {
                                continue;
                            }
                            for (int j = sColNum; j < eColNum; j++)
                            {
                                //判断单元格是否是合并单元格并获取值
                                ExcelRange Rang = SidibJobListSheet.Cells[i, j];
                                object objectCellValue = SidibJobListSheet.GetValue(i, j);//单元格数据
                                string CellValue = objectCellValue != null ? objectCellValue.ToString().Trim() : "";
                                if (Rang.Merge)
                                {
                                    CellValue = GetMergeValue(SidibJobListSheet, i, j);
                                }
                                switch (j)
                                {
                                    case 1:
                                        SidibJobListSheetTableRow["OrderDetailId"] = CellValue;
                                        break;
                                    case 2:
                                        //Object FWide = SidibJobListSheet.GetValue(i, j);
                                        if (CellValue == "")
                                        {
                                            Single cellvalue1 = 0;
                                            SidibJobListSheetTableRow["FWide"] = cellvalue1;
                                        }
                                        else
                                        {
                                            SidibJobListSheetTableRow["FWide"] = CellValue;
                                        }
                                        break;
                                    case 3:
                                        //Object FHigh = SidibJobListSheet.GetValue(i, j);
                                        if (CellValue == "")
                                        {
                                            SidibJobListSheetTableRow["FHigh"] = 0;
                                        }
                                        else
                                        {
                                            SidibJobListSheetTableRow["FHigh"] = CellValue;
                                        }
                                        break;
                                    case 4:
                                        //Object FQty = SidibJobListSheet.GetValue(i, j);
                                        if (CellValue == "")
                                        {
                                            SidibJobListSheetTableRow["FQty"] = 0;
                                        }
                                        else
                                        {
                                            SidibJobListSheetTableRow["FQty"] = CellValue;
                                        }
                                        break;
                                    case 5:
                                        //Object PlateName1 = SidibJobListSheet.GetValue(i, j);
                                        SidibJobListSheetTableRow["PlateName"] = CellValue;
                                        break;
                                    case 6:
                                        //Object CutThick = SidibJobListSheet.GetValue(i, j);
                                        SidibJobListSheetTableRow["CutThick"] = CellValue;
                                        break;
                                    case 7:
                                        //Object CutWide = SidibJobListSheet.GetValue(i, j);
                                        SidibJobListSheetTableRow["CutWide"] = CellValue;
                                        break;
                                    case 8:
                                        //Object CutHigh = SidibJobListSheet.GetValue(i, j);
                                        SidibJobListSheetTableRow["CutHigh"] = CellValue;
                                        break;
                                    case 9:
                                        //Object CutQty = SidibJobListSheet.GetValue(i, j);
                                        SidibJobListSheetTableRow["CutQty"] = CellValue;
                                        break;
                                    case 10:
                                        Object MaterialDescription = SidibJobListSheet.GetValue(i, j);
                                        Object MaterialDescription1 = SidibJobListSheet.GetValue(i, j + 1);
                                        if (MaterialDescription == null)
                                        {
                                            MaterialDescription = "";
                                        }
                                        if (MaterialDescription1 == null)
                                        {
                                            MaterialDescription1 = "";
                                        }
                                        SidibJobListSheetTableRow["MaterialDescription"] = MaterialDescription + MaterialDescription1.ToString();
                                        break;
                                    case 12:
                                        //Object MaterialNote = SidibJobListSheet.GetValue(i, j);
                                        SidibJobListSheetTableRow["MaterialNote"] = CellValue;
                                        break;
                                    case 13:
                                        //Object DisplayMaterialSummary = SidibJobListSheet.GetValue(i, j);
                                        SidibJobListSheetTableRow["DisplayMaterialSummary"] = CellValue;
                                        break;
                                    case 14:
                                        //Object FaceConduct = SidibJobListSheet.GetValue(i, j);
                                        SidibJobListSheetTableRow["FaceConduct"] = CellValue;
                                        break;
                                }
                            }
                            SidibJobListSheetTable.Rows.Add(SidibJobListSheetTableRow.ItemArray);
                        }
                    }
                    #endregion
                    //西迪布赛领料单
                    #region
                    //数据所在Sheet
                    ExcelWorksheet SiddibRequisitionFormSheet = null;
                    //打开的Sheet名
                    SiddibRequisitionFormSheet = pck.Workbook.Worksheets["西迪布赛领料单"];
                    if (SiddibRequisitionFormSheet.Name == "西迪布赛领料单")
                    {
                        //最大列
                        int maxColumnNum = SiddibRequisitionFormSheet.Dimension.End.Column;
                        //最小列
                        int minColumnNum = SiddibRequisitionFormSheet.Dimension.Start.Column;
                        //最小行
                        int minRowNum = SiddibRequisitionFormSheet.Dimension.Start.Row;
                        //最大行
                        int maxRowNum = SiddibRequisitionFormSheet.Dimension.End.Row;
                        //开始行
                        int sRowNum = 5;
                        //结束行
                        int eRowNum = 0;
                        //区域A的开始栏位
                        int sColNum = 1;
                        //区域A的结束栏位
                        int eColNum = 6;

                        for (int i = sRowNum; i < maxRowNum; i++)
                        {
                            object RowNum = SiddibRequisitionFormSheet.Cells[i, 1].Value;
                            if (RowNum == null)
                            {
                                continue;
                            }
                            if (RowNum.ToString() == "拆解员")
                            {
                                eRowNum = i - 1;
                                break;
                            }
                        }

                        DataRow SiddibRequisitionFormSheetTableRow = SiddibRequisitionFormSheetTable.NewRow();

                        //为领料单创建一个datatable
                        DataTable PickingTable1 = new DataTable();
                        PickingTable1.Columns.Add(string.Format("ProductDescription"), Type.GetType("System.String"));//物料描述
                        PickingTable1.Columns.Add(string.Format("ProductName"), Type.GetType("System.String"));
                        DataRow Pickingrows1 = PickingTable1.NewRow();
                        //读取物料描述信息存放在datatable中
                        for (int i = sRowNum; i < eRowNum; i++)
                        {
                            object ProductDescription = CStr(SiddibRequisitionFormSheet.Cells[i, 3].Value);
                            if (ProductDescription == null)
                            {
                                continue;
                            }
                            Pickingrows1["ProductDescription"] = ProductDescription.ToString();
                            PickingTable1.Rows.Add(Pickingrows1.ItemArray);

                        }
                        SqlConnection con = new SqlConnection("Data Source=192.168.124.72;Initial Catalog=OrBitXI;User ID=sa;PassWord=admin@2017");
                        con.Open();
                        //调用存储过程根据物料描述获取到物料编号存放在另一个datatable中
                        SqlCommand Pickingcmda = new SqlCommand();
                        Pickingcmda.CommandText = "Pro_GetProductName";
                        Pickingcmda.Connection = con;
                        Pickingcmda.CommandType = CommandType.StoredProcedure;
                        SqlParameter parameters =
                        new SqlParameter("@Pro_GetProductName", SqlDbType.Structured)
                        {
                            Value = PickingTable1
                        };

                        Pickingcmda.Parameters.Add(parameters);
                        Pickingcmda.ExecuteNonQuery();
                        Pickingcmda.Parameters.Add(new SqlParameter("@return", SqlDbType.Int));
                        Pickingcmda.Parameters["@return"].Direction = ParameterDirection.ReturnValue;
                        SqlDataReader readerPickinga = Pickingcmda.ExecuteReader();
                        DataTable Pickingdta = new DataTable();
                        Pickingdta.Load(readerPickinga);
                        con.Close();
                        for (int i = sRowNum; i < eRowNum; i++)
                        {
                            object plateDescription = SiddibRequisitionFormSheet.Cells[i, 3].Value;
                            if (plateDescription == null)
                            {
                                continue;
                            }
                            for (int j = sColNum; j < eColNum; j++)
                            {
                                //判断单元格是否是合并单元格并获取值
                                ExcelRange Rang = SiddibRequisitionFormSheet.Cells[i, j];
                                object objectCellValue = SiddibRequisitionFormSheet.GetValue(i, j);//单元格数据
                                string CellValue = objectCellValue != null ? objectCellValue.ToString().Trim() : "";
                                if (Rang.Merge)
                                {
                                    CellValue = GetMergeValue(SiddibRequisitionFormSheet, i, j);
                                }
                                switch (j)
                                {
                                    case 1:
                                        //Object CateGory = SiddibRequisitionFormSheet.Cells[i, j].Value;
                                        SiddibRequisitionFormSheetTableRow["CateGory"] = CellValue;
                                        break;
                                    case 2:
                                        Object NumericalOrder = SiddibRequisitionFormSheet.Cells[i, j].Value;
                                        SiddibRequisitionFormSheetTableRow["NumericalOrder"] = NumericalOrder;
                                        break;
                                    case 3:
                                        //Object CateGory = SiddibRequisitionFormSheet.Cells[i, j].Value;
                                        //SiddibRequisitionFormSheetTableRow["CateGory"] = CateGory;
                                        object PlateDescription = SiddibRequisitionFormSheet.Cells[i, j].Value;
                                        for (int a = 0; a < Pickingdta.Rows.Count; a++)
                                        {
                                            object PlateName = Pickingdta.Rows[0]["ProductName"].ToString();
                                            if (plateDescription.ToString() == Pickingdta.Rows[0]["ProductDescription"].ToString())
                                            {
                                                SiddibRequisitionFormSheetTableRow["ProductName"] = PlateName;
                                            }
                                        }
                                        SiddibRequisitionFormSheetTableRow["ProductDes"] = PlateDescription;
                                        break;
                                    case 4:
                                        Object Qty = SiddibRequisitionFormSheet.Cells[i, j].Value;
                                        if (Qty == null)
                                        {
                                            Qty = 0;
                                        }
                                        SiddibRequisitionFormSheetTableRow["Qty"] = Qty;
                                        break;
                                    case 5:
                                        Object Unit = SiddibRequisitionFormSheet.Cells[i, j].Value;
                                        SiddibRequisitionFormSheetTableRow["Unit"] = Unit;
                                        break;
                                }
                            }
                            SiddibRequisitionFormSheetTable.Rows.Add(SiddibRequisitionFormSheetTableRow.ItemArray);
                        }
                    }
                    #endregion
                    //图兰朵作业单-------未处理
                    #region
                    //数据所在Sheet
                    ExcelWorksheet TurandotWorkSheet = null;
                    //打开的Sheet名
                    TurandotWorkSheet = pck.Workbook.Worksheets["图兰朵作业单"];
                    if (TurandotWorkSheet.Name == "图兰朵作业单")
                    {
                        //最大列
                        int maxColumnNum = TurandotWorkSheet.Dimension.End.Column;
                        //最小列
                        int minColumnNum = TurandotWorkSheet.Dimension.Start.Column;
                        //最小行
                        int minRowNum = TurandotWorkSheet.Dimension.Start.Row;
                        //最大行
                        int maxRowNum = TurandotWorkSheet.Dimension.End.Row;
                        //开始行
                        int sRowNum = 5;
                        //结束行
                        int eRowNum = 0;
                        int sColum = 1;
                        int Ecolum = 14;

                        for (int i = sRowNum; i < maxRowNum; i++)
                        {
                            Object EndRow = TurandotWorkSheet.GetValue(i, 1);
                            if (EndRow == null)
                            {
                                continue;
                            }
                            if (EndRow.ToString() == "拆解员")
                            {
                                eRowNum = i - 4;
                                break;
                            }
                        }

                        DataRow TurandotWorkSheetTableRow = TurandotWorkSheetTable.NewRow();
                        for (int i = sRowNum; i < eRowNum; i++)
                        {
                            Object PlateName = TurandotWorkSheet.GetValue(i, 2);
                            if (PlateName == null)
                            {
                                continue;
                            }
                            for (int j = sColum; j < Ecolum; j++)
                            {
                                switch (j)
                                {
                                    case 1:
                                        object BoxNum = TurandotWorkSheet.GetValue(i, j);
                                        TurandotWorkSheetTableRow["OrderDetailId"] = BoxNum;
                                        break;
                                    case 2:
                                        object PlateName1 = TurandotWorkSheet.GetValue(i, j);
                                        TurandotWorkSheetTableRow["PlateName"] = PlateName1;
                                        break;
                                    case 3:
                                        object FWide = TurandotWorkSheet.GetValue(i, j);
                                        TurandotWorkSheetTableRow["FWide"] = FWide;
                                        break;
                                    case 4:
                                        object FHigh = TurandotWorkSheet.GetValue(i, j);
                                        TurandotWorkSheetTableRow["FHigh"] = FHigh;
                                        break;
                                    case 5:
                                        object FQTY = TurandotWorkSheet.GetValue(i, j);
                                        TurandotWorkSheetTableRow["FQty"] = FQTY;
                                        break;
                                    case 6:
                                        object CutWide = TurandotWorkSheet.GetValue(i, j);
                                        TurandotWorkSheetTableRow["CutWide"] = CutWide;
                                        break;
                                    case 7:
                                        object CutHigh = TurandotWorkSheet.GetValue(i, j);
                                        TurandotWorkSheetTableRow["CutHigh"] = CutHigh;
                                        break;
                                    case 8:
                                        object CutQty = TurandotWorkSheet.GetValue(i, j);
                                        TurandotWorkSheetTableRow["CutQty"] = CutQty;
                                        break;
                                    case 9:
                                        object MaterialDescription = TurandotWorkSheet.GetValue(i, j);
                                        Object MaterialDescription1 = TurandotWorkSheet.GetValue(i, j + 1);
                                        TurandotWorkSheetTableRow["MaterialDescription"] = MaterialDescription.ToString() + MaterialDescription1.ToString();
                                        break;
                                    case 11:
                                        object MaterialNote = TurandotWorkSheet.GetValue(i, j);
                                        TurandotWorkSheetTableRow["MaterialNote"] = MaterialNote;
                                        break;
                                    case 12:
                                        object DisplayMaterialSummary = TurandotWorkSheet.GetValue(i, j);
                                        TurandotWorkSheetTableRow["DisplayMaterialSummary"] = DisplayMaterialSummary;
                                        break;
                                    case 13:
                                        object AreaOfContour = TurandotWorkSheet.GetValue(i, j);
                                        TurandotWorkSheetTableRow["AreaOfContour"] = AreaOfContour;
                                        break;
                                }
                            }
                            TurandotWorkSheetTable.Rows.Add(TurandotWorkSheetTableRow.ItemArray);
                        }
                    }
                    #endregion
                    //图兰朵领料单
                    #region
                    //数据所在Sheet
                    ExcelWorksheet TurandotCollectionSheet = null;
                    //打开的Sheet名
                    TurandotCollectionSheet = pck.Workbook.Worksheets["图兰朵领料单"];
                    if (TurandotCollectionSheet.Name == "图兰朵领料单")
                    {
                        //最大列
                        int maxColumnNum = TurandotCollectionSheet.Dimension.End.Column;
                        //最小列
                        int minColumnNum = TurandotCollectionSheet.Dimension.Start.Column;
                        //最小行
                        int minRowNum = TurandotCollectionSheet.Dimension.Start.Row;
                        //最大行
                        int maxRowNum = TurandotCollectionSheet.Dimension.End.Row;
                        //开始行
                        int sRowNum = 6;
                        //结束行
                        int eRowNum = 0;
                        //区域A的开始栏位
                        int sColNum = 1;
                        //区域A的结束栏位
                        int eColNum = 7;

                        for (int i = sRowNum; i <= maxRowNum; i++)
                        {
                            Object EndRow = TurandotCollectionSheet.GetValue(i, 1);
                            if (EndRow == null)
                            {
                                continue;
                            }
                            if (EndRow.ToString() == "制单人")
                            {
                                eRowNum = i - 1;
                                break;
                            }
                        }

                        DataRow MaterialRequisitionSheetTableRow = MaterialRequisitionSheetTable.NewRow();
                        for (int i = sRowNum; i < eRowNum; i++)
                        {
                            Object PlateDescription = TurandotCollectionSheet.GetValue(i, 3);
                            Object PlateDescription1 = TurandotCollectionSheet.GetValue(i, 4);
                            if (PlateDescription == null)
                            {
                                continue;
                            }
                            for (int j = sColNum; j < eColNum; j++)
                            {
                                //判断单元格是否是合并单元格并获取值
                                ExcelRange Rang = TurandotCollectionSheet.Cells[i, j];
                                object objectCellValue = TurandotCollectionSheet.GetValue(i, j);//单元格数据
                                string CellValue = objectCellValue != null ? objectCellValue.ToString().Trim() : "";
                                if (Rang.Merge)
                                {
                                    CellValue = GetMergeValue(TurandotCollectionSheet, i, j);
                                }
                                switch (j)
                                {
                                    case 1:
                                        //Object CateGory = TurandotCollectionSheet.GetValue(i, j);
                                        MaterialRequisitionSheetTableRow["CateGory"] = CellValue;
                                        break;
                                    case 2:
                                        Object NumericalOrder = TurandotCollectionSheet.GetValue(i, j);
                                        MaterialRequisitionSheetTableRow["NumericalOrder"] = NumericalOrder;
                                        break;
                                    case 3:
                                        if (PlateDescription == null)
                                        {
                                            PlateDescription = "";
                                        }
                                        if (PlateDescription1 == null)
                                        {
                                            PlateDescription1 = "";
                                        }
                                        MaterialRequisitionSheetTableRow["ProductDes"] = PlateDescription.ToString() + PlateDescription1;
                                        break;
                                    case 5:
                                        Object Qty = TurandotCollectionSheet.GetValue(i, j);
                                        if (Qty == null)
                                        {
                                            Qty = 0;
                                        }
                                        MaterialRequisitionSheetTableRow["Qty"] = Qty;
                                        break;
                                    case 6:
                                        Object Unitt = TurandotCollectionSheet.GetValue(i, j);
                                        MaterialRequisitionSheetTableRow["Unit"] = Unitt;
                                        break;
                                }
                            }
                            MaterialRequisitionSheetTable.Rows.Add(MaterialRequisitionSheetTableRow.ItemArray);
                        }
                    }
                    #endregion
                    //图兰朵黑檀作业单
                    #region
                    //数据所在Sheet
                    ExcelWorksheet TurandotEbonyWorkSheet = null;
                    //打开的Sheet名
                    TurandotEbonyWorkSheet = pck.Workbook.Worksheets["图兰朵黑檀作业单"];
                    if (TurandotEbonyWorkSheet.Name == "图兰朵黑檀作业单")
                    {
                        //最大列
                        int maxColumnNum = TurandotEbonyWorkSheet.Dimension.End.Column;
                        //最小列
                        int minColumnNum = TurandotEbonyWorkSheet.Dimension.Start.Column;
                        //最小行
                        int minRowNum = TurandotEbonyWorkSheet.Dimension.Start.Row;
                        //最大行
                        int maxRowNum = TurandotEbonyWorkSheet.Dimension.End.Row;
                        //开始行
                        int sRowNum = 7;
                        //结束行
                        int eRowNum = 0;
                        //区域A的开始栏位
                        int sColNum = 1;
                        //区域A的结束栏位
                        int eColNum = 14;

                        DataRow TurandotEbonyWorkSheetTableRow = TurandotEbonyWorkSheetTable.NewRow();
                        //获取结束行
                        for (int i = sRowNum; i < maxRowNum; i++)
                        {
                            Object EndRow1 = TurandotEbonyWorkSheet.GetValue(i, 1);
                            if (EndRow1 == null || EndRow1.ToString() == "说明:吊柜顶底装饰板贴皮方式不同,请按照型号及工艺文件来加工!" || EndRow1.ToString() == "门框线条")
                            {
                                continue;
                            }
                            if (EndRow1.ToString() == "注意：龙骨码好后定厚砂光成37.5mm")
                            {
                                eRowNum = i - 1;
                                break;
                            }
                        }

                        for (int i = sRowNum; i < eRowNum; i++)
                        {
                            object PlateName = TurandotEbonyWorkSheet.GetValue(i, 1);
                            if (PlateName == null || PlateName.ToString() == "名称" || PlateName.ToString() == "说明:吊柜顶底装饰板贴皮方式不同,请按照型号及工艺文件来加工!")
                            {
                                continue;
                            }
                            Object PlateName3 = TurandotEbonyWorkSheet.GetValue(i, 1);
                            if (PlateName3.ToString() == "门框线条")
                            {
                                for (int j = sColNum; j < eColNum; j++)
                                {
                                    switch (j)
                                    {
                                        case 1:
                                            object PositionDescription = TurandotEbonyWorkSheet.GetValue(i, j);
                                            TurandotEbonyWorkSheetTableRow["PlateName"] = PositionDescription;
                                            break;
                                        case 2:
                                            object FWide = TurandotEbonyWorkSheet.GetValue(i, j);
                                            if (FWide == null)
                                            {
                                                FWide = 0;
                                            }
                                            TurandotEbonyWorkSheetTableRow["FWide"] = FWide;
                                            break;
                                        case 3:
                                            object FHigh = TurandotEbonyWorkSheet.GetValue(i, j);
                                            if (FHigh == null)
                                            {
                                                FHigh = 0;
                                            }
                                            TurandotEbonyWorkSheetTableRow["FHigh"] = FHigh;
                                            break;
                                        case 4:
                                            object FQty = TurandotEbonyWorkSheet.GetValue(i, j);
                                            if (FQty == null)
                                            {
                                                FQty = 0;
                                            }
                                            TurandotEbonyWorkSheetTableRow["FQty"] = FQty;
                                            break;
                                        case 5:
                                            object PositionDescription1 = TurandotEbonyWorkSheet.GetValue(i, j);
                                            TurandotEbonyWorkSheetTableRow["PositionDescription"] = PositionDescription1;
                                            break;
                                        case 11:
                                            object Remark = TurandotEbonyWorkSheet.GetValue(i, j);
                                            TurandotEbonyWorkSheetTableRow["Remark"] = Remark;
                                            break;
                                        case 13:
                                            object TheNumberOfFloorSales = TurandotEbonyWorkSheet.GetValue(i, j);
                                            TurandotEbonyWorkSheetTableRow["TheNumberOfFloorSales"] = TheNumberOfFloorSales;
                                            break;
                                    }
                                }
                            }
                            else
                            {
                                for (int j = sColNum; j < eColNum; j++)
                                {
                                    switch (j)
                                    {
                                        case 1:
                                            object PositionDescription = TurandotEbonyWorkSheet.GetValue(i, j);
                                            TurandotEbonyWorkSheetTableRow["PositionDescription"] = PositionDescription;
                                            break;
                                        case 2:
                                            object FWide = TurandotEbonyWorkSheet.GetValue(i, j);
                                            if (FWide == null)
                                            {
                                                FWide = 0;
                                            }
                                            TurandotEbonyWorkSheetTableRow["FWide"] = FWide;
                                            break;
                                        case 3:
                                            object FHigh = TurandotEbonyWorkSheet.GetValue(i, j);
                                            if (FHigh == null)
                                            {
                                                FHigh = 0;
                                            }
                                            TurandotEbonyWorkSheetTableRow["FHigh"] = FHigh;
                                            break;
                                        case 4:
                                            object FQty = TurandotEbonyWorkSheet.GetValue(i, j);
                                            if (FQty == null)
                                            {
                                                FQty = 0;
                                            }
                                            TurandotEbonyWorkSheetTableRow["FQty"] = FQty;
                                            break;
                                        case 5:
                                            object CutWide = TurandotEbonyWorkSheet.GetValue(i, j);
                                            TurandotEbonyWorkSheetTableRow["CutWide"] = CutWide;
                                            break;
                                        case 6:
                                            object CutHigh = TurandotEbonyWorkSheet.GetValue(i, j);
                                            TurandotEbonyWorkSheetTableRow["CutHigh"] = CutHigh;
                                            break;
                                        case 7:
                                            object CutThick = TurandotEbonyWorkSheet.GetValue(i, j);
                                            TurandotEbonyWorkSheetTableRow["CutThick"] = CutThick;
                                            break;
                                        case 8:
                                            object CutQty = TurandotEbonyWorkSheet.GetValue(i, j);
                                            TurandotEbonyWorkSheetTableRow["CutQty"] = CutQty;
                                            break;
                                        case 9:
                                            object PlateName1 = TurandotEbonyWorkSheet.GetValue(i, j);
                                            TurandotEbonyWorkSheetTableRow["PlateName"] = PlateName1;
                                            break;
                                        case 11:
                                            object Remark = TurandotEbonyWorkSheet.GetValue(i, j);
                                            TurandotEbonyWorkSheetTableRow["Remark"] = Remark;
                                            break;
                                        case 14:
                                            object TheNumberOfFloorSales = TurandotEbonyWorkSheet.GetValue(i, j);
                                            TurandotEbonyWorkSheetTableRow["TheNumberOfFloorSales"] = TheNumberOfFloorSales;
                                            break;
                                    }
                                }
                            }
                            TurandotEbonyWorkSheetTable.Rows.Add(TurandotEbonyWorkSheetTableRow.ItemArray);
                        }
                    }
                    #endregion
                    //图兰朵黑檀领料单
                    #region
                    //数据所在Sheet
                    ExcelWorksheet TurandotBlackSandalwoodMaterialListSheet = null;
                    //打开的Sheet名
                    TurandotBlackSandalwoodMaterialListSheet = pck.Workbook.Worksheets["图兰朵黑檀领料单"];
                    if (TurandotBlackSandalwoodMaterialListSheet.Name == "图兰朵黑檀领料单")
                    {
                        //最大列
                        int maxColumnNum = TurandotBlackSandalwoodMaterialListSheet.Dimension.End.Column;
                        //最小列
                        int minColumnNum = TurandotBlackSandalwoodMaterialListSheet.Dimension.Start.Column;
                        //最小行
                        int minRowNum = TurandotBlackSandalwoodMaterialListSheet.Dimension.Start.Row;
                        //最大行
                        int maxRowNum = TurandotBlackSandalwoodMaterialListSheet.Dimension.End.Row;
                        //开始行
                        int sRowNum = 6;
                        //结束行
                        int eRowNum = 0;
                        //区域A的开始栏位
                        int sColNum = 1;
                        //区域A的结束栏位
                        int eColNum = 9;

                        for (int i = sRowNum; i < maxRowNum; i++)
                        {
                            object RowNum = TurandotBlackSandalwoodMaterialListSheet.Cells[i, 1].Value;
                            if (RowNum == null)
                            {
                                continue;
                            }
                            if (RowNum.ToString() == "其他")
                            {
                                eRowNum = i;
                                break;
                            }
                        }
                        DataRow TurandotBlackSandalwoodMaterialListTableRow = TurandotBlackSandalwoodMaterialListTable.NewRow();

                        //为领料单创建一个datatable
                        DataTable PickingTable1 = new DataTable();
                        PickingTable1.Columns.Add(string.Format("ProductDescription"), Type.GetType("System.String"));//物料描述
                        PickingTable1.Columns.Add(string.Format("ProductName"), Type.GetType("System.String"));
                        DataRow Pickingrows1 = PickingTable1.NewRow();
                        //读取物料描述信息存放在datatable中
                        for (int i = sRowNum; i < eRowNum; i++)
                        {
                            object ProductDescription = CStr(TurandotBlackSandalwoodMaterialListSheet.Cells[i, 3].Value);
                            if (ProductDescription == null)
                            {
                                continue;
                            }
                            Pickingrows1["ProductDescription"] = ProductDescription.ToString();
                            PickingTable1.Rows.Add(Pickingrows1.ItemArray);

                        }
                        SqlConnection con = new SqlConnection("Data Source=192.168.124.72;Initial Catalog=OrBitXI;User ID=sa;PassWord=admin@2017");
                        con.Open();
                        //调用存储过程根据物料描述获取到物料编号存放在另一个datatable中
                        SqlCommand Pickingcmda = new SqlCommand();
                        Pickingcmda.CommandText = "Pro_GetProductName";
                        Pickingcmda.Connection = con;
                        Pickingcmda.CommandType = CommandType.StoredProcedure;
                        SqlParameter parameters =
                        new SqlParameter("@Pro_GetProductName", SqlDbType.Structured)
                        {
                            Value = PickingTable1
                        };
                        Pickingcmda.Parameters.Add(parameters);
                        Pickingcmda.ExecuteNonQuery();
                        Pickingcmda.Parameters.Add(new SqlParameter("@return", SqlDbType.Int));
                        Pickingcmda.Parameters["@return"].Direction = ParameterDirection.ReturnValue;
                        SqlDataReader readerPickinga = Pickingcmda.ExecuteReader();
                        DataTable Pickingdta = new DataTable();
                        Pickingdta.Load(readerPickinga);
                        con.Close();

                        for (int i = sRowNum; i < eColNum; i++)
                        {
                            object PlateDescription = TurandotBlackSandalwoodMaterialListSheet.GetValue(i, 4);
                            if (PlateDescription == null)
                            {
                                continue;
                            }
                            for (int j = sColNum; j < eColNum; j++)
                            {
                                switch (j)
                                {
                                    case 1:
                                        object MaterialType = TurandotBlackSandalwoodMaterialListSheet.GetValue(i, j);
                                        TurandotBlackSandalwoodMaterialListTableRow["MaterialType"] = MaterialType;
                                        break;
                                    case 2:
                                        object NumericalOrder = TurandotBlackSandalwoodMaterialListSheet.GetValue(i, j);
                                        TurandotBlackSandalwoodMaterialListTableRow["NumericalOrder"] = NumericalOrder;
                                        break;
                                    case 3:
                                        object CateGory = TurandotBlackSandalwoodMaterialListSheet.GetValue(i, j);
                                        TurandotBlackSandalwoodMaterialListTableRow["CateGory"] = CateGory;
                                        break;
                                    case 5:
                                        object ProductDes = TurandotBlackSandalwoodMaterialListSheet.GetValue(i, j);
                                        TurandotBlackSandalwoodMaterialListTableRow["ProductDes"] = ProductDes;
                                        break;
                                    case 7:
                                        object Qty = TurandotBlackSandalwoodMaterialListSheet.GetValue(i, j);
                                        TurandotBlackSandalwoodMaterialListTableRow["Qty"] = Qty;
                                        break;
                                    case 8:
                                        object Unit = TurandotBlackSandalwoodMaterialListSheet.GetValue(i, j);
                                        TurandotBlackSandalwoodMaterialListTableRow["Unit"] = Unit;
                                        break;
                                }
                            }
                            TurandotBlackSandalwoodMaterialListTable.Rows.Add(TurandotBlackSandalwoodMaterialListTableRow.ItemArray);
                        }

                    }
                    #endregion
                }
                catch (Exception ex)
                {
                    throw ex;
                }
                finally
                {

                }
            }
        }
        /// <summary>
        /// 判断合并单元格获取值
        /// </summary>
        /// <param name="worksheet"></param>
        /// <param name="row">单元格行</param>
        /// <param name="column">单元格列</param>
        /// <returns></returns>
        public static string GetMergeValue(ExcelWorksheet worksheet, int row, int column)
        {
            string MergeValue = "";
            ExcelWorksheet.MergeCellsCollection<string> MergeCells = worksheet.MergedCells;
            for (int i = 0; i < MergeCells.Count; i++)
            {
                string range = MergeCells[i];
                ExcelAddress add = new ExcelAddress(range);
                int srow = add.Start.Row;//合并单元格开始行
                int scol = add.Start.Column;//合并单元格开始行
                int erow = add.End.Row;//合并单元格结束行
                int ecol = add.End.Column;//合并单元格结束行
                object value = worksheet.Cells[(new ExcelAddress(range)).Start.Row, (new ExcelAddress(range)).Start.Column].Value;
                if (row >= srow && row <= erow && column >= scol && column <= ecol)
                {
                    if (value == null || value.ToString() == "")
                    {
                        MergeValue = "";
                    }
                    else
                    {
                        MergeValue = value.ToString();
                    }
                    break;
                }
            }
            return MergeValue;
        }
        protected string CStr(object o) { return o != null ? o.ToString() : ""; }
    }











    /// <summary>
    /// 无毒厨浴柜柜体导入数据库2018.7.25
    /// </summary>
    public class Non_ToxicCabinetTableExcelData : Non_ToxicCabinetTable
    {

        public override void ReadNon_ToxicCabinetTableData(string Path, string ParentId)
        {
            //统计领料单物料号为空的物料记录有几条
            int NullCount = 0;
            bool TheWorksheetExists = true;
            bool IsMath = true;
            //存储数据流
            FileStream Fs = new FileStream(Path, FileMode.Open, FileAccess.Read);
            //连接数据库字符串
            SqlConnection con = new SqlConnection("Data Source=192.168.124.72;Initial Catalog=OrBitXI;User ID=sa;PassWord=admin@2017");
            //声明dataset保存纹理表信息（免漆厨浴柜）
            DataSet VeinDs = new DataSet();
            SqlConnection Veincon = new SqlConnection("Data Source=192.168.124.72;Initial Catalog=OrBitXI;User ID=sa;PassWord=admin@2017");
            Veincon.Open();
            string VeinSQL = "select * from Excel_Vein;select * from No_Vein";
            //string VeinSQL = "select * from No_Vein";
            SqlDataAdapter VeinAdapter = new SqlDataAdapter(VeinSQL, Veincon);
            VeinAdapter.Fill(VeinDs);
            VeinDs.Tables[0].TableName = "Excel_Vein";
            VeinDs.Tables[1].TableName = "No_Vein";
            // goto aa;
            //读取Excel
            using (ExcelPackage pck = new ExcelPackage(Fs))
            {
                DataSet DS = new DataSet();
                //下料单
                #region
                //数据所在Sheet
                ExcelWorksheet Sheet = null;
                try
                {
                    //打开的Sheet名
                    Sheet = pck.Workbook.Worksheets["下料单"];
                    if (Sheet != null)
                    {
                        if (Sheet.Hidden.ToString() == "Visible")
                        {
                            //最大列
                            int maxColumnNum = Sheet.Dimension.End.Column;
                            //最小列
                            int minColumnNum = Sheet.Dimension.Start.Column;
                            //最小行
                            int minRowNum = Sheet.Dimension.Start.Row;
                            //最大行
                            int maxRowNum = Sheet.Dimension.End.Row;
                            //开始行
                            int sRowNum = 4;
                            //结束行
                            int eRowNum = 0;
                            //区域A的开始栏位
                            int sAColNum = 1;
                            //区域A的结束栏位
                            int eAColNum = 5;
                            //区域B的开始栏位
                            int sBColNum = 6;
                            //区域B的结束栏位
                            int eBColNum = 40;
                            //合计所在行
                            int hJRowNum = 0;
                            //读取Excel内容
                            //修改开始行
                            sRowNum = 5;
                            //修改结束行
                            eRowNum = 23;
                            //标题行
                            int ExcelTitle1 = 0;
                            int ExcelTitle2 = 0;
                            int ExcelTitle = 0;
                            string str = null;
                            //获取结束行
                            for (int d = 1; d < maxRowNum; d++)
                            {
                                if ((CStr(Sheet.Cells[d, 1].Value)).Trim() == "总合计：")
                                {
                                    eRowNum = d - 2;
                                    break;
                                }
                            }
                            for (int d = 1; d < eRowNum; d++)
                            {
                                if ((CStr(Sheet.Cells[d, 1].Value)).Trim() == "吊柜")
                                {
                                    ExcelTitle2 = d;
                                    break;
                                }
                            }
                            for (int i = 1; i < eRowNum; i++)
                            {
                                if ((CStr(Sheet.Cells[i, 1].Value)).Trim() == "地柜")
                                {
                                    ExcelTitle1 = i;
                                    break;
                                }
                            }
                            for (int i = 1; i < eRowNum; i++)
                            {
                                if ((CStr(Sheet.Cells[i, 1].Value)).Trim() == "抽屉、备用条等")
                                {
                                    ExcelTitle = i;
                                    break;
                                }
                            }

                            if (IsMath == true)
                            {
                                object CabinetNO;
                                object CabinetNO1 = 0;
                                //sRowNum
                                //循环遍历每一行
                                for (int i = sRowNum; i <= eRowNum; i++)
                                {
                                    string excelValue1 = null;
                                    string excelValue2 = null;
                                    string excelValue3 = null;
                                    //柜号
                                    CabinetNO = CStr(Sheet.Cells[i, 1].Value);

                                    //材质备注
                                    string MaterialNote = CStr(Sheet.Cells[i, 42].Value);
                                    //材质汇总
                                    string DisplayMaterialSummary = CStr(Sheet.Cells[i, 43].Value);
                                    //投影面积
                                    string AreaOfContour = CStr(Sheet.Cells[i, 44].Value);
                                    //读取A区域内容
                                    DataRow newARow = null;
                                    DataRow newBRow = null;
                                    newARow = orderDetailDataTable.NewRow();
                                    newBRow = materialBillsDataTable.NewRow();
                                    //newBRow = DtB.NewRow();
                                    int ABlankRow = 0;//A区域全白行
                                    int AColumnsCount = orderDetailDataTable.Columns.Count;//A区域栏位数
                                    int b = 0;
                                    string PlateNum = "";
                                    for (int a = 5; a < 41; a++)
                                    {
                                        PlateNum = CStr(Sheet.Cells[i, a].Value);
                                        if (PlateNum == null || PlateNum == "")
                                        {
                                            b++;
                                        }
                                        else
                                        {
                                            if (System.Text.RegularExpressions.Regex.IsMatch(PlateNum, @"^[-+]?[0-9]*\.?[0-9]+$"))
                                            {
                                                if (Convert.ToSingle(PlateNum) <= 0)
                                                {
                                                    b++;
                                                }
                                            }
                                        }
                                        a = a + 4;
                                    }
                                    if (b == 8)
                                    {
                                        ABlankRow++;
                                        continue;
                                    }
                                    else
                                    {
                                        //去除标题行和合计行
                                        if (i == ExcelTitle2 || i == ExcelTitle2 - 1 || i == ExcelTitle1 || i == ExcelTitle - 1 || i == ExcelTitle)
                                        {
                                            continue;
                                        }
                                        //CenterMaterials芯材
                                        //string PlateType = CStr(Sheet.Cells[1, 1].Value);
                                        //newBRow["PlateType"] = PlateType.Substring(3, 2);
                                        //newBRow["FaceConduct"] = PlateType.Substring(1, 2);
                                        string PlateNum1 = CStr(Sheet.Cells[i, 5].Value);
                                        string OrderDetailId = Guid.NewGuid().ToString().Substring(0, 12);
                                        if (PlateNum1 == null || PlateNum1 == "")
                                        {
                                            newARow[string.Format("OrderDetailId")] = OrderDetailId;

                                            int Detail = 1;//明细分割位

                                            int BColumnsCount = materialBillsDataTable.Columns.Count;//B区域栏位数

                                            for (int z = sBColNum; z <= eBColNum; z++)
                                            {
                                                if (CabinetNO != null || CabinetNO.ToString() != "")
                                                {
                                                    if (System.Text.RegularExpressions.Regex.IsMatch(CabinetNO.ToString(), @"^[-+]?[0-9]*\.?[0-9]+$"))
                                                    {
                                                        CabinetNO1 = Convert.ToSingle(CabinetNO);
                                                    }

                                                }
                                                if (i > ExcelTitle)
                                                {
                                                    OrderDetailId = null;
                                                    CabinetNO1 = null;
                                                }
                                                if (Detail == 1)
                                                {
                                                    string IssueMaterialBillsId = System.Guid.NewGuid().ToString().Substring(0, 12).ToUpper();
                                                    newBRow["CabinetNO"] = CabinetNO1;
                                                    newBRow[string.Format("IssueMaterialBillsId")] = IssueMaterialBillsId;
                                                    newBRow[string.Format("OrderDetailId")] = OrderDetailId;
                                                    newBRow[string.Format("ProductOrderId")] = ParentId;

                                                    //Vein纹理
                                                    //将dataset的表填充到datatable
                                                    DataTable TB_No_Vein = VeinDs.Tables["No_Vein"];
                                                    //指定的字符串变量，根据这个变量查询table是否包含这条数据
                                                    //String BWART1 = VeinDs.Tables["No_Vein"].Rows[0][1].ToString();
                                                    //给dataview绑定数据
                                                    DataView Dv_No_Vein = TB_No_Vein.DefaultView;
                                                    //dataview的筛选属性，等于号后面是条件（示例为查看table里面BWART列像BWART1的行）
                                                    Dv_No_Vein.RowFilter = "PlateType = '" + MaterialNote + "'";
                                                    //查询到的行（>0为有一到多条数据，=0没有查询到数据）
                                                    if (Dv_No_Vein.Count > 0)//如果材质表中包含这个材质说明此材质无纹理
                                                    {
                                                        newBRow[string.Format("Vein")] = "0";//无纹理
                                                    }
                                                    else
                                                    {
                                                        ////将dataset的表填充到datatable
                                                        //DataTable TB_Excel_Vein = VeinDs.Tables["Excel_Vein"];
                                                        ////指定的字符串变量，根据这个变量查询table是否包含这条数据
                                                        ////String BWART1 = VeinDs.Tables["No_Vein"].Rows[0][1].ToString();
                                                        ////给dataview绑定数据
                                                        //DataView Dv_Excel_Vein = TB_Excel_Vein.DefaultView;
                                                        ////dataview的筛选属性，等于号后面是条件（示例为查看table里面BWART列像BWART1的行）
                                                        //Dv_Excel_Vein.RowFilter = "PlateName = '" + PlateName1 + "'";
                                                        ////查询到的行（>0为有一到多条数据，=0没有查询到数据）
                                                        //if (Dv_Excel_Vein.Count > 0)//横纹板件表中如果有这个板件说明该板件纹理为横纹
                                                        //{
                                                        //    newBRow[string.Format("Vein")] = "2";//横纹
                                                        //}
                                                        //else
                                                        //{
                                                        //    newBRow[string.Format("Vein")] = "1";//竖纹
                                                        //}
                                                        newBRow[string.Format("Vein")] = "1";//竖纹
                                                    }


                                                    object PlateQty = Sheet.Cells[i, z + 4].Value;
                                                    if (PlateQty == null || PlateQty.ToString() == "0")
                                                    {
                                                        PlateQty = "";
                                                    }
                                                    //else
                                                    //{
                                                    //    PlateQty = Sheet.Cells[i, z + 4].Value.ToString();
                                                    //}
                                                    if (PlateQty == null || PlateQty.ToString() == "")
                                                    {
                                                        z = z + 4;
                                                        continue;
                                                    }
                                                    else
                                                    {
                                                        newBRow[string.Format("PlateName")] = Sheet.Cells[i, z].Value;
                                                        Detail++;
                                                    }
                                                }
                                                else if (Detail == 2)
                                                {
                                                    if (Sheet.Cells[i, z].Value != null)
                                                    {
                                                        string Value = null;
                                                        Value = Sheet.Cells[i, z].Value.ToString();
                                                        if (System.Text.RegularExpressions.Regex.IsMatch(Value, @"^[-+]?[0-9]*\.?[0-9]+$"))
                                                        {
                                                            newBRow[string.Format("CutThick")] = Value;
                                                        }
                                                        else
                                                        {
                                                            MessageBox.Show("请检查" + Sheet.Name + "工作表第" + i + "行第" + z + "列数据是否正确");
                                                            IsMath = false;
                                                        }
                                                        //newBRow[string.Format("CutThick")] = Sheet.Cells[i, z].Value;
                                                        Detail++;
                                                    }
                                                    else
                                                    {
                                                        newBRow[string.Format("CutThick")] = Sheet.Cells[i, z].Value;
                                                        Detail++;
                                                    }

                                                }
                                                else if (Detail == 3)
                                                {
                                                    if (Sheet.Cells[i, z].Value != null)
                                                    {
                                                        string Value = null;
                                                        Value = Sheet.Cells[i, z].Value.ToString();
                                                        if (System.Text.RegularExpressions.Regex.IsMatch(Value, @"^[-+]?[0-9]*\.?[0-9]+$"))
                                                        {
                                                            newBRow[string.Format("CutWide")] = Value;
                                                        }
                                                        else
                                                        {
                                                            MessageBox.Show("请检查" + Sheet.Name + "工作表第" + i + "行第" + z + "列数据是否正确");
                                                            IsMath = false;
                                                        }
                                                        //newBRow[string.Format("CutThick")] = Sheet.Cells[i, z].Value;
                                                        Detail++;
                                                    }
                                                    else
                                                    {
                                                        newBRow[string.Format("CutWide")] = Sheet.Cells[i, z].Value;
                                                        Detail++;
                                                    }
                                                    //newBRow[string.Format("CutLong")] = Sheet.Cells[i, z].Value;

                                                    //Detail++;
                                                }
                                                else if (Detail == 4)
                                                {
                                                    if (Sheet.Cells[i, z].Value != null)
                                                    {
                                                        string Value = null;
                                                        Value = Sheet.Cells[i, z].Value.ToString();
                                                        if (System.Text.RegularExpressions.Regex.IsMatch(Value, @"^[-+]?[0-9]*\.?[0-9]+$"))
                                                        {
                                                            newBRow[string.Format("CutHigh")] = Value;
                                                        }
                                                        else
                                                        {
                                                            MessageBox.Show("请检查" + Sheet.Name + "工作表第" + i + "行第" + z + "列数据是否正确");
                                                            IsMath = false;
                                                        }
                                                        //newBRow[string.Format("CutThick")] = Sheet.Cells[i, z].Value;
                                                        Detail++;
                                                    }
                                                    else
                                                    {
                                                        //if (z == 19 || z == 24)
                                                        //{

                                                        //}
                                                        //else
                                                        //{

                                                        //}
                                                        newBRow[string.Format("CutWide")] = Sheet.Cells[i, z].Value;
                                                        newBRow[string.Format("Remark")] = Sheet.Cells[i, 41].Value;

                                                        Detail++;
                                                    }
                                                    //newBRow[string.Format("CutWide")] = Sheet.Cells[i, z].Value;
                                                    //Detail++;
                                                }
                                                else
                                                {
                                                    newBRow[string.Format("MaterialNote")] = MaterialNote;//材质备注
                                                    newBRow[string.Format("DisplayMaterialSummary")] = DisplayMaterialSummary;//材质汇总
                                                    newBRow[string.Format("AreaOfContour")] = AreaOfContour;//投影面积
                                                    newBRow[string.Format("CutQty")] = Sheet.Cells[i, z].Value;//下料数量
                                                    newBRow[string.Format("Qty")] = Sheet.Cells[i, z].Value;//成型数量
                                                    Detail = 1;
                                                    materialBillsDataTable.Rows.Add(newBRow.ItemArray);

                                                }
                                                if (IsMath == false)
                                                {
                                                    break;
                                                }
                                            }
                                            orderDetailDataTable.TableName = "IssueMaterialBills";
                                        }
                                        else if (System.Text.RegularExpressions.Regex.IsMatch(PlateNum1, @"^[-+]?[0-9]*\.?[0-9]+$"))
                                        {
                                            OrderDetailId = Guid.NewGuid().ToString().Substring(0, 12);
                                            newARow[string.Format("OrderDetailId")] = OrderDetailId;

                                            //循环遍历每一列
                                            for (int j = sAColNum; j <= eAColNum; j++)
                                            {
                                                hJRowNum = ExcelTitle2 - 1;
                                                //去除标题行和合计行
                                                if (i == ExcelTitle2 || i == ExcelTitle1 || i == hJRowNum || i == ExcelTitle - 1 || i == ExcelTitle)
                                                {
                                                    continue;
                                                }
                                                //表头不读了但是要把第一列替换成表头第一列的值
                                                if (j == sAColNum)
                                                {
                                                    //地柜
                                                    if (i < hJRowNum)
                                                    {
                                                        excelValue1 = CStr(Sheet.Cells[sRowNum, sAColNum].Value + CStr(Sheet.Cells[i, j].Value));
                                                    }
                                                    //吊柜
                                                    else if (i > hJRowNum && i < ExcelTitle)
                                                    {
                                                        excelValue1 = CStr(Sheet.Cells[hJRowNum + 1, sAColNum].Value + CStr(Sheet.Cells[i, j].Value));
                                                    }
                                                    else if (i > ExcelTitle)//抽屉、备用条等
                                                    {
                                                        excelValue1 = CStr(Sheet.Cells[ExcelTitle, 1].Value + CStr(Sheet.Cells[i, j].Value));
                                                    }
                                                }
                                                switch (j)
                                                {
                                                    case 1: newARow[string.Format("ProductName")] = excelValue1; break;
                                                    case 2:
                                                        string Wide = CStr(Sheet.Cells[i, j].Value);
                                                        if (System.Text.RegularExpressions.Regex.IsMatch(Wide, @"^[-+]?[0-9]*\.?[0-9]+$"))
                                                        {
                                                            newARow[string.Format("Wide")] = Wide;
                                                        }
                                                        else
                                                        {
                                                            MessageBox.Show("请检查" + Sheet.Name + "工作表第" + i + "行第" + j + "列数据是否正确");
                                                            IsMath = false;
                                                            break;
                                                        }
                                                        break;
                                                    case 3:
                                                        string Deth = CStr(Sheet.Cells[i, j].Value);
                                                        if (System.Text.RegularExpressions.Regex.IsMatch(Deth, @"^[-+]?[0-9]*\.?[0-9]+$"))
                                                        {
                                                            newARow[string.Format("Deth")] = Deth;
                                                        }
                                                        else
                                                        {
                                                            MessageBox.Show("请检查" + Sheet.Name + "工作表第" + i + "行第" + j + "列数据是否正确");
                                                            IsMath = false;
                                                            break;
                                                        }
                                                        break;
                                                    case 4:
                                                        string High = CStr(Sheet.Cells[i, j].Value);
                                                        if (System.Text.RegularExpressions.Regex.IsMatch(High, @"^[-+]?[0-9]*\.?[0-9]+$"))
                                                        {
                                                            newARow[string.Format("High")] = High;
                                                        }
                                                        else
                                                        {
                                                            MessageBox.Show("请检查" + Sheet.Name + "工作表第" + i + "行第" + j + "列数据是否正确");
                                                            IsMath = false;
                                                            break;
                                                        }
                                                        break;
                                                    case 5:
                                                        newARow[string.Format("Qty")] = CStr(Sheet.Cells[i, 5].Value);
                                                        break;
                                                }
                                                newARow[string.Format("ProductOrderId")] = ParentId;
                                                if (IsMath == false)
                                                {
                                                    break;
                                                }
                                            }
                                            orderDetailDataTable.Rows.Add(newARow);
                                            orderDetailDataTable.TableName = "OrderDetail";
                                            int Detail = 1;//明细分割位

                                            int BColumnsCount = materialBillsDataTable.Columns.Count;//B区域栏位数

                                            for (int z = sBColNum; z <= eBColNum; z++)
                                            {
                                                if (CabinetNO != null || CabinetNO.ToString() != "")
                                                {
                                                    if (System.Text.RegularExpressions.Regex.IsMatch(CabinetNO.ToString(), @"^[-+]?[0-9]*\.?[0-9]+$"))
                                                    {
                                                        CabinetNO1 = Convert.ToSingle(CabinetNO);
                                                    }
                                                }
                                                if (Detail == 1)
                                                {
                                                    //newBRow = Xialiaodan_Table.NewRow();
                                                    string IssueMaterialBillsId = System.Guid.NewGuid().ToString().Substring(0, 12).ToUpper();
                                                    newBRow["CabinetNO"] = CabinetNO1;
                                                    newBRow[string.Format("IssueMaterialBillsId")] = IssueMaterialBillsId;
                                                    newBRow[string.Format("OrderDetailId")] = OrderDetailId;
                                                    newBRow[string.Format("ProductOrderId")] = ParentId;
                                                    //Vein纹理
                                                    //将dataset的表填充到datatable
                                                    DataTable TB_No_Vein = VeinDs.Tables["No_Vein"];
                                                    //指定的字符串变量，根据这个变量查询table是否包含这条数据
                                                    //String BWART1 = VeinDs.Tables["No_Vein"].Rows[0][1].ToString();
                                                    //给dataview绑定数据
                                                    DataView Dv_No_Vein = TB_No_Vein.DefaultView;
                                                    //dataview的筛选属性，等于号后面是条件（示例为查看table里面BWART列像BWART1的行）
                                                    Dv_No_Vein.RowFilter = "PlateType = '" + MaterialNote + "'";
                                                    //查询到的行（>0为有一到多条数据，=0没有查询到数据）
                                                    if (Dv_No_Vein.Count > 0)//如果材质表中包含这个材质说明此材质无纹理
                                                    {
                                                        newBRow[string.Format("Vein")] = "0";//无纹理
                                                    }
                                                    else
                                                    {
                                                        ////将dataset的表填充到datatable
                                                        //DataTable TB_Excel_Vein = VeinDs.Tables["Excel_Vein"];
                                                        ////指定的字符串变量，根据这个变量查询table是否包含这条数据
                                                        ////String BWART1 = VeinDs.Tables["No_Vein"].Rows[0][1].ToString();
                                                        ////给dataview绑定数据
                                                        //DataView Dv_Excel_Vein = TB_Excel_Vein.DefaultView;
                                                        ////dataview的筛选属性，等于号后面是条件（示例为查看table里面BWART列像BWART1的行）
                                                        //Dv_Excel_Vein.RowFilter = "PlateName = '" + PlateName1 + "'";
                                                        ////查询到的行（>0为有一到多条数据，=0没有查询到数据）
                                                        //if (Dv_Excel_Vein.Count > 0)//横纹板件表中如果有这个板件说明该板件纹理为横纹
                                                        //{
                                                        //    newBRow[string.Format("Vein")] = "2";//横纹
                                                        //}
                                                        //else
                                                        //{
                                                        //    newBRow[string.Format("Vein")] = "1";//竖纹
                                                        //}
                                                        newBRow[string.Format("Vein")] = "1";//竖纹
                                                    }
                                                    object PlateQty = Sheet.Cells[i, z + 4].Value;
                                                    if (PlateQty == null || PlateQty.ToString() == "0")
                                                    {
                                                        PlateQty = "";
                                                    }
                                                    //else
                                                    //{
                                                    //    PlateQty = Sheet.Cells[i, z + 4].Value.ToString();
                                                    //}
                                                    if (PlateQty == null || PlateQty.ToString() == "")
                                                    {
                                                        z = z + 4;
                                                        continue;
                                                    }
                                                    else
                                                    {
                                                        newBRow[string.Format("PlateName")] = Sheet.Cells[i, z].Value;
                                                        Detail++;
                                                    }
                                                }
                                                else if (Detail == 2)
                                                {
                                                    if (Sheet.Cells[i, z].Value != null)
                                                    {
                                                        string Value = null;
                                                        Value = Sheet.Cells[i, z].Value.ToString();
                                                        if (System.Text.RegularExpressions.Regex.IsMatch(Value, @"^[-+]?[0-9]*\.?[0-9]+$"))
                                                        {
                                                            newBRow[string.Format("CutThick")] = Value;
                                                        }
                                                        else
                                                        {
                                                            MessageBox.Show("请检查" + Sheet.Name + "工作表第" + i + "行第" + z + "列数据是否正确");
                                                            IsMath = false;
                                                        }
                                                        //newBRow[string.Format("CutThick")] = Sheet.Cells[i, z].Value;
                                                        Detail++;
                                                    }
                                                    else
                                                    {
                                                        newBRow[string.Format("CutThick")] = Sheet.Cells[i, z].Value;
                                                        Detail++;
                                                    }

                                                }
                                                else if (Detail == 3)
                                                {
                                                    if (Sheet.Cells[i, z].Value != null)
                                                    {
                                                        string Value = null;
                                                        Value = Sheet.Cells[i, z].Value.ToString();
                                                        if (System.Text.RegularExpressions.Regex.IsMatch(Value, @"^[-+]?[0-9]*\.?[0-9]+$"))
                                                        {
                                                            newBRow[string.Format("CutWide")] = Value;
                                                        }
                                                        else
                                                        {
                                                            MessageBox.Show("请检查" + Sheet.Name + "工作表第" + i + "行第" + z + "列数据是否正确");
                                                            IsMath = false;
                                                        }
                                                        //newBRow[string.Format("CutThick")] = Sheet.Cells[i, z].Value;
                                                        Detail++;
                                                    }
                                                    else
                                                    {
                                                        newBRow[string.Format("CutWide")] = Sheet.Cells[i, z].Value;
                                                        Detail++;
                                                    }
                                                    //newBRow[string.Format("CutLong")] = Sheet.Cells[i, z].Value;

                                                    //Detail++;
                                                }
                                                else if (Detail == 4)
                                                {
                                                    if (Sheet.Cells[i, z].Value != null)
                                                    {
                                                        string Value = null;
                                                        Value = Sheet.Cells[i, z].Value.ToString();
                                                        if (System.Text.RegularExpressions.Regex.IsMatch(Value, @"^[-+]?[0-9]*\.?[0-9]+$"))
                                                        {
                                                            newBRow[string.Format("CutHigh")] = Value;
                                                        }
                                                        else
                                                        {
                                                            MessageBox.Show("请检查" + Sheet.Name + "工作表第" + i + "行第" + z + "列数据是否正确");
                                                            IsMath = false;
                                                        }
                                                        //newBRow[string.Format("CutThick")] = Sheet.Cells[i, z].Value;
                                                        Detail++;
                                                    }
                                                    else
                                                    {
                                                        newBRow[string.Format("CutWide")] = Sheet.Cells[i, z].Value;
                                                        newBRow[string.Format("Remark")] = Sheet.Cells[i, 41].Value;

                                                        Detail++;
                                                    }
                                                    //newBRow[string.Format("CutWide")] = Sheet.Cells[i, z].Value;
                                                    //Detail++;
                                                }
                                                else
                                                {
                                                    newBRow[string.Format("MaterialNote")] = MaterialNote;//材质备注
                                                    newBRow[string.Format("DisplayMaterialSummary")] = DisplayMaterialSummary;//材质汇总
                                                    newBRow[string.Format("AreaOfContour")] = AreaOfContour;//投影面积
                                                    newBRow[string.Format("CutQty")] = Sheet.Cells[i, z].Value;//下料数量
                                                    newBRow[string.Format("Qty")] = Sheet.Cells[i, z].Value;//成型数量
                                                    Detail = 1;
                                                    materialBillsDataTable.Rows.Add(newBRow.ItemArray);
                                                }
                                                if (IsMath == false)
                                                {
                                                    break;
                                                }
                                            }
                                        }
                                    }
                                }
                                orderDetailDataTable.TableName = "OrderDetail";
                                DS.Tables.Add(orderDetailDataTable);
                                orderDetailDataTable.Dispose();
                                materialBillsDataTable.TableName = "IssueMaterialBills";
                                DS.Tables.Add(materialBillsDataTable);
                                materialBillsDataTable.Dispose();
                            }
                        }
                    }
                }
                catch (Exception ex)
                {
                    throw ex;
                }
                #endregion
                //铝材玻璃单
                #region
                try
                {
                    if (IsMath)
                    {
                        if (TheWorksheetExists)
                        {
                            //铝材玻璃单读取
                            ExcelWorksheet Sheet2 = null;//数据所在Sheet
                            Sheet2 = pck.Workbook.Worksheets["铝材玻璃单"];
                            if (Sheet2 != null)
                            {
                                if (Sheet2.Name == "铝材玻璃单")
                                {
                                    int maxColumnNum2 = Sheet2.Dimension.End.Column;//最大列
                                    int minColumnNum2 = Sheet2.Dimension.Start.Column;//最小列
                                    int minRowNum2 = Sheet2.Dimension.Start.Row;//最小行
                                    int maxRowNum2 = Sheet2.Dimension.End.Row;//最大行
                                    int sRowNum2 = 5;//开始行
                                    int eRowNum2 = 0;//结束行
                                    int sAColNum2 = 1;//区域A的开始栏位
                                    int eAColNum2 = 7;//区域A的结束栏位
                                    int sBColNum2 = 8;//区域B的开始栏位
                                    int eBColNum2 = 12;//区域B的结束栏位

                                    string ExcelNameValue = "";
                                    //获取结束行
                                    for (int d = sRowNum2; d < maxRowNum2; d++)
                                    {
                                        if ((CStr(Sheet2.Cells[d, 1].Value)).Trim() == "制单人：")
                                        {
                                            eRowNum2 = d - 1;
                                            break;
                                        }
                                    }
                                    //铝材玻璃单左侧读取
                                    for (int i = sRowNum2; i < eRowNum2; i++)
                                    {
                                        string AluminiumSheetGlassId = Guid.NewGuid().ToString().Substring(0, 12);
                                        DataRow newARow = AluminiumSheetSlassTable1.NewRow();
                                        ExcelNameValue = CStr(Sheet2.Cells[i, 5].Value);

                                        if ((ExcelNameValue == "") || (ExcelNameValue == null))
                                        {
                                            continue;
                                        }
                                        if (System.Text.RegularExpressions.Regex.IsMatch(ExcelNameValue, @"^[-+]?[0-9]*\.?[0-9]+$"))
                                        {
                                            if (Convert.ToSingle(ExcelNameValue) > 0)
                                            {
                                                for (int j = sAColNum2; j <= eAColNum2; j++)
                                                {
                                                    newARow["GlassIssueMaterialBillsId"] = AluminiumSheetGlassId;
                                                    newARow["ProductOrderId"] = ParentId;

                                                    ExcelRange Rang = Sheet2.Cells[i, j];
                                                    object objectCellValue = Sheet2.GetValue(i, j);//单元格数据
                                                    string CellValue = objectCellValue != null ? objectCellValue.ToString().Trim() : "";
                                                    if (Rang.Merge)
                                                    {
                                                        CellValue = GetMergeValue(Sheet2, i, j);

                                                    }
                                                    switch (j)
                                                    {
                                                        //case 1: newARow["AluminiumSheetGlassNum"] = CellValue; break;
                                                        case 2: newARow["MaterialName"] = CellValue; break;
                                                        case 3:

                                                            ExcelRange Rang2 = Sheet2.Cells[i, j];
                                                            if (Rang2.Merge)
                                                            {
                                                                newARow["StandardsName"] = CellValue;
                                                            }
                                                            else
                                                            {
                                                                string CellValue2 = objectCellValue != null ? objectCellValue.ToString().Trim() : "";
                                                                if (Rang.Merge)
                                                                {
                                                                    CellValue2 = GetMergeValue(Sheet2, i, j + 1);

                                                                }
                                                                newARow["StandardsName"] = CellValue + CellValue2;
                                                            }

                                                            break;
                                                        //case 4:
                                                        //    if (CellValue == "" || CellValue == null)
                                                        //    {
                                                        //        CellValue = "0";
                                                        //        Convert.ToSingle(CellValue);
                                                        //        newARow["Cells"] = CellValue;
                                                        //    }
                                                        //    else
                                                        //    {
                                                        //        if (System.Text.RegularExpressions.Regex.IsMatch(CellValue, @"^[-+]?[0-9]*\.?[0-9]+$"))
                                                        //        {
                                                        //            newARow["Cells"] = CellValue;
                                                        //        }
                                                        //        else
                                                        //        {
                                                        //            MessageBox.Show("请检查" + Sheet2.Name + "工作表第" + i + "行第" + j + "列数据是否正确");
                                                        //            IsMath = false;
                                                        //        }
                                                        //    }
                                                        //    break;
                                                        case 5:

                                                            if (CellValue == "" || CellValue == null)
                                                            {
                                                                newARow["Qty"] = 0;
                                                            }
                                                            else
                                                            {
                                                                newARow["Qty"] = CellValue;
                                                            }
                                                            break;
                                                        case 6: newARow["Unit"] = CellValue; break;
                                                        case 7: newARow["Remark"] = CellValue; break;
                                                    }
                                                }
                                                AluminiumSheetSlassTable1.Rows.Add(newARow);
                                            }
                                        }
                                    }
                                    //将铝材玻璃单左侧部分放到DS中
                                    AluminiumSheetSlassTable1.TableName = "GlassIssueMaterialBills";
                                    DS.Tables.Add(AluminiumSheetSlassTable1);
                                    AluminiumSheetSlassTable1.Dispose();

                                    //铝材玻璃单右侧读取
                                    for (int i = sRowNum2; i <= eRowNum2; i++)
                                    {
                                        string AluminiumSheetGlassId2 = Guid.NewGuid().ToString().Substring(0, 12);
                                        DataRow newARow = AluminiumSheetSlassTable2.NewRow();
                                        ExcelNameValue = CStr(Sheet2.Cells[i, 11].Value);

                                        //string ExcelValue1 = Sheet.GetValue(i, 3).ToString();
                                        if ((ExcelNameValue == "") || (ExcelNameValue == null))
                                        {
                                            continue;
                                        }
                                        if (System.Text.RegularExpressions.Regex.IsMatch(ExcelNameValue, @"^[-+]?[0-9]*\.?[0-9]+$"))
                                        {
                                            if (Convert.ToSingle(ExcelNameValue) > 0)
                                            {
                                                for (int j = sBColNum2; j <= eBColNum2; j++)
                                                {
                                                    newARow["GlassIssueMaterialBillsId"] = AluminiumSheetGlassId2;
                                                    newARow["ProductOrderId"] = ParentId;

                                                    ExcelRange Rang = Sheet2.Cells[i, j];
                                                    object objectCellValue = Sheet2.GetValue(i, j);//单元格数据
                                                    string CellValue = objectCellValue != null ? objectCellValue.ToString().Trim() : "";
                                                    if (Rang.Merge)
                                                    {
                                                        CellValue = GetMergeValue(Sheet2, i, j);

                                                    }
                                                    switch (j)
                                                    {
                                                        //case 8: newARow["AluminiumSheetGlassNum"] = CellValue; break;
                                                        case 9: newARow["MaterialName"] = CellValue; break;
                                                        case 10: newARow["StandardsName"] = CellValue; break;
                                                        case 11:
                                                            if (CellValue == "" || CellValue == null)
                                                            {
                                                                CellValue = "0";
                                                                Convert.ToSingle(CellValue);
                                                                newARow["Qty"] = CellValue;
                                                            }
                                                            else
                                                            {
                                                                if (System.Text.RegularExpressions.Regex.IsMatch(CellValue, @"^[-+]?[0-9]*\.?[0-9]+$"))
                                                                {
                                                                    newARow["Qty"] = CellValue;
                                                                }
                                                                else
                                                                {
                                                                    MessageBox.Show("请检查" + Sheet2.Name + "工作表第" + i + "行第" + j + "列数据是否正确");
                                                                    IsMath = false;
                                                                }
                                                                //newARow["AluminiumSheetGlassNumber"] = CellValue;
                                                            }
                                                            break;
                                                        case 12: newARow["Unit"] = CellValue; break;
                                                    }
                                                }
                                                if (IsMath == false)
                                                {
                                                    break;
                                                }
                                                AluminiumSheetSlassTable2.Rows.Add(newARow);
                                            }
                                        }
                                    }
                                    //将铝材玻璃单右侧部分数据放到DS中
                                    AluminiumSheetSlassTable2.TableName = "GlassIssueMaterialBills1";
                                    DS.Tables.Add(AluminiumSheetSlassTable2);
                                    AluminiumSheetSlassTable2.Dispose();
                                }
                                //else
                                //{
                                //    MessageBox.Show("工作表" + Sheet2.Name + "不存在");
                                //    TheWorksheetExists = false;
                                //}
                            }
                        }

                    }
                }
                catch (Exception ex)
                {
                    throw ex;
                }
                #endregion
                //领料单
                #region
                try
                {
                    if (IsMath)
                    {
                        if (TheWorksheetExists)
                        {
                            ExcelWorksheet Sheet1 = null;//数据所在Sheet
                            Sheet1 = pck.Workbook.Worksheets["领料单"];
                            if (Sheet1 != null)
                            {
                                if (Sheet1.Name == "领料单")
                                {
                                    int maxColumnNum1 = Sheet1.Dimension.End.Column;//最大列
                                    int minColumnNum1 = Sheet1.Dimension.Start.Column;//最小列
                                    int minRowNum1 = Sheet1.Dimension.Start.Row;//最小行
                                    int maxRowNum1 = Sheet1.Dimension.End.Row;//最大行
                                    int sRowNum1 = 5;//开始行
                                    int eRowNum1 = 0;//结束行
                                    int sAColNum1 = 1;//区域A的开始栏位
                                    int eAColNum1 = 6;//区域A的结束栏位
                                    //int ZhuangXiangEndId = 0;//装箱清单结束行
                                    bool IsNumber = true;
                                    object ExcelValue2 = "";

                                    //获取领料单结束行
                                    for (int d = sRowNum1; d < maxRowNum1; d++)
                                    {
                                        string Identifier = CStr(Sheet1.Cells[d, 1].Value);
                                        if (Identifier.Trim() == "制单人：")
                                        {
                                            eRowNum1 = d - 1;
                                            break;
                                        }
                                    }
                                    //装箱清单不导入数据库
                                    //获取装箱单结束行
                                    //for (int d = eRowNum1 + 7; d < maxRowNum1; d++)
                                    //{
                                    //    if (CStr(Sheet1.Cells[d, 1].Value) == "1个UN30+尼龙胀塞8*60 1个+3.5*12自攻钉 3个")
                                    //    {
                                    //        ZhuangXiangEndId = d - 1;
                                    //        break;
                                    //    }
                                    //}
                                    //装箱单数据读取

                                    if (IsNumber == true)
                                    {
                                        //装箱清单不导入数据库
                                        #region
                                        //DataTable PackingListDateTable = new DataTable();
                                        //PackingListDateTable.Columns.Add(string.Format("MaterialDescription"), Type.GetType("System.String"));
                                        //PackingListDateTable.Columns.Add(string.Format("ProductName"), Type.GetType("System.String"));
                                        //DataRow PackingListRow = PackingListDateTable.NewRow();
                                        //for (int i = (eRowNum1 + 7); i <= ZhuangXiangEndId; i++)
                                        //{
                                        //    string MaterialDescription = CStr(Sheet1.Cells[i, 3].Value);
                                        //    if (MaterialDescription == null || MaterialDescription == "" || MaterialDescription == "物料描述")
                                        //    {
                                        //        continue;
                                        //    }
                                        //    else
                                        //    {
                                        //        PackingListRow["MaterialDescription"] = MaterialDescription;
                                        //        PackingListDateTable.Rows.Add(PackingListRow.ItemArray);
                                        //    }

                                        //}
                                        ////SqlConnection con = new SqlConnection("Data Source=192.168.124.72;Initial Catalog=OrBitXI;User ID=sa;Password=admin@2017");

                                        //SqlCommand com = new SqlCommand();
                                        //con.Open();
                                        //com.CommandText = "Pro_GetproductName";
                                        //com.Connection = con;
                                        //com.CommandType = CommandType.StoredProcedure;
                                        //SqlParameter paremeter = new SqlParameter("@Pro_GetproductName", SqlDbType.Structured)
                                        //{
                                        //    Value = PackingListDateTable
                                        //};
                                        //com.Parameters.Add(paremeter);
                                        //com.ExecuteNonQuery();
                                        //DataTable GetProductName = new DataTable();
                                        //com.Parameters.Add(new SqlParameter("@return", SqlDbType.Int));
                                        //com.Parameters["@return"].Direction = ParameterDirection.ReturnValue;
                                        //SqlDataReader reader = com.ExecuteReader();
                                        //GetProductName.Load(reader);
                                        //con.Close();
                                        //for (int i = (eRowNum1 + 7); i < ZhuangXiangEndId; i++)
                                        //{
                                        //    DataRow newARow = GetMaterialBillsDataTable.NewRow();
                                        //    string MaterialDescription = CStr(Sheet1.Cells[i, 3].Value);
                                        //    newARow["GetMaterialBillsId"] = System.Guid.NewGuid().ToString().Substring(0, 12).ToUpper();
                                        //    newARow["Requisition_Type"] = CStr(Sheet1.Cells[eRowNum1 + 2, 1].Value).Substring(0, 4);
                                        //    ExcelValue2 = CStr(Sheet1.Cells[i, 3].Value);

                                        //    //string ExcelValue1 = Sheet.GetValue(i, 3).ToString();
                                        //    if ((ExcelValue2 == "") || (ExcelValue2 == null))
                                        //    {
                                        //        continue;
                                        //    }
                                        //    for (int j = sAColNum1; j <= eAColNum1; j++)
                                        //    {
                                        //        newARow["ProductOrderId"] = ParentId;

                                        //        ExcelRange Rang = Sheet1.Cells[i, j];
                                        //        object objectCellValue = Sheet1.GetValue(i, j);//单元格数据
                                        //        string CellValue = objectCellValue != null ? objectCellValue.ToString().Trim() : "";
                                        //        if (Rang.Merge)
                                        //        {
                                        //            CellValue = GetMergeValue(Sheet1, i, j);

                                        //        }
                                        //        switch (j)
                                        //        {
                                        //            case 1: newARow["MaterialType"] = CellValue; break;
                                        //            //case 2:
                                        //            //    if (System.Text.RegularExpressions.Regex.IsMatch(CellValue, @"^[-+]?[0-9]*\.?[0-9]+$"))
                                        //            //    {
                                        //            //        newARow["NumericalOrder"] = CellValue;

                                        //            //    }
                                        //            //    else
                                        //            //    {
                                        //            //        newARow["HardwareFitting"] = CellValue;
                                        //            //    }
                                        //            //    break;
                                        //            case 3:
                                        //                for (int q = 0; q < GetProductName.Rows.Count; q++)
                                        //                {
                                        //                    string MaterialDescriptionSQL = GetProductName.Rows[q]["ProductDescription"].ToString();
                                        //                    string ProductName = GetProductName.Rows[q]["ProductName"].ToString();
                                        //                    if (MaterialDescriptionSQL == MaterialDescription)
                                        //                    {
                                        //                        newARow["ProductName"] = ProductName;
                                        //                        newARow["ProductDes"] = MaterialDescriptionSQL;
                                        //                    }
                                        //                }
                                        //                break;
                                        //            case 4:
                                        //                if (CellValue == "" || CellValue == null)
                                        //                {
                                        //                    CellValue = "0";
                                        //                    Convert.ToSingle(CellValue);
                                        //                    newARow["Qty"] = CellValue;
                                        //                }
                                        //                else
                                        //                {
                                        //                    if (System.Text.RegularExpressions.Regex.IsMatch(CellValue, @"^[-+]?[0-9]*\.?[0-9]+$"))
                                        //                    {
                                        //                        Decimal Qty = Math.Round(decimal.Parse(CellValue), 3, MidpointRounding.AwayFromZero);
                                        //                        newARow["Qty"] = Qty;
                                        //                    }
                                        //                    else
                                        //                    {
                                        //                        MessageBox.Show("请检查" + Sheet1.Name + "工作表第" + i + "行第" + j + "列数据是否正确！！！");
                                        //                        IsNumber = false;
                                        //                    }
                                        //                }
                                        //                break;
                                        //            case 5: newARow["Unit"] = CellValue; break;
                                        //            case 6: newARow["PackingConfirmed"] = CellValue; break;
                                        //        }
                                        //    }
                                        //    if (IsNumber == false)
                                        //    {
                                        //        break;
                                        //    }
                                        //    GetMaterialBillsDataTable.Rows.Add(newARow);
                                        //}
                                        //GetMaterialBillsDataTable.TableName = "GetMaterialBills";
                                        //DS.Tables.Add(GetMaterialBillsDataTable);
                                        //PackingListDateTable.Dispose();
                                        //GetMaterialBillsDataTable.Dispose();
                                        //com.Dispose();
                                        //reader.Dispose();
                                        #endregion


                                        DataTable MaterialTable = new DataTable();
                                        MaterialTable.Columns.Add(string.Format("MaterialDescription"), Type.GetType("System.String"));
                                        MaterialTable.Columns.Add(string.Format("ProductName"), Type.GetType("System.String"));
                                        DataRow MaterialTableRow = MaterialTable.NewRow();
                                        //领料单读取
                                        for (int i = sRowNum1; i <= eRowNum1; i++)
                                        {
                                            object Qty = CStr(Sheet1.Cells[i, 4].Value);
                                            if (Qty == null || Qty == "" || Convert.ToSingle(Qty) <= 0)
                                            {
                                                continue;
                                            }
                                            else
                                            {
                                                string MaterialDescription = CStr(Sheet1.Cells[i, 3].Value);
                                                MaterialTableRow["MaterialDescription"] = MaterialDescription;
                                                MaterialTable.Rows.Add(MaterialTableRow.ItemArray);
                                            }
                                        }
                                        SqlCommand cmd = new SqlCommand();
                                        con.Open();
                                        cmd.CommandText = "Pro_GetproductName";
                                        cmd.Connection = con;
                                        cmd.CommandType = CommandType.StoredProcedure;
                                        SqlParameter parm = new SqlParameter("@Pro_GetproductName", SqlDbType.Structured)
                                        {
                                            Value = MaterialTable
                                        };
                                        cmd.Parameters.Add(parm);
                                        cmd.ExecuteNonQuery();
                                        DataTable GetMaterialBillsTable = new DataTable();
                                        cmd.Parameters.Add(new SqlParameter("@return", SqlDbType.Int));
                                        cmd.Parameters["@return"].Direction = ParameterDirection.ReturnValue;
                                        SqlDataReader Datereader = cmd.ExecuteReader();
                                        GetMaterialBillsTable.Load(Datereader);
                                        //领料单数据读取sRowNum
                                        for (int i = sRowNum1; i <= eRowNum1; i++)
                                        {
                                            DataRow newARow = GetMaterialBillsDataTable1.NewRow();
                                            newARow["GetMaterialBillsId"] = System.Guid.NewGuid().ToString().Substring(0, 12).ToUpper();
                                            string ProductDescription = CStr(Sheet1.Cells[i, 3].Value);
                                            ExcelValue2 = CStr(Sheet1.Cells[i, 4].Value);

                                            //string ExcelValue1 = Sheet.GetValue(i, 3).ToString();
                                            if ((ExcelValue2 == null) || (ExcelValue2 == "") || Convert.ToSingle(ExcelValue2) <= 0)
                                            {
                                                continue;
                                            }
                                            for (int j = sAColNum1; j <= eAColNum1; j++)
                                            {
                                                newARow["ProductOrderId"] = ParentId;
                                                newARow["Requisition_Type"] = Sheet1.GetValue(1, 1).ToString().Substring(0, 9);
                                                ExcelRange Rang = Sheet1.Cells[i, j];
                                                object objectCellValue = Sheet1.GetValue(i, j);//单元格数据
                                                string CellValue = objectCellValue != null ? objectCellValue.ToString().Trim() : "";
                                                if (Rang.Merge)
                                                {
                                                    CellValue = GetMergeValue(Sheet1, i, j);

                                                }
                                                switch (j)
                                                {
                                                    case 1: newARow["MaterialType"] = CellValue; break;
                                                    //case 2:
                                                    //    if (System.Text.RegularExpressions.Regex.IsMatch(CellValue, @"^[-+]?[0-9]*\.?[0-9]+$"))
                                                    //    {
                                                    //        newARow["NumericalOrder"] = CellValue;

                                                    //    }
                                                    //    else
                                                    //    {
                                                    //        newARow["HardwareFitting"] = CellValue;
                                                    //    }
                                                    //    break;
                                                    case 3:
                                                        for (int q = 0; q < GetMaterialBillsTable.Rows.Count; q++)
                                                        {
                                                            string SQLproductDescription = GetMaterialBillsTable.Rows[q]["ProductDescription"].ToString();
                                                            string ProductName = GetMaterialBillsTable.Rows[q]["ProductName"].ToString();
                                                            if (SQLproductDescription == ProductDescription)
                                                            {
                                                                if (ProductName == null || ProductName == "")
                                                                {
                                                                    NullCount++;
                                                                }
                                                                newARow["ProductName"] = ProductName;
                                                                newARow["ProductDes"] = SQLproductDescription;
                                                                break;
                                                            }
                                                        }
                                                        break;
                                                    case 4:
                                                        if (CellValue == "" || CellValue == null)
                                                        {
                                                            CellValue = "0";
                                                            Convert.ToSingle(CellValue);
                                                            newARow["Qty"] = CellValue;
                                                        }
                                                        else
                                                        {
                                                            if (System.Text.RegularExpressions.Regex.IsMatch(CellValue, @"^[-+]?[0-9]*\.?[0-9]+$"))
                                                            {
                                                                newARow["Qty"] = CellValue;
                                                            }
                                                            else
                                                            {
                                                                MessageBox.Show("请检查第" + i + "行第" + j + "列数据是否正确！！！");
                                                                IsNumber = false;
                                                            }
                                                        }
                                                        break;
                                                    case 5: newARow["Unit"] = CellValue; break;
                                                    case 6: newARow["PackingConfirmed"] = CellValue; break;
                                                }
                                            }
                                            if (IsNumber == false)
                                            {
                                                break;
                                            }
                                            GetMaterialBillsDataTable1.Rows.Add(newARow);
                                        }
                                        GetMaterialBillsDataTable1.TableName = "GetMaterialBills1";
                                        DS.Tables.Add(GetMaterialBillsDataTable1);
                                        MaterialTable.Dispose();
                                        GetMaterialBillsDataTable1.Dispose();
                                        cmd.Dispose();
                                    }
                                }
                                //else
                                //{
                                //    MessageBox.Show("工作表" + Sheet1.Name + "不存在");
                                //    TheWorksheetExists = false;
                                //}
                            }
                        }

                    }
                }
                catch (Exception ex)
                {
                    throw ex;
                }
                #endregion
                //A6包装
                #region
                if (TheWorksheetExists)
                {
                    //装箱单读取
                    //ExcelWorksheet Sheet1 = null;//数据所在Sheet
                    //Sheet1 = pck.Workbook.Worksheets["A6包装"];
                    ExcelWorksheet Sheet5 = null;//数据所在Sheet
                    Sheet5 = pck.Workbook.Worksheets["速美包装"];
                    if (Sheet5 != null)
                    {
                        if (Sheet5.Hidden.ToString() == "Visible")
                        {
                            int maxColumnNum = Sheet5.Dimension.End.Column;//最大列
                            int minColumnNum = Sheet5.Dimension.Start.Column;//最小列
                            int minRowNum = Sheet5.Dimension.Start.Row;//最小行
                            int maxRowNum = Sheet5.Dimension.End.Row;//最大行
                            int sRowNum = 5;//开始行
                            int eRowNum = 0;//结束行
                            int sAColNum = 1;//区域A的开始栏位
                            int eAColNum = 11;//区域A的结束栏位

                            string ExcelValue2 = "";
                            int[] list = new int[maxRowNum + 1];
                            for (int d = 5; d <= maxRowNum; d++)
                            {
                                string Num1Value = CStr(Sheet5.Cells[d, 1].Value);
                                if (Num1Value.Trim() == "拆解人" || Num1Value.Trim() == "序号" || Num1Value.Trim() == "三、整件发货部分（功能柜）" || Num1Value.Trim() == "1.整件包装---可使用对口箱的柜体（抽屉柜、拉篮柜）（备注：所有速美整柜包装需增加15厚以上同柜体材质垫板）" || Num1Value.Trim() == "2.整件包装--所有无法使用对口箱的所有柜体" || Num1Value.Trim() == "散件包装的柜体---可使用一片成型包装箱的明细" || Num1Value.Trim() == "注：以上包装箱适用地柜560深、720高散件柜体；吊柜300深、720高柜体；高柜560深2160高的散件柜体（除特定两种柜形外），外地所有玻璃层板单独包装" || Num1Value.Trim() == "散件包装的柜体--所有无法使用一片成型包装箱的柜体散件（玻璃层板单独包装）" || Num1Value.Trim() == "散件包装柜体的背板" || Num1Value.Trim() == "二、散件门板部分（备注：所有速美门板包装需使用双层包装纸箱）" || Num1Value.Trim() == "1.散件包装的门板---可使用一片成型包装箱的明细" || Num1Value.Trim() == "2.散件包装的门板--所有无法使用一片成型包装箱的门板散件" || Num1Value.Trim() == "四、装饰部件部分（本地、外地通用）")
                                {
                                    eRowNum = d;
                                    //list[d] = d;
                                    if (Num1Value == "序号" || Num1Value.Trim() == "三、整件发货部分（功能柜）" || Num1Value.Trim() == "1.整件包装---可使用对口箱的柜体（抽屉柜、拉篮柜）（备注：所有速美整柜包装需增加15厚以上同柜体材质垫板）" || Num1Value.Trim() == "2.整件包装--所有无法使用对口箱的所有柜体" || Num1Value.Trim() == "散件包装的柜体---可使用一片成型包装箱的明细" || Num1Value.Trim() == "注：以上包装箱适用地柜560深、720高散件柜体；吊柜300深、720高柜体；高柜560深2160高的散件柜体（除特定两种柜形外），外地所有玻璃层板单独包装" || Num1Value.Trim() == "散件包装的柜体--所有无法使用一片成型包装箱的柜体散件（玻璃层板单独包装）" || Num1Value.Trim() == "散件包装柜体的背板" || Num1Value.Trim() == "二、散件门板部分（备注：所有速美门板包装需使用双层包装纸箱）" || Num1Value.Trim() == "1.散件包装的门板---可使用一片成型包装箱的明细" || Num1Value.Trim() == "2.散件包装的门板--所有无法使用一片成型包装箱的门板散件" || Num1Value.Trim() == "四、装饰部件部分（本地、外地通用）")
                                    {
                                        list[d] = d;
                                    }
                                    continue;
                                }
                            }
                            //ExcelValue2 = CStr(Sheet.Cells[11, 9].Value);
                            //DataTable Packing_ListTable = Packing_List();
                            //A6包装数据读取
                            for (int i = sRowNum; i <= eRowNum; i++)
                            {
                                DataRow newARow = Packing_ListTable.NewRow();
                                ExcelValue2 = CStr(Sheet5.Cells[i, 9].Value);

                                ExcelRange Range = Sheet5.Cells[i, 5];
                                object objectCellNumber = Sheet5.GetValue(i, 5);//单元格数据
                                string CellNumber = objectCellNumber != null ? objectCellNumber.ToString().Trim() : "";
                                if (Range.Merge)
                                {
                                    CellNumber = GetMergeValue(Sheet5, i, 5);
                                }

                                if (CellNumber == "" || CellNumber == null)
                                {
                                    continue;
                                }
                                if (System.Text.RegularExpressions.Regex.IsMatch(ExcelValue2.ToString(), @"^[-+]?[0-9]*\.?[0-9]+$") || ExcelValue2.Trim() == "车间调配")
                                {
                                    decimal Value = 0;
                                    int Value2 = 0;
                                    if (ExcelValue2 == "车间调配")
                                    {

                                    }
                                    else
                                    {
                                        Value = decimal.Parse(ExcelValue2);
                                        Value2 = Convert.ToInt32(Value);
                                    }
                                    if (Value > 0 || ExcelValue2 == "车间调配")
                                    {
                                        for (int j = sAColNum; j <= eAColNum; j++)
                                        {
                                            newARow["ProductOrderId"] = ParentId;
                                            //string TheDeliveryCateGory = CStr(Sheet.Cells[i, 1].Value).Trim();
                                            ExcelRange Rang = Sheet5.Cells[i, j];
                                            object objectCellValue = Sheet5.GetValue(i, j);//单元格数据
                                            string CellValue = objectCellValue != null ? objectCellValue.ToString().Trim() : "";
                                            if (Rang.Merge)
                                            {
                                                CellValue = GetMergeValue(Sheet5, i, j);
                                            }


                                            switch (j)
                                            {
                                                case 1: newARow["PackingNumber"] = CellValue; break;
                                                case 2:

                                                    newARow["Wide"] = CellValue;
                                                    break;
                                                case 3:

                                                    newARow["High"] = CellValue;
                                                    break;
                                                case 4:

                                                    newARow["Depth"] = CellValue;
                                                    break;
                                                case 5: newARow["Cell"] = CellValue; break;
                                                case 6: newARow["CabinetType"] = CellValue; break;
                                                case 7: newARow["NameOfPackagingMaterials"] = CellValue; break;
                                                case 8:
                                                    if (CellValue == "" || CellValue == null)
                                                    {
                                                        newARow["MaterialCode"] = "null";
                                                    }
                                                    else
                                                    {
                                                        newARow["MaterialCode"] = CellValue;
                                                    }
                                                    break;

                                                case 9:
                                                    if (System.Text.RegularExpressions.Regex.IsMatch(CellValue, @"^[-+]?[0-9]*\.?[0-9]+$"))
                                                    {
                                                        decimal QtyValue = Convert.ToDecimal(CellValue);
                                                        Math.Round(QtyValue, 3, MidpointRounding.AwayFromZero);
                                                        newARow["Qty"] = QtyValue;
                                                    }
                                                    else
                                                    {
                                                        newARow["PackingQuantity"] = CellValue;
                                                    }
                                                    break;
                                                case 10:
                                                    if (CellValue == "车间调配")
                                                    {
                                                        newARow["Unit"] = null;
                                                    }
                                                    else
                                                    {
                                                        newARow["Unit"] = CellValue;
                                                    }
                                                    break;
                                                case 11: newARow["Remark"] = CellValue; break;
                                            }
                                            int TheDeliveryCateGoryId = 0;
                                            int TheDeliveryCateGoryId1 = 0;
                                            int TheDeliveryCateGoryId2 = 0;
                                            string TheDeliveryCateGory = "";
                                            string PackingGroup = "";
                                            for (int q = 5; q <= eRowNum; q++)
                                            {
                                                if (list[q] == 0 || CStr(Sheet5.Cells[list[q], 1].Value).Trim() == "序号" || CStr(Sheet5.Cells[list[q], 1].Value).Trim() == "注：以上包装箱适用地柜560深、720高散件柜体；吊柜300深、720高柜体；高柜560深2160高的散件柜体（除特定两种柜形外），外地所有玻璃层板单独包装")
                                                {
                                                    continue;
                                                }
                                                TheDeliveryCateGory = CStr(Sheet5.Cells[list[q], 1].Value).Trim();
                                                if (TheDeliveryCateGory == "三、整件发货部分（功能柜）")
                                                {
                                                    TheDeliveryCateGoryId = q;
                                                }
                                                if (TheDeliveryCateGory == "二、散件门板部分（备注：所有速美门板包装需使用双层包装纸箱）")
                                                {
                                                    TheDeliveryCateGoryId1 = q;
                                                }
                                                if (TheDeliveryCateGory == "四、装饰部件部分（本地、外地通用）")
                                                {
                                                    TheDeliveryCateGoryId2 = q;
                                                }
                                            }
                                            int PackingGroupId = 0;
                                            int PackingGroupId1 = 0;
                                            int PackingGroupId2 = 0;
                                            int PackingGroupId3 = 0;
                                            int PackingGroupId4 = 0;
                                            int PackingGroupId5 = 0;
                                            int PackingGroupId6 = 0;

                                            for (int q = 6; q < eRowNum; q++)
                                            {
                                                if (list[q] == 0 || CStr(Sheet5.Cells[list[q], 1].Value).Trim() == "序号" || CStr(Sheet5.Cells[list[q], 1].Value).Trim() == "注：以上包装箱适用地柜560深、720高散件柜体；吊柜300深、720高柜体；高柜560深2160高的散件柜体（除特定两种柜形外），外地所有玻璃层板单独包装")
                                                {
                                                    continue;
                                                }
                                                PackingGroup = CStr(Sheet5.Cells[list[q], 1].Value).Trim();
                                                if (PackingGroup == "1.整件包装---可使用对口箱的柜体（抽屉柜、拉篮柜）（备注：所有速美整柜包装需增加15厚以上同柜体材质垫板）")
                                                {
                                                    PackingGroupId = q;
                                                }
                                                if (PackingGroup == "2.整件包装--所有无法使用对口箱的所有柜体")
                                                {
                                                    PackingGroupId1 = q;
                                                }
                                                if (PackingGroup == "散件包装的柜体---可使用一片成型包装箱的明细")
                                                {
                                                    PackingGroupId2 = q;
                                                }
                                                if (PackingGroup == "散件包装的柜体--所有无法使用一片成型包装箱的柜体散件（玻璃层板单独包装）")
                                                {
                                                    PackingGroupId3 = q;
                                                }
                                                if (PackingGroup == "散件包装柜体的背板")
                                                {
                                                    PackingGroupId4 = q;
                                                }
                                                if (PackingGroup == "1.散件包装的门板---可使用一片成型包装箱的明细")
                                                {
                                                    PackingGroupId5 = q;
                                                }
                                                if (PackingGroup == "2.散件包装的门板--所有无法使用一片成型包装箱的门板散件")
                                                {
                                                    PackingGroupId6 = q;
                                                }
                                            }


                                            if (i >= TheDeliveryCateGoryId && i < TheDeliveryCateGoryId1)
                                            {
                                                newARow["TheDeliveryCateGory"] = CStr(Sheet5.Cells[TheDeliveryCateGoryId, 1].Value).Trim();
                                            }
                                            else if (i >= TheDeliveryCateGoryId1 && i < TheDeliveryCateGoryId2)
                                            {
                                                newARow["TheDeliveryCateGory"] = CStr(Sheet5.Cells[TheDeliveryCateGoryId1, 1].Value).Trim();
                                            }
                                            else if (i >= TheDeliveryCateGoryId2)
                                            {
                                                newARow["TheDeliveryCateGory"] = CStr(Sheet5.Cells[TheDeliveryCateGoryId2, 1].Value).Trim();
                                            }

                                            if (i >= PackingGroupId && i < PackingGroupId1)
                                            {
                                                newARow["PackingGroup"] = CStr(Sheet5.Cells[PackingGroupId, 1].Value).Trim();
                                            }
                                            if (i >= PackingGroupId1 && i < PackingGroupId2)
                                            {
                                                newARow["PackingGroup"] = CStr(Sheet5.Cells[PackingGroupId1, 1].Value).Trim();
                                            }
                                            if (i >= PackingGroupId2 && i < PackingGroupId3)
                                            {
                                                newARow["PackingGroup"] = CStr(Sheet5.Cells[PackingGroupId2, 1].Value).Trim();
                                            }
                                            if (i >= PackingGroupId3 && i < PackingGroupId4)
                                            {
                                                newARow["PackingGroup"] = CStr(Sheet5.Cells[PackingGroupId3, 1].Value).Trim();
                                            }
                                            if (i >= PackingGroupId4 && i < PackingGroupId5)
                                            {
                                                newARow["PackingGroup"] = CStr(Sheet5.Cells[PackingGroupId4, 1].Value).Trim();
                                            }
                                            if (i >= PackingGroupId5 && i < PackingGroupId6)
                                            {
                                                newARow["PackingGroup"] = CStr(Sheet5.Cells[PackingGroupId5, 1].Value).Trim();
                                            }
                                            if (i >= PackingGroupId6 && i <= TheDeliveryCateGoryId2)
                                            {
                                                newARow["PackingGroup"] = CStr(Sheet5.Cells[PackingGroupId6, 1].Value).Trim();
                                            }
                                            if (i >= TheDeliveryCateGoryId2)
                                            {
                                                newARow["PackingGroup"] = null;
                                            }
                                        }
                                    }
                                    else
                                    {
                                        continue;
                                    }

                                }

                                if ((ExcelValue2 == "") || (ExcelValue2 == null) || (ExcelValue2 == "数量"))
                                {
                                    continue;
                                }
                                Packing_ListTable.Rows.Add(newARow);

                            }
                            Packing_ListTable.TableName = "A6Li_Packaging";
                            DS.Tables.Add(Packing_ListTable);
                            Packing_ListTable.Dispose();
                            Array.Clear(list, 0, list.Length);
                        }
                    }
                }
                #endregion
                //速美包装
                #region
                if (TheWorksheetExists)
                {
                    //装箱单读取
                    //ExcelWorksheet Sheet1 = null;//数据所在Sheet
                    //Sheet1 = pck.Workbook.Worksheets["A6包装"];
                    ExcelWorksheet Sheet4 = null;//数据所在Sheet
                    Sheet4 = pck.Workbook.Worksheets["A6包装"];
                    if (Sheet4 != null)
                    {
                        if (Sheet4.Hidden.ToString() == "Visible")
                        {
                            int maxColumnNum = Sheet4.Dimension.End.Column;//最大列
                            int minColumnNum = Sheet4.Dimension.Start.Column;//最小列
                            int minRowNum = Sheet4.Dimension.Start.Row;//最小行
                            int maxRowNum = Sheet4.Dimension.End.Row;//最大行
                            int sRowNum = 5;//开始行
                            int eRowNum = 0;//结束行
                            int sAColNum = 1;//区域A的开始栏位
                            int eAColNum = 11;//区域A的结束栏位

                            string ExcelValue2 = "";
                            int[] list = new int[maxRowNum + 1];
                            for (int d = 5; d <= maxRowNum; d++)
                            {
                                string Num1Value = CStr(Sheet4.Cells[d, 1].Value);
                                if (Num1Value.Trim() == "备注：灯箱底板、拉篮、含玻璃镜子的板件都需要打硬包装" || Num1Value.Trim() == "序号" || Num1Value.Trim() == "三、整件发货部分（功能柜）" || Num1Value.Trim() == "1.整件包装---可使用对口箱的柜体（抽屉柜、拉篮柜）（备注：150宽、450宽、600宽整柜包装需增加15厚以上同柜体材质垫" || Num1Value.Trim() == "2.整件包装--所有无法使用对口箱的所有柜体" || Num1Value.Trim() == "散件包装的柜体---可使用一片成型包装箱的明细" || Num1Value.Trim() == "注：以上包装箱适用地柜560深、720高散件柜体；吊柜300深、720高柜体；高柜560深2160高的散件柜体（除特定两种柜形外），外地所有玻璃层板单独包装" || Num1Value.Trim() == "散件包装的柜体--所有无法使用一片成型包装箱的柜体散件（玻璃层板单独包装）" || Num1Value.Trim() == "散件包装柜体的背板" || Num1Value.Trim() == "二、散件门板部分" || Num1Value.Trim() == "1.散件包装的门板---可使用一片成型包装箱的明细" || Num1Value.Trim() == "2.散件包装的门板--所有无法使用一片成型包装箱的门板散件" || Num1Value.Trim() == "四、装饰部件部分（本地、外地通用）")
                                {
                                    eRowNum = d;
                                    //list[d] = d;
                                    if (Num1Value == "序号" || Num1Value.Trim() == "三、整件发货部分（功能柜）" || Num1Value.Trim() == "1.整件包装---可使用对口箱的柜体（抽屉柜、拉篮柜）（备注：150宽、450宽、600宽整柜包装需增加15厚以上同柜体材质垫" || Num1Value.Trim() == "2.整件包装--所有无法使用对口箱的所有柜体" || Num1Value.Trim() == "散件包装的柜体---可使用一片成型包装箱的明细" || Num1Value.Trim() == "注：以上包装箱适用地柜560深、720高散件柜体；吊柜300深、720高柜体；高柜560深2160高的散件柜体（除特定两种柜形外），外地所有玻璃层板单独包装" || Num1Value.Trim() == "散件包装的柜体--所有无法使用一片成型包装箱的柜体散件（玻璃层板单独包装）" || Num1Value.Trim() == "散件包装柜体的背板" || Num1Value.Trim() == "二、散件门板部分" || Num1Value.Trim() == "1.散件包装的门板---可使用一片成型包装箱的明细" || Num1Value.Trim() == "2.散件包装的门板--所有无法使用一片成型包装箱的门板散件" || Num1Value.Trim() == "四、装饰部件部分（本地、外地通用）")
                                    {
                                        list[d] = d;
                                    }
                                    continue;
                                }
                            }
                            //ExcelValue2 = CStr(Sheet.Cells[11, 9].Value);
                            //DataTable Packing_ListTable = Packing_List();
                            //A6包装数据读取
                            for (int i = sRowNum; i <= eRowNum; i++)
                            {
                                DataRow newARow = Packing_ListA6Table.NewRow();
                                ExcelValue2 = CStr(Sheet4.Cells[i, 9].Value);

                                ExcelRange Range = Sheet4.Cells[i, 5];
                                object objectCellNumber = Sheet4.GetValue(i, 5);//单元格数据
                                string CellNumber = objectCellNumber != null ? objectCellNumber.ToString().Trim() : "";
                                if (Range.Merge)
                                {
                                    CellNumber = GetMergeValue(Sheet4, i, 5);
                                }

                                if (CellNumber == "" || CellNumber == null)
                                {
                                    continue;
                                }
                                if (System.Text.RegularExpressions.Regex.IsMatch(ExcelValue2.ToString(), @"^[-+]?[0-9]*\.?[0-9]+$") || ExcelValue2.Trim() == "车间调配")
                                {
                                    decimal Value = 0;
                                    int Value2 = 0;
                                    if (ExcelValue2 == "车间调配")
                                    {

                                    }
                                    else
                                    {
                                        Value = decimal.Parse(ExcelValue2);
                                        Value2 = Convert.ToInt32(Value);
                                    }
                                    if (Value > 0 || ExcelValue2 == "车间调配")
                                    {
                                        for (int j = sAColNum; j <= eAColNum; j++)
                                        {
                                            newARow["ProductOrderId"] = ParentId;
                                            //string TheDeliveryCateGory = CStr(Sheet.Cells[i, 1].Value).Trim();
                                            ExcelRange Rang = Sheet4.Cells[i, j];
                                            object objectCellValue = Sheet4.GetValue(i, j);//单元格数据
                                            string CellValue = objectCellValue != null ? objectCellValue.ToString().Trim() : "";
                                            if (Rang.Merge)
                                            {
                                                CellValue = GetMergeValue(Sheet4, i, j);
                                            }


                                            switch (j)
                                            {
                                                case 1: newARow["PackingNumber"] = CellValue; break;
                                                case 2:

                                                    newARow["Wide"] = CellValue;
                                                    break;
                                                case 3:

                                                    newARow["High"] = CellValue;
                                                    break;
                                                case 4:
                                                    string ExcelValue4 = CStr(Sheet4.Cells[i, j].Value);


                                                    if (ExcelValue4 == "" || ExcelValue4 == null)
                                                    {
                                                        newARow["Depth"] = "0";
                                                    }
                                                    else
                                                    {
                                                        newARow["Depth"] = CellValue;
                                                    }

                                                    break;
                                                case 5: newARow["Cell"] = CellValue; break;
                                                case 6: newARow["CabinetType"] = CellValue; break;
                                                case 7: newARow["NameOfPackagingMaterials"] = CellValue; break;
                                                case 8: newARow["MaterialCode"] = CellValue; break;

                                                case 9:
                                                    if (System.Text.RegularExpressions.Regex.IsMatch(CellValue, @"^[-+]?[0-9]*\.?[0-9]+$"))
                                                    {
                                                        Decimal Qty = Math.Round(decimal.Parse(CellValue), 3, MidpointRounding.AwayFromZero);
                                                        newARow["Qty"] = Qty;
                                                    }
                                                    else
                                                    {
                                                        newARow["PackingQuantity"] = CellValue;
                                                    }
                                                    break;
                                                case 10:
                                                    if (CellValue == "车间调配")
                                                    {
                                                        newARow["Unit"] = null;
                                                    }
                                                    else
                                                    {
                                                        newARow["Unit"] = CellValue;
                                                    }
                                                    break;
                                                case 11: newARow["Remark"] = CellValue; break;
                                            }
                                            int TheDeliveryCateGoryId = 0;
                                            int TheDeliveryCateGoryId1 = 0;
                                            int TheDeliveryCateGoryId2 = 0;
                                            string TheDeliveryCateGory = "";
                                            string PackingGroup = "";
                                            for (int q = 5; q < eRowNum; q++)
                                            {
                                                if (list[q] == 0 || CStr(Sheet4.Cells[list[q], 1].Value).Trim() == "序号" || CStr(Sheet4.Cells[list[q], 1].Value).Trim() == "注：以上包装箱适用地柜560深、720高散件柜体；吊柜300深、720高柜体；高柜560深2160高的散件柜体（除特定两种柜形外），外地所有玻璃层板单独包装")
                                                {
                                                    continue;
                                                }
                                                TheDeliveryCateGory = CStr(Sheet4.Cells[list[q], 1].Value).Trim();
                                                if (TheDeliveryCateGory == "三、整件发货部分（功能柜）")
                                                {
                                                    TheDeliveryCateGoryId = q;
                                                }
                                                if (TheDeliveryCateGory == "二、散件门板部分")
                                                {
                                                    TheDeliveryCateGoryId1 = q;
                                                }
                                                if (TheDeliveryCateGory == "四、装饰部件部分（本地、外地通用）")
                                                {
                                                    TheDeliveryCateGoryId2 = q;
                                                }
                                            }
                                            int PackingGroupId = 0;
                                            int PackingGroupId1 = 0;
                                            int PackingGroupId2 = 0;
                                            int PackingGroupId3 = 0;
                                            int PackingGroupId4 = 0;
                                            int PackingGroupId5 = 0;
                                            int PackingGroupId6 = 0;

                                            for (int q = 6; q < eRowNum; q++)
                                            {
                                                if (list[q] == 0 || CStr(Sheet4.Cells[list[q], 1].Value).Trim() == "序号" || CStr(Sheet4.Cells[list[q], 1].Value).Trim() == "注：以上包装箱适用地柜560深、720高散件柜体；吊柜300深、720高柜体；高柜560深2160高的散件柜体（除特定两种柜形外），外地所有玻璃层板单独包装")
                                                {
                                                    continue;
                                                }
                                                PackingGroup = CStr(Sheet4.Cells[list[q], 1].Value).Trim();
                                                if (PackingGroup == "1.整件包装---可使用对口箱的柜体（抽屉柜、拉篮柜）（备注：150宽、450宽、600宽整柜包装需增加15厚以上同柜体材质垫")
                                                {
                                                    PackingGroupId = q;
                                                }
                                                if (PackingGroup == "2.整件包装--所有无法使用对口箱的所有柜体")
                                                {
                                                    PackingGroupId1 = q;
                                                }
                                                if (PackingGroup == "散件包装的柜体---可使用一片成型包装箱的明细")
                                                {
                                                    PackingGroupId2 = q;
                                                }
                                                if (PackingGroup == "散件包装的柜体--所有无法使用一片成型包装箱的柜体散件（玻璃层板单独包装）")
                                                {
                                                    PackingGroupId3 = q;
                                                }
                                                if (PackingGroup == "散件包装柜体的背板")
                                                {
                                                    PackingGroupId4 = q;
                                                }
                                                if (PackingGroup == "1.散件包装的门板---可使用一片成型包装箱的明细")
                                                {
                                                    PackingGroupId5 = q;
                                                }
                                                if (PackingGroup == "2.散件包装的门板--所有无法使用一片成型包装箱的门板散件")
                                                {
                                                    PackingGroupId6 = q;
                                                }
                                            }


                                            if (i >= TheDeliveryCateGoryId && i < TheDeliveryCateGoryId1)
                                            {
                                                newARow["TheDeliveryCateGory"] = CStr(Sheet4.Cells[TheDeliveryCateGoryId, 1].Value).Trim();
                                            }
                                            else if (i >= TheDeliveryCateGoryId1 && i < TheDeliveryCateGoryId2)
                                            {
                                                newARow["TheDeliveryCateGory"] = CStr(Sheet4.Cells[TheDeliveryCateGoryId1, 1].Value).Trim();
                                            }
                                            else if (i >= TheDeliveryCateGoryId2)
                                            {
                                                newARow["TheDeliveryCateGory"] = CStr(Sheet4.Cells[TheDeliveryCateGoryId2, 1].Value).Trim();
                                            }

                                            if (i >= PackingGroupId && i < PackingGroupId1)
                                            {
                                                newARow["PackingGroup"] = CStr(Sheet4.Cells[PackingGroupId, 1].Value).Trim();
                                            }
                                            if (i >= PackingGroupId1 && i < PackingGroupId2)
                                            {
                                                newARow["PackingGroup"] = CStr(Sheet4.Cells[PackingGroupId1, 1].Value).Trim();
                                            }
                                            if (i >= PackingGroupId2 && i < PackingGroupId3)
                                            {
                                                newARow["PackingGroup"] = CStr(Sheet4.Cells[PackingGroupId2, 1].Value).Trim();
                                            }
                                            if (i >= PackingGroupId3 && i < PackingGroupId4)
                                            {
                                                newARow["PackingGroup"] = CStr(Sheet4.Cells[PackingGroupId3, 1].Value).Trim();
                                            }
                                            if (i >= PackingGroupId4 && i < PackingGroupId5)
                                            {
                                                newARow["PackingGroup"] = CStr(Sheet4.Cells[PackingGroupId4, 1].Value).Trim();
                                            }
                                            if (i >= PackingGroupId5 && i < PackingGroupId6)
                                            {
                                                newARow["PackingGroup"] = CStr(Sheet4.Cells[PackingGroupId5, 1].Value).Trim();
                                            }
                                            if (i >= PackingGroupId6 && i < TheDeliveryCateGoryId2)
                                            {
                                                newARow["PackingGroup"] = CStr(Sheet4.Cells[PackingGroupId6, 1].Value).Trim();
                                            }
                                            if (i >= TheDeliveryCateGoryId2)
                                            {
                                                newARow["PackingGroup"] = null;
                                            }
                                        }
                                    }
                                    else
                                    {
                                        continue;
                                    }

                                }

                                if ((ExcelValue2 == "") || (ExcelValue2 == null) || (ExcelValue2 == "数量"))
                                {
                                    continue;
                                }
                                Packing_ListA6Table.Rows.Add(newARow);

                            }
                            Packing_ListA6Table.TableName = "SuMeiLi_Packaging";
                            DS.Tables.Add(Packing_ListA6Table);
                            Packing_ListA6Table.Dispose();
                            Array.Clear(list, 0, list.Length);
                        }
                    }
                }
                #endregion


                //无毒包装
                #region
                try
                {
                    if (TheWorksheetExists)
                    {
                        //装箱单读取
                        //ExcelWorksheet Sheet1 = null;//数据所在Sheet
                        //Sheet1 = pck.Workbook.Worksheets["A6包装"];
                        ExcelWorksheet Sheet5 = null;//数据所在Sheet
                        Sheet5 = pck.Workbook.Worksheets["无毒包装"];
                        int maxColumnNum = Sheet5.Dimension.End.Column;//最大列
                        int minColumnNum = Sheet5.Dimension.Start.Column;//最小列
                        int minRowNum = Sheet5.Dimension.Start.Row;//最小行
                        int maxRowNum = Sheet5.Dimension.End.Row;//最大行
                        int sRowNum = 5;//开始行
                        int eRowNum = 0;//结束行
                        int sAColNum = 1;//区域A的开始栏位
                        int eAColNum = 11;//区域A的结束栏位

                        string ExcelValue2 = "";
                        int[] list = new int[maxRowNum + 1];
                        for (int d = 5; d <= maxRowNum; d++)
                        {
                            string Num1Value = CStr(Sheet5.Cells[d, 1].Value);
                            if (Num1Value.Trim() == "备注：灯箱底板、拉篮、含玻璃镜子的板件都需要打硬包装" || Num1Value.Trim() == "序号" || Num1Value.Trim() == "三、整件发货部分（功能柜）" || Num1Value.Trim() == "1.整件包装---可使用对口箱的柜体（抽屉柜、拉篮柜）（备注：所有整柜包装需增加蜂窝纸板)" || Num1Value.Trim() == "2.整件包装--所有无法使用对口箱的所有柜体（备注：所有整柜包装需增加蜂窝纸板)" || Num1Value.Trim() == "散件包装的柜体---可使用一片成型包装箱的明细" || Num1Value.Trim() == "注：以上包装箱适用地柜560深、720高散件柜体；吊柜300深、720高柜体；高柜560深2160高的散件柜体（除特定两种柜形外），外地所有玻璃层板单独包装" || Num1Value.Trim() == "散件包装的柜体--所有无法使用一片成型包装箱的柜体散件（玻璃层板单独包装）" || Num1Value.Trim() == "散件包装柜体的背板" || Num1Value.Trim() == "二、散件门板部分" || Num1Value.Trim() == "1.散件包装的门板---可使用一片成型包装箱的明细" || Num1Value.Trim() == "2.散件包装的门板--所有无法使用一片成型包装箱的门板散件" || Num1Value.Trim() == "四、装饰部件部分（本地、外地通用）")
                            {
                                eRowNum = d - 1;
                                //list[d] = d;
                                if (Num1Value == "序号" || Num1Value.Trim() == "三、整件发货部分（功能柜）" || Num1Value.Trim() == "1.整件包装---可使用对口箱的柜体（抽屉柜、拉篮柜）（备注：所有整柜包装需增加蜂窝纸板)" || Num1Value.Trim() == "2.整件包装--所有无法使用对口箱的所有柜体（备注：所有整柜包装需增加蜂窝纸板)" || Num1Value.Trim() == "散件包装的柜体---可使用一片成型包装箱的明细" || Num1Value.Trim() == "注：以上包装箱适用地柜560深、720高散件柜体；吊柜300深、720高柜体；高柜560深2160高的散件柜体（除特定两种柜形外），外地所有玻璃层板单独包装" || Num1Value.Trim() == "散件包装的柜体--所有无法使用一片成型包装箱的柜体散件（玻璃层板单独包装）" || Num1Value.Trim() == "散件包装柜体的背板" || Num1Value.Trim() == "二、散件门板部分" || Num1Value.Trim() == "1.散件包装的门板---可使用一片成型包装箱的明细" || Num1Value.Trim() == "2.散件包装的门板--所有无法使用一片成型包装箱的门板散件" || Num1Value.Trim() == "四、装饰部件部分（本地、外地通用）")
                                {
                                    list[d] = d;
                                }
                                continue;
                            }
                        }
                        //ExcelValue2 = CStr(Sheet.Cells[11, 9].Value);
                        //DataTable Packing_ListTable = Packing_List();
                        //A6包装数据读取
                        for (int i = sRowNum; i <= eRowNum; i++)
                        {
                            DataRow newARow = Packing_ListTable.NewRow();
                            ExcelValue2 = CStr(Sheet5.Cells[i, 9].Value);

                            ExcelRange Range = Sheet5.Cells[i, 5];
                            object objectCellNumber = Sheet5.GetValue(i, 5);//单元格数据
                            string CellNumber = objectCellNumber != null ? objectCellNumber.ToString().Trim() : "";
                            if (Range.Merge)
                            {
                                CellNumber = GetMergeValue(Sheet5, i, 5);
                            }

                            if (CellNumber == "" || CellNumber == null)
                            {
                                continue;
                            }
                            if (System.Text.RegularExpressions.Regex.IsMatch(ExcelValue2.ToString(), @"^[-+]?[0-9]*\.?[0-9]+$") || ExcelValue2.Trim() == "车间调配")
                            {
                                decimal Value = 0;
                                int Value2 = 0;
                                if (ExcelValue2 == "车间调配")
                                {

                                }
                                else
                                {
                                    Value = decimal.Parse(ExcelValue2);
                                    Value2 = Convert.ToInt32(Value);
                                }
                                if (Value > 0 || ExcelValue2 == "车间调配")
                                {
                                    for (int j = sAColNum; j <= eAColNum; j++)
                                    {
                                        newARow["ProductOrderId"] = ParentId;
                                        //string TheDeliveryCateGory = CStr(Sheet.Cells[i, 1].Value).Trim();
                                        ExcelRange Rang = Sheet5.Cells[i, j];
                                        object objectCellValue = Sheet5.GetValue(i, j);//单元格数据
                                        string CellValue = objectCellValue != null ? objectCellValue.ToString().Trim() : "";
                                        if (Rang.Merge)
                                        {
                                            CellValue = GetMergeValue(Sheet5, i, j);
                                        }


                                        switch (j)
                                        {
                                            case 1: newARow["PackingNumber"] = CellValue; break;
                                            case 2:

                                                newARow["Wide"] = CellValue;
                                                break;
                                            case 3:

                                                newARow["High"] = CellValue;
                                                break;
                                            case 4:

                                                newARow["Depth"] = CellValue;
                                                break;
                                            case 5: newARow["Cell"] = CellValue; break;
                                            case 6: newARow["CabinetType"] = CellValue; break;
                                            case 7: newARow["NameOfPackagingMaterials"] = CellValue; break;
                                            case 8:
                                                if (CellValue == "" || CellValue == null)
                                                {
                                                    newARow["MaterialCode"] = "null";
                                                }
                                                else
                                                {
                                                    newARow["MaterialCode"] = CellValue;
                                                }
                                                break;

                                            case 9:
                                                if (System.Text.RegularExpressions.Regex.IsMatch(CellValue, @"^[-+]?[0-9]*\.?[0-9]+$"))
                                                {
                                                    decimal QtyValue = Convert.ToDecimal(CellValue);
                                                    Math.Round(QtyValue, 3, MidpointRounding.AwayFromZero);
                                                    newARow["Qty"] = QtyValue;
                                                }
                                                else
                                                {
                                                    newARow["PackingQuantity"] = CellValue;
                                                }
                                                break;
                                            case 10:
                                                if (CellValue == "车间调配")
                                                {
                                                    newARow["Unit"] = null;
                                                }
                                                else
                                                {
                                                    newARow["Unit"] = CellValue;
                                                }
                                                break;
                                            case 11: newARow["Remark"] = CellValue; break;
                                        }
                                        int TheDeliveryCateGoryId = 0;
                                        int TheDeliveryCateGoryId1 = 0;
                                        int TheDeliveryCateGoryId2 = 0;
                                        string TheDeliveryCateGory = "";
                                        string PackingGroup = "";
                                        for (int q = 5; q <= eRowNum; q++)
                                        {
                                            if (list[q] == 0 || CStr(Sheet5.Cells[list[q], 1].Value).Trim() == "序号" || CStr(Sheet5.Cells[list[q], 1].Value).Trim() == "注：以上包装箱适用地柜560深、720高散件柜体；吊柜300深、720高柜体；高柜560深2160高的散件柜体（除特定两种柜形外），外地所有玻璃层板单独包装")
                                            {
                                                continue;
                                            }
                                            TheDeliveryCateGory = CStr(Sheet5.Cells[list[q], 1].Value).Trim();
                                            if (TheDeliveryCateGory == "三、整件发货部分（功能柜）")
                                            {
                                                TheDeliveryCateGoryId = q;
                                            }
                                            if (TheDeliveryCateGory == "二、散件门板部分")
                                            {
                                                TheDeliveryCateGoryId1 = q;
                                            }
                                            if (TheDeliveryCateGory == "四、装饰部件部分（本地、外地通用）")
                                            {
                                                TheDeliveryCateGoryId2 = q;
                                            }
                                        }
                                        int PackingGroupId = 0;
                                        int PackingGroupId1 = 0;
                                        int PackingGroupId2 = 0;
                                        int PackingGroupId3 = 0;
                                        int PackingGroupId4 = 0;
                                        int PackingGroupId5 = 0;
                                        int PackingGroupId6 = 0;

                                        for (int q = 6; q < eRowNum; q++)
                                        {
                                            if (list[q] == 0 || CStr(Sheet5.Cells[list[q], 1].Value).Trim() == "序号" || CStr(Sheet5.Cells[list[q], 1].Value).Trim() == "注：以上包装箱适用地柜560深、720高散件柜体；吊柜300深、720高柜体；高柜560深2160高的散件柜体（除特定两种柜形外），外地所有玻璃层板单独包装")
                                            {
                                                continue;
                                            }
                                            PackingGroup = CStr(Sheet5.Cells[list[q], 1].Value).Trim();
                                            if (PackingGroup == "1.整件包装---可使用对口箱的柜体（抽屉柜、拉篮柜）（备注：所有整柜包装需增加蜂窝纸板)")
                                            {
                                                PackingGroupId = q;
                                            }
                                            if (PackingGroup == "2.整件包装--所有无法使用对口箱的所有柜体（备注：所有整柜包装需增加蜂窝纸板)")
                                            {
                                                PackingGroupId1 = q;
                                            }
                                            if (PackingGroup == "散件包装的柜体---可使用一片成型包装箱的明细")
                                            {
                                                PackingGroupId2 = q;
                                            }
                                            if (PackingGroup == "散件包装的柜体--所有无法使用一片成型包装箱的柜体散件（玻璃层板单独包装）")
                                            {
                                                PackingGroupId3 = q;
                                            }
                                            if (PackingGroup == "散件包装柜体的背板")
                                            {
                                                PackingGroupId4 = q;
                                            }
                                            if (PackingGroup == "1.散件包装的门板---可使用一片成型包装箱的明细")
                                            {
                                                PackingGroupId5 = q;
                                            }
                                            if (PackingGroup == "2.散件包装的门板--所有无法使用一片成型包装箱的门板散件")
                                            {
                                                PackingGroupId6 = q;
                                            }
                                        }


                                        if (i >= TheDeliveryCateGoryId && i < TheDeliveryCateGoryId1)
                                        {
                                            newARow["TheDeliveryCateGory"] = CStr(Sheet5.Cells[TheDeliveryCateGoryId, 1].Value).Trim();
                                        }
                                        else if (i >= TheDeliveryCateGoryId1 && i < TheDeliveryCateGoryId2)
                                        {
                                            newARow["TheDeliveryCateGory"] = CStr(Sheet5.Cells[TheDeliveryCateGoryId1, 1].Value).Trim();
                                        }
                                        else if (i >= TheDeliveryCateGoryId2)
                                        {
                                            newARow["TheDeliveryCateGory"] = CStr(Sheet5.Cells[TheDeliveryCateGoryId2, 1].Value).Trim();
                                        }

                                        if (i >= PackingGroupId && i < PackingGroupId1)
                                        {
                                            newARow["PackingGroup"] = CStr(Sheet5.Cells[PackingGroupId, 1].Value).Trim();
                                        }
                                        if (i >= PackingGroupId1 && i < PackingGroupId2)
                                        {
                                            newARow["PackingGroup"] = CStr(Sheet5.Cells[PackingGroupId1, 1].Value).Trim();
                                        }
                                        if (i >= PackingGroupId2 && i < PackingGroupId3)
                                        {
                                            newARow["PackingGroup"] = CStr(Sheet5.Cells[PackingGroupId2, 1].Value).Trim();
                                        }
                                        if (i >= PackingGroupId3 && i < PackingGroupId4)
                                        {
                                            newARow["PackingGroup"] = CStr(Sheet5.Cells[PackingGroupId3, 1].Value).Trim();
                                        }
                                        if (i >= PackingGroupId4 && i < PackingGroupId5)
                                        {
                                            newARow["PackingGroup"] = CStr(Sheet5.Cells[PackingGroupId4, 1].Value).Trim();
                                        }
                                        if (i >= PackingGroupId5 && i < PackingGroupId6)
                                        {
                                            newARow["PackingGroup"] = CStr(Sheet5.Cells[PackingGroupId5, 1].Value).Trim();
                                        }
                                        if (i >= PackingGroupId6 && i <= TheDeliveryCateGoryId2)
                                        {
                                            newARow["PackingGroup"] = CStr(Sheet5.Cells[PackingGroupId6, 1].Value).Trim();
                                        }
                                        if (i >= TheDeliveryCateGoryId2)
                                        {
                                            newARow["PackingGroup"] = null;
                                        }
                                    }
                                }
                                else
                                {
                                    continue;
                                }

                            }

                            if ((ExcelValue2 == "") || (ExcelValue2 == null) || (ExcelValue2 == "数量"))
                            {
                                continue;
                            }
                            Packing_ListTable.Rows.Add(newARow);

                        }
                        Packing_ListTable.TableName = "A6Li_Packaging1";
                        DS.Tables.Add(Packing_ListTable);
                        Packing_ListTable.Dispose();
                        Array.Clear(list, 0, list.Length);
                    }
                }
                catch (Exception ex)
                {
                    throw ex;
                }
                #endregion


                //无毒平板下料单
                #region
                try
                {
                    Sheet = pck.Workbook.Worksheets["无毒平板下料单"];
                    if (Sheet != null)
                    {
                        if (Sheet.Hidden.ToString() == "Visible")
                        {
                            //if (Sheet.Name == "无毒系列作业单")
                            //{
                            int maxColumnNum = Sheet.Dimension.End.Column;//最大列
                            int minColumnNum = Sheet.Dimension.Start.Column;//最小列
                            int minRowNum = Sheet.Dimension.Start.Row;//最小行
                            int maxRowNum = Sheet.Dimension.End.Row;//最大行
                            int sRowNum = 7;//开始行
                            int eRowNum = 0;//结束行
                            int sAColNum = 1;//区域A的开始栏位
                            int eAColNum = 13;//区域A的结束栏位
                            string OrderDetailId = "";
                            //获取结束行
                            for (int d = 1; d < maxRowNum; d++)
                            {
                                if ((CStr(Sheet.Cells[d, 1].Value)).Trim() == "制单人：")
                                {
                                    eRowNum = d - 6;
                                    break;
                                }
                            }
                            ////创建datatable存放箱体序号
                            //DataTable BoxNum = new DataTable();
                            //BoxNum.Columns.Add(string.Format("BoxNumId"), Type.GetType("System.String"));
                            //BoxNum.Columns.Add(string.Format("BoxNum"), Type.GetType("System.String"));
                            //BoxNum.Columns.Add(string.Format("OrderDetailId"), Type.GetType("System.String"));
                            //BoxNum.Columns.Add(string.Format("Identification"), Type.GetType("System.String"));
                            //DataRow BoxRow = BoxNum.NewRow();
                            //for (int i = sRowNum; i < eRowNum; i++)
                            //{
                            //    string BoxNumId = CStr(Sheet.Cells[i, 1].Value);
                            //    string BoxName = CStr(Sheet.Cells[i, 5].Value);
                            //    if (BoxName == "" || BoxName == null)
                            //    {
                            //        continue;
                            //    }
                            //    else
                            //    {
                            //        BoxRow["BoxNumId"] = System.Guid.NewGuid().ToString().Substring(0, 12).ToUpper();
                            //        BoxRow["BoxNum"] = BoxNumId;
                            //        BoxRow["OrderDetailId"] = ParentId;
                            //    }
                            //    BoxNum.Rows.Add(BoxRow.ItemArray);
                            //}
                            ////调用存储过程，判断数据库表是否存在记录
                            //SqlCommand com = new SqlCommand();
                            //con.Open();
                            //com.CommandText = "Pro_SelectCaseNumber";
                            //com.Connection = con;
                            //com.CommandType = CommandType.StoredProcedure;
                            //SqlParameter paremeter = new SqlParameter("@Pro_SelectCaseNumber", SqlDbType.Structured)
                            //{
                            //    Value = BoxNum
                            //};
                            //com.ExecuteNonQuery();
                            //com.Parameters.Add(paremeter);
                            //com.Parameters.Add(new SqlParameter("@return", SqlDbType.Int));
                            //com.Parameters["@return"].Direction = ParameterDirection.ReturnValue;
                            //com.ExecuteNonQuery();
                            ////数据库存储过程返回0表示存在记录
                            //if (Convert.ToInt32(com.Parameters["@return"].Value) == 0)
                            //{
                            //领料单数据读取
                            for (int i = sRowNum; i <= eRowNum; i++)
                            {
                                DataRow newARow = Non_toxicSeriesOfMaterialsTable.NewRow();
                                object Qty = CStr(Sheet.Cells[i, 9].Value);
                                if (Qty == null || Qty.ToString() == "" || Convert.ToSingle(Qty) <= 0)
                                {
                                    continue;
                                }
                                //newARow["PlateType"] = Sheet.Cells[1, 1].Value.ToString().Substring(0, 2);//板件类型
                                newARow["HandType"] = Sheet.Cells[3, 2].Value;
                                newARow["CenterMaterials"] = Sheet.Cells[4, 2].Value;
                                newARow["FaceConduct"] = Sheet.Cells[3, 4].Value;
                                for (int j = sAColNum; j <= eAColNum; j++)
                                {
                                    con.Close();
                                    newARow["ProductOrderId"] = ParentId;
                                    ExcelRange Rang = Sheet.Cells[i, j];
                                    object objectCellValue = Sheet.GetValue(i, j);//单元格数据
                                    string CellValue = objectCellValue != null ? objectCellValue.ToString().Trim() : "";
                                    if (Rang.Merge)
                                    {
                                        CellValue = GetMergeValue(Sheet, i, j);
                                    }
                                    switch (j)
                                    {
                                        case 1:
                                            newARow["OrderDetailId"] = CellValue;
                                            break;
                                        case 2:
                                            if (CellValue == "" || CellValue == null)
                                            {
                                                CellValue = "0";
                                                Convert.ToSingle(CellValue);
                                                newARow["FWide"] = CellValue;
                                            }
                                            else
                                            {
                                                if (System.Text.RegularExpressions.Regex.IsMatch(CellValue, @"^[-+]?[0-9]*\.?[0-9]+$"))
                                                {

                                                    newARow["FWide"] = CellValue;
                                                }
                                            }
                                            //newARow["FWide"] = CellValue;
                                            break;
                                        case 3:
                                            if (CellValue == "" || CellValue == null)
                                            {
                                                CellValue = "0";
                                                Convert.ToSingle(CellValue);
                                                newARow["FHigh"] = CellValue;
                                            }
                                            else
                                            {
                                                if (System.Text.RegularExpressions.Regex.IsMatch(CellValue, @"^[-+]?[0-9]*\.?[0-9]+$"))
                                                {

                                                    newARow["FHigh"] = CellValue;
                                                }
                                            }
                                            //newARow["FLong"] = CellValue;
                                            break;
                                        case 4:
                                            if (CellValue == "" || CellValue == null)
                                            {
                                                CellValue = "0";
                                                Convert.ToSingle(CellValue);
                                                newARow["Qty"] = CellValue;
                                            }
                                            else
                                            {
                                                if (System.Text.RegularExpressions.Regex.IsMatch(CellValue, @"^[-+]?[0-9]*\.?[0-9]+$"))
                                                {

                                                    newARow["Qty"] = CellValue;
                                                }
                                                //newARow["Qty"] = CellValue;
                                            }
                                            break;
                                        case 5:
                                            newARow["PlateName"] = CellValue;
                                            break;
                                        case 6:
                                            if (CellValue == "" || CellValue == null)
                                            {
                                                CellValue = "0";
                                                Convert.ToSingle(CellValue);
                                                newARow["CutThick"] = CellValue;
                                            }
                                            else
                                            {
                                                if (System.Text.RegularExpressions.Regex.IsMatch(CellValue, @"^[-+]?[0-9]*\.?[0-9]+$"))
                                                {

                                                    newARow["CutThick"] = CellValue;
                                                }
                                                //newARow["CutThick"] = CellValue;
                                            }
                                            //newARow["CutThick"] = CellValue;
                                            break;
                                        case 7:
                                            if (CellValue == "" || CellValue == null)
                                            {
                                                CellValue = "0";
                                                Convert.ToSingle(CellValue);
                                                newARow["CutWide"] = CellValue;
                                            }
                                            else
                                            {
                                                if (System.Text.RegularExpressions.Regex.IsMatch(CellValue, @"^[-+]?[0-9]*\.?[0-9]+$"))
                                                {

                                                    newARow["CutWide"] = CellValue;
                                                }
                                                //newARow["CutQty"] = CellValue;
                                            }
                                            //newARow["CutWide"] = CellValue;
                                            break;
                                        case 8:
                                            if (CellValue == "" || CellValue == null)
                                            {
                                                CellValue = "0";
                                                Convert.ToSingle(CellValue);
                                                newARow["CutHigh"] = CellValue;
                                            }
                                            else
                                            {
                                                if (System.Text.RegularExpressions.Regex.IsMatch(CellValue, @"^[-+]?[0-9]*\.?[0-9]+$"))
                                                {

                                                    newARow["CutHigh"] = CellValue;
                                                }
                                                //newARow["CutLong"] = CellValue;
                                            }
                                            //newARow["CutLong"] = CellValue;
                                            break;
                                        case 9:
                                            if (CellValue == "" || CellValue == null)
                                            {
                                                CellValue = "0";
                                                Convert.ToSingle(CellValue);
                                                newARow["CutQty"] = CellValue;
                                            }
                                            else
                                            {
                                                if (System.Text.RegularExpressions.Regex.IsMatch(CellValue, @"^[-+]?[0-9]*\.?[0-9]+$"))
                                                {

                                                    newARow["CutQty"] = CellValue;
                                                }
                                                //newARow["CutQty"] = CellValue;
                                            }
                                            break;
                                        case 10: newARow["MaterialDescription"] = CellValue; break;
                                        case 11: newARow["MaterialNote"] = CellValue; break;
                                        case 12: newARow["DisplayMaterialSummary"] = CellValue; break;
                                        case 13: newARow["AreaOfContour"] = CellValue; break;
                                    }
                                }
                                Non_toxicSeriesOfMaterialsTable.Rows.Add(newARow.ItemArray);
                                //if (IsOrderDetailQueryDoMethod == false)
                                //{
                                //    break;
                                //}
                                //}
                                //else
                                //{
                                //    con.Close();
                                //}
                            }
                            Non_toxicSeriesOfMaterialsTable.TableName = "IssueMaterialBills3";
                            DS.Tables.Add(Non_toxicSeriesOfMaterialsTable);
                            Non_toxicSeriesOfMaterialsTable.Dispose();
                        }
                        //else
                        //{
                        //    MessageBox.Show("无毒系列作业单工作表不存在");
                        //    //TheWorksheetExists = false;
                        //}
                    }
                }
                catch (Exception ex)
                {
                    throw ex;
                }
                #endregion
                //无毒平板领料单
                #region
                try
                {
                    //if (IsOrderDetailQueryDoMethod == true)
                    //{
                    //    if (TheWorksheetExists)
                    //    {
                    ExcelWorksheet Sheet1 = null;//数据所在Sheet
                    Sheet1 = pck.Workbook.Worksheets["无毒平板领料单"];
                    if (Sheet1.Hidden.ToString() == "Visible")
                    {
                        //if (Sheet1.Name == "无毒系列领料单")
                        //{
                        int maxColumnNum1 = Sheet1.Dimension.End.Column;//最大列
                        int maxRowNum1 = Sheet1.Dimension.End.Row;//最大行
                        int Sheet1RowNum = 5;//开始行
                        int Sheet1EndRowNum = 0;//结束行
                        int Sheet1StartAColNum = 1;//区域A的开始栏位
                        int Sheet1EndAColNum = 6;//区域A的结束栏位
                        string ExcelValue2 = "";
                        for (int d = 26; d < maxRowNum1; d++)
                        {
                            if (CStr(Sheet1.Cells[d, 1].Value) == "制单人：")
                            {
                                Sheet1EndRowNum = d - 1;
                                break;
                            }
                        }
                        //创建datatable 存放物料描述信息
                        DataTable GetproductNameTable = new DataTable();
                        GetproductNameTable.Columns.Add(string.Format("ProductDescription"), Type.GetType("System.String"));
                        GetproductNameTable.Columns.Add(string.Format("ProductName"), Type.GetType("System.String"));
                        DataRow GetproductNameRow = GetproductNameTable.NewRow();
                        for (int i = Sheet1RowNum; i < Sheet1EndRowNum; i++)
                        {
                            string ProductDescription = CStr(Sheet1.Cells[i, 3].Value);

                            if (ProductDescription == "" || ProductDescription == null || ProductDescription == "型号--规格")
                            {
                                continue;
                            }
                            else
                            {
                                GetproductNameRow["ProductDescription"] = ProductDescription;
                            }
                            GetproductNameTable.Rows.Add(GetproductNameRow.ItemArray);
                        }
                        //调用存储过程根据物料描述获取物料号存放进另一个datatable
                        con.Open();
                        SqlCommand com = new SqlCommand();
                        com.CommandText = "Pro_GetproductName";
                        com.Connection = con;
                        com.CommandType = CommandType.StoredProcedure;
                        SqlParameter para = new SqlParameter("@Pro_GetproductName", SqlDbType.Structured)
                        {
                            Value = GetproductNameTable
                        };
                        com.Parameters.Add(para);
                        com.ExecuteNonQuery();
                        com.Parameters.Add(new SqlParameter("@return", SqlDbType.Int));
                        com.Parameters["@return"].Direction = ParameterDirection.ReturnValue;
                        DataTable dt = new DataTable();
                        SqlDataReader reader = com.ExecuteReader();
                        dt.Load(reader);
                        //存储过程返回0为true
                        if (Convert.ToInt32(com.Parameters["@return"].Value) == 0)
                        {
                            con.Close();
                            //领料单数据读取
                            for (int i = Sheet1RowNum; i <= Sheet1EndRowNum; i++)
                            {
                                DataRow newARow = GetMaterialBillsTable.NewRow();
                                ExcelValue2 = CStr(Sheet1.Cells[i, 4].Value);
                                string ProductDescription = CStr(Sheet1.Cells[i, 3].Value);

                                //string ExcelValue1 = Sheet.GetValue(i, 3).ToString();
                                if ((ExcelValue2 == "") || (ExcelValue2 == null) || ExcelValue2 == "单位")
                                {
                                    continue;
                                }
                                if (System.Text.RegularExpressions.Regex.IsMatch(ExcelValue2, @"^[-+]?[0-9]*\.?[0-9]+$"))
                                {
                                    if (Convert.ToSingle(ExcelValue2) > 0)
                                    {
                                        for (int j = Sheet1StartAColNum; j <= Sheet1EndAColNum; j++)
                                        {
                                            newARow["ProductOrderId"] = ParentId;

                                            ExcelRange Rang = Sheet1.Cells[i, j];
                                            object objectCellValue = Sheet1.GetValue(i, j);//单元格数据
                                            string CellValue = objectCellValue != null ? objectCellValue.ToString().Trim() : "";
                                            if (Rang.Merge)
                                            {
                                                CellValue = GetMergeValue(Sheet1, i, j);

                                            }
                                            switch (j)
                                            {
                                                case 1: newARow["ProjectName"] = CellValue; break;
                                                case 2:
                                                    newARow["NumericalOrder"] = CellValue;
                                                    break;
                                                case 3:
                                                    for (int q = 0; q < dt.Rows.Count; q++)
                                                    {
                                                        string SQLProductDescription = dt.Rows[q]["ProductDescription"].ToString();
                                                        string ProductName = dt.Rows[q]["ProductName"].ToString();
                                                        if (SQLProductDescription == ProductDescription)
                                                        {
                                                            if (ProductName == null || ProductName == "")
                                                            {
                                                                NullCount++;
                                                                break;
                                                            }
                                                            else
                                                            {
                                                                newARow["ProductName"] = ProductName;
                                                                newARow["ProductDes"] = SQLProductDescription;
                                                                break;
                                                            }
                                                        }
                                                    }
                                                    break;
                                                case 4:
                                                    if (CellValue == "" || CellValue == null)
                                                    {
                                                        CellValue = "0";
                                                        Convert.ToSingle(CellValue);
                                                        newARow["Qty"] = CellValue;
                                                    }
                                                    else
                                                    {
                                                        if (System.Text.RegularExpressions.Regex.IsMatch(CellValue, @"^[-+]?[0-9]*\.?[0-9]+$"))
                                                        {
                                                            decimal Qty = Math.Round(decimal.Parse(CellValue), 3, MidpointRounding.AwayFromZero);

                                                            newARow["Qty"] = Qty;
                                                        }
                                                        else
                                                        {
                                                            MessageBox.Show("请检查工作表" + Sheet1.Name + "第" + i + "行第" + j + "列数据是否正确");
                                                            //TheWorksheetExists = false;
                                                        }
                                                        //newARow["Qty"] = CellValue;
                                                    }
                                                    break;
                                                case 5: newARow["Unit"] = CellValue; break;
                                                case 6: newARow["PackingConfirmed"] = CellValue; break;
                                            }
                                        }
                                        GetMaterialBillsTable.Rows.Add(newARow);
                                    }
                                }
                            }
                            GetMaterialBillsTable.TableName = "GetMaterialBills3";
                            DS.Tables.Add(GetMaterialBillsTable);
                            dt.Dispose();
                            reader.Dispose();
                            com.Dispose();
                            GetMaterialBillsTable.Dispose();
                        }
                        else
                        {
                            con.Close();
                        }
                        //}
                    }
                    //    }
                    //}
                }
                catch (Exception ex)
                {
                    throw ex;
                }
                #endregion







                goto aa;
                //帕格尼尼下料单
                #region
                Sheet = pck.Workbook.Worksheets["帕格尼尼下料单"];
                if (Sheet != null)
                {
                    if (Sheet.Hidden.ToString() == "Visible")
                    {
                        //if (Sheet.Name == "无毒系列作业单")
                        //{
                        int maxColumnNum = Sheet.Dimension.End.Column;//最大列
                        int minColumnNum = Sheet.Dimension.Start.Column;//最小列
                        int minRowNum = Sheet.Dimension.Start.Row;//最小行
                        int maxRowNum = Sheet.Dimension.End.Row;//最大行
                        int sRowNum = 7;//开始行
                        int eRowNum = 0;//结束行
                        int sAColNum = 1;//区域A的开始栏位
                        int eAColNum = 13;//区域A的结束栏位
                        //string PlateName = "";
                        //string OrderDetailId = "";
                        //获取结束行
                        for (int d = 1; d < maxRowNum; d++)
                        {
                            string EndString = (CStr(Sheet.Cells[d, 1].Value)).Trim();
                            if (EndString == null || EndString == "")
                            {
                                continue;
                            }
                            else if (EndString == "制单人：")
                            {
                                eRowNum = d - 6;
                                break;
                            }
                        }
                        ////创建datatable存放箱体序号
                        //DataTable BoxNum = new DataTable();
                        //BoxNum.Columns.Add(string.Format("BoxNumId"), Type.GetType("System.String"));
                        //BoxNum.Columns.Add(string.Format("BoxNum"), Type.GetType("System.String"));
                        //BoxNum.Columns.Add(string.Format("OrderDetailId"), Type.GetType("System.String"));
                        //BoxNum.Columns.Add(string.Format("Identification"), Type.GetType("System.String"));
                        //DataRow BoxRow = BoxNum.NewRow();
                        //for (int i = sRowNum; i < eRowNum; i++)
                        //{
                        //    string BoxNumId = CStr(Sheet.Cells[i, 1].Value);
                        //    string BoxName = CStr(Sheet.Cells[i, 5].Value);
                        //    if (BoxName == "" || BoxName == null)
                        //    {
                        //        continue;
                        //    }
                        //    else
                        //    {
                        //        BoxRow["BoxNumId"] = System.Guid.NewGuid().ToString().Substring(0, 12).ToUpper();
                        //        BoxRow["BoxNum"] = BoxNumId;
                        //        BoxRow["OrderDetailId"] = ParentId;
                        //    }
                        //    BoxNum.Rows.Add(BoxRow.ItemArray);
                        //}
                        ////调用存储过程，判断数据库表是否存在记录
                        //SqlCommand com = new SqlCommand();
                        //con.Open();
                        //com.CommandText = "Pro_SelectCaseNumber";
                        //com.Connection = con;
                        //com.CommandType = CommandType.StoredProcedure;
                        //SqlParameter paremeter = new SqlParameter("@Pro_SelectCaseNumber", SqlDbType.Structured)
                        //{
                        //    Value = BoxNum
                        //};
                        //com.ExecuteNonQuery();
                        //com.Parameters.Add(paremeter);
                        //com.Parameters.Add(new SqlParameter("@return", SqlDbType.Int));
                        //com.Parameters["@return"].Direction = ParameterDirection.ReturnValue;
                        //com.ExecuteNonQuery();
                        ////数据库存储过程返回0表示存在记录
                        //if (Convert.ToInt32(com.Parameters["@return"].Value) == 0)
                        //{
                        //领料单数据读取
                        for (int i = sRowNum; i <= eRowNum; i++)
                        {
                            DataRow newARow = PaGeNiNiIssueMaterialBillsTable.NewRow();
                            object Qty = CStr(Sheet.Cells[i, 9].Value);
                            //OrderDetailId = CStr(Sheet.Cells[i, 1].Value);
                            if (Qty == "" || Qty == null || Convert.ToSingle(Qty) <= 0)
                            {
                                continue;
                            }
                            if (System.Text.RegularExpressions.Regex.IsMatch(Qty.ToString(), @"^[-+]?[0-9]*\.?[0-9]+$"))
                            {
                                newARow["PlateType"] = Sheet.Cells[1, 1].Value.ToString().Substring(0, 2);
                                newARow["HandType"] = Sheet.Cells[3, 2].Value;
                                newARow["CenterMaterials"] = Sheet.Cells[4, 2].Value;
                                newARow["FaceConduct"] = Sheet.Cells[3, 4].Value;
                                for (int j = sAColNum; j <= eAColNum; j++)
                                {
                                    con.Close();
                                    newARow["ProductOrderId"] = ParentId;
                                    ExcelRange Rang = Sheet.Cells[i, j];
                                    object objectCellValue = Sheet.GetValue(i, j);//单元格数据
                                    string CellValue = objectCellValue != null ? objectCellValue.ToString().Trim() : "";
                                    if (Rang.Merge)
                                    {
                                        CellValue = GetMergeValue(Sheet, i, j);
                                    }
                                    switch (j)
                                    {
                                        case 1:
                                            newARow["OrderDetailId"] = CellValue;
                                            break;
                                        case 2:
                                            if (CellValue == "" || CellValue == null)
                                            {
                                                CellValue = "0";
                                                Convert.ToSingle(CellValue);
                                                newARow["FWide"] = CellValue;
                                            }
                                            else
                                            {
                                                if (System.Text.RegularExpressions.Regex.IsMatch(CellValue, @"^[-+]?[0-9]*\.?[0-9]+$"))
                                                {

                                                    newARow["FWide"] = CellValue;
                                                }
                                                else
                                                {
                                                    MessageBox.Show("请检查工作表" + Sheet.Name + "第" + i + "行第" + j + "列数据是否正确");
                                                    //TheWorksheetExists = false;
                                                }
                                            }
                                            //newARow["FWide"] = CellValue;
                                            break;
                                        case 3:
                                            if (CellValue == "" || CellValue == null)
                                            {
                                                CellValue = "0";
                                                Convert.ToSingle(CellValue);
                                                newARow["FHigh"] = CellValue;
                                            }
                                            else
                                            {
                                                if (System.Text.RegularExpressions.Regex.IsMatch(CellValue, @"^[-+]?[0-9]*\.?[0-9]+$"))
                                                {

                                                    newARow["FHigh"] = CellValue;
                                                }
                                                else
                                                {
                                                    MessageBox.Show("请检查工作表" + Sheet.Name + "第" + i + "行第" + j + "列数据是否正确");
                                                    //TheWorksheetExists = false;
                                                }
                                            }
                                            //newARow["FLong"] = CellValue;
                                            break;
                                        case 4:
                                            if (CellValue == "" || CellValue == null)
                                            {
                                                CellValue = "0";
                                                Convert.ToSingle(CellValue);
                                                newARow["Qty"] = CellValue;
                                            }
                                            else
                                            {
                                                if (System.Text.RegularExpressions.Regex.IsMatch(CellValue, @"^[-+]?[0-9]*\.?[0-9]+$"))
                                                {

                                                    newARow["Qty"] = CellValue;
                                                }
                                                else
                                                {
                                                    MessageBox.Show("请检查工作表" + Sheet.Name + "第" + i + "行第" + j + "列数据是否正确");
                                                    //TheWorksheetExists = false;
                                                }
                                                //newARow["Qty"] = CellValue;
                                            }
                                            break;
                                        case 5:
                                            newARow["PlateName"] = CellValue;
                                            break;
                                        case 6:
                                            if (CellValue == "" || CellValue == null)
                                            {
                                                CellValue = "0";
                                                Convert.ToSingle(CellValue);
                                                newARow["CutThick"] = CellValue;
                                            }
                                            else
                                            {
                                                if (System.Text.RegularExpressions.Regex.IsMatch(CellValue, @"^[-+]?[0-9]*\.?[0-9]+$"))
                                                {

                                                    newARow["CutThick"] = CellValue;
                                                }
                                                else
                                                {
                                                    MessageBox.Show("请检查工作表" + Sheet.Name + "第" + i + "行第" + j + "列数据是否正确");
                                                    //TheWorksheetExists = false;
                                                }
                                                //newARow["CutThick"] = CellValue;
                                            }
                                            //newARow["CutThick"] = CellValue;
                                            break;
                                        case 7:
                                            if (CellValue == "" || CellValue == null)
                                            {
                                                CellValue = "0";
                                                Convert.ToSingle(CellValue);
                                                newARow["CutWide"] = CellValue;
                                            }
                                            else
                                            {
                                                if (System.Text.RegularExpressions.Regex.IsMatch(CellValue, @"^[-+]?[0-9]*\.?[0-9]+$"))
                                                {

                                                    newARow["CutWide"] = CellValue;
                                                }
                                                else
                                                {
                                                    MessageBox.Show("请检查工作表" + Sheet.Name + "第" + i + "行第" + j + "列数据是否正确");
                                                    //TheWorksheetExists = false;
                                                }
                                                //newARow["CutQty"] = CellValue;
                                            }
                                            //newARow["CutWide"] = CellValue;
                                            break;
                                        case 8:
                                            if (CellValue == "" || CellValue == null)
                                            {
                                                CellValue = "0";
                                                Convert.ToSingle(CellValue);
                                                newARow["CutHigh"] = CellValue;
                                            }
                                            else
                                            {
                                                if (System.Text.RegularExpressions.Regex.IsMatch(CellValue, @"^[-+]?[0-9]*\.?[0-9]+$"))
                                                {

                                                    newARow["CutHigh"] = CellValue;
                                                }
                                                else
                                                {
                                                    MessageBox.Show("请检查工作表" + Sheet.Name + "第" + i + "行第" + j + "列数据是否正确");
                                                    //TheWorksheetExists = false;
                                                }
                                                //newARow["CutLong"] = CellValue;
                                            }
                                            //newARow["CutLong"] = CellValue;
                                            break;
                                        case 9:
                                            if (CellValue == "" || CellValue == null)
                                            {
                                                CellValue = "0";
                                                Convert.ToSingle(CellValue);
                                                newARow["CutQty"] = CellValue;
                                            }
                                            else
                                            {
                                                if (System.Text.RegularExpressions.Regex.IsMatch(CellValue, @"^[-+]?[0-9]*\.?[0-9]+$"))
                                                {

                                                    newARow["CutQty"] = CellValue;
                                                }
                                                else
                                                {
                                                    MessageBox.Show("请检查工作表" + Sheet.Name + "第" + i + "行第" + j + "列数据是否正确");
                                                    //TheWorksheetExists = false;
                                                }
                                                //newARow["CutQty"] = CellValue;
                                            }
                                            break;
                                        case 10: newARow["MaterialDescription"] = CellValue; break;
                                        case 11: newARow["MaterialNote"] = CellValue; break;
                                        case 12: newARow["DisplayMaterialSummary"] = CellValue; break;
                                        case 13: newARow["AreaOfContour"] = CellValue; break;
                                    }
                                }
                                //if (IsOrderDetailQueryDoMethod == false)
                                //{
                                //    break;
                                //}
                                PaGeNiNiIssueMaterialBillsTable.Rows.Add(newARow);
                                //}
                            }
                            //}
                            //else
                            //{
                            //    con.Close();
                            //}
                        }
                        PaGeNiNiIssueMaterialBillsTable.TableName = "IssueMaterialBills1";
                        DS.Tables.Add(PaGeNiNiIssueMaterialBillsTable);
                        PaGeNiNiIssueMaterialBillsTable.Dispose();
                    }
                    //else
                    //{
                    //    MessageBox.Show("无毒系列作业单工作表不存在");
                    //    //TheWorksheetExists = false;
                    //}
                }
                #endregion
                //帕格尼尼领料单
                #region
                try
                {
                    //if (IsOrderDetailQueryDoMethod == true)
                    //{
                    //    if (TheWorksheetExists)
                    //    {
                    ExcelWorksheet Sheet1 = null;//数据所在Sheet
                    Sheet1 = pck.Workbook.Worksheets["帕格尼尼领料单"];
                    if (Sheet1.Hidden.ToString() == "Visible")
                    {
                        //if (Sheet1.Name == "无毒系列领料单")
                        //{
                        int maxColumnNum1 = Sheet1.Dimension.End.Column;//最大列
                        int maxRowNum1 = Sheet1.Dimension.End.Row;//最大行
                        int Sheet1RowNum = 5;//开始行
                        int Sheet1EndRowNum = 0;//结束行
                        int Sheet1StartAColNum = 1;//区域A的开始栏位
                        int Sheet1EndAColNum = 6;//区域A的结束栏位
                        string ExcelValue2 = "";
                        for (int d = 26; d < maxRowNum1; d++)
                        {
                            string EndRow = CStr(Sheet1.Cells[d, 1].Value);
                            if (EndRow == null || EndRow == "")
                            {
                                continue;
                            }
                            if (EndRow == "制单人：")
                            {
                                Sheet1EndRowNum = d - 1;
                                break;
                            }
                        }
                        //创建datatable 存放物料描述信息
                        DataTable GetproductNameTable = new DataTable();
                        GetproductNameTable.Columns.Add(string.Format("ProductDescription"), Type.GetType("System.String"));
                        GetproductNameTable.Columns.Add(string.Format("ProductName"), Type.GetType("System.String"));
                        DataRow GetproductNameRow = GetproductNameTable.NewRow();
                        for (int i = Sheet1RowNum; i < Sheet1EndRowNum; i++)
                        {
                            string Qty = CStr(Sheet1.Cells[i, 4].Value);
                            if (Qty == "" || Qty == null || Convert.ToSingle(Qty) <= 0)
                            {
                                continue;
                            }
                            else
                            {
                                string ProductDescription = CStr(Sheet1.Cells[i, 3].Value);
                                GetproductNameRow["ProductDescription"] = ProductDescription;
                            }
                            GetproductNameTable.Rows.Add(GetproductNameRow.ItemArray);
                        }
                        //调用存储过程根据物料描述获取物料号存放进另一个datatable
                        con.Open();
                        SqlCommand com = new SqlCommand();
                        com.CommandText = "Pro_GetproductName";
                        com.Connection = con;
                        com.CommandType = CommandType.StoredProcedure;
                        SqlParameter para = new SqlParameter("@Pro_GetproductName", SqlDbType.Structured)
                        {
                            Value = GetproductNameTable
                        };
                        com.Parameters.Add(para);
                        com.ExecuteNonQuery();
                        com.Parameters.Add(new SqlParameter("@return", SqlDbType.Int));
                        com.Parameters["@return"].Direction = ParameterDirection.ReturnValue;
                        DataTable dt = new DataTable();
                        SqlDataReader reader = com.ExecuteReader();
                        dt.Load(reader);
                        //存储过程返回0为true
                        if (Convert.ToInt32(com.Parameters["@return"].Value) == 0)
                        {
                            con.Close();
                            //领料单数据读取
                            for (int i = Sheet1RowNum; i <= Sheet1EndRowNum; i++)
                            {
                                DataRow newARow = PaGeNiNiGetMaterialBillsTable.NewRow();
                                string ProductDescription = CStr(Sheet1.Cells[i, 3].Value);
                                ExcelValue2 = CStr(Sheet1.Cells[i, 4].Value);

                                //string ExcelValue1 = Sheet.GetValue(i, 3).ToString();
                                if ((ExcelValue2 == "") || (ExcelValue2 == null))
                                {
                                    continue;
                                }
                                if (System.Text.RegularExpressions.Regex.IsMatch(ExcelValue2, @"^[-+]?[0-9]*\.?[0-9]+$"))
                                {
                                    if (Convert.ToSingle(ExcelValue2) > 0)
                                    {
                                        for (int j = Sheet1StartAColNum; j <= Sheet1EndAColNum; j++)
                                        {
                                            newARow["ProductOrderId"] = ParentId;

                                            ExcelRange Rang = Sheet1.Cells[i, j];
                                            object objectCellValue = Sheet1.GetValue(i, j);//单元格数据
                                            string CellValue = objectCellValue != null ? objectCellValue.ToString().Trim() : "";
                                            if (Rang.Merge)
                                            {
                                                CellValue = GetMergeValue(Sheet1, i, j);

                                            }
                                            switch (j)
                                            {
                                                case 1: newARow["ProjectName"] = CellValue; break;
                                                case 2:
                                                    newARow["NumericalOrder"] = CellValue;
                                                    break;
                                                case 3:
                                                    for (int q = 0; q < dt.Rows.Count; q++)
                                                    {
                                                        string SQLProductDescription = dt.Rows[q]["ProductDescription"].ToString();
                                                        if (SQLProductDescription == ProductDescription)
                                                        {
                                                            string ProductName = dt.Rows[q]["ProductName"].ToString();
                                                            if (ProductName == null || ProductName == "")
                                                            {
                                                                NullCount++;
                                                            }
                                                            newARow["ProductName"] = ProductName;
                                                            newARow["ProductDes"] = SQLProductDescription;
                                                        }
                                                    }
                                                    break;
                                                case 4:
                                                    if (CellValue == "" || CellValue == null)
                                                    {
                                                        CellValue = "0";
                                                        Convert.ToSingle(CellValue);
                                                        newARow["Qty"] = CellValue;
                                                    }
                                                    else
                                                    {
                                                        if (System.Text.RegularExpressions.Regex.IsMatch(CellValue, @"^[-+]?[0-9]*\.?[0-9]+$"))
                                                        {
                                                            decimal Qty = Math.Round(decimal.Parse(CellValue), 3, MidpointRounding.AwayFromZero);

                                                            newARow["Qty"] = Qty;
                                                        }
                                                        else
                                                        {
                                                            MessageBox.Show("请检查工作表" + Sheet1.Name + "第" + i + "行第" + j + "列数据是否正确");
                                                            //TheWorksheetExists = false;
                                                        }
                                                        //newARow["Qty"] = CellValue;
                                                    }
                                                    break;
                                                case 5: newARow["Unit"] = CellValue; break;
                                                case 6: newARow["PackingConfirmed"] = CellValue; break;
                                            }
                                        }
                                        PaGeNiNiGetMaterialBillsTable.Rows.Add(newARow);
                                    }
                                }
                            }
                            PaGeNiNiGetMaterialBillsTable.TableName = "GetMaterialBills1";
                            DS.Tables.Add(PaGeNiNiGetMaterialBillsTable);
                            dt.Dispose();
                            reader.Dispose();
                            PaGeNiNiGetMaterialBillsTable.Dispose();
                        }
                        else
                        {
                            con.Close();
                        }
                        //}
                    }
                    //    }
                    //}
                }
                catch (Exception ex)
                {
                    throw ex;
                }
                #endregion

                //西迪布赛下料单
                #region
                try
                {
                    //数据所在Sheet
                    ExcelWorksheet SidibJobListSheet = null;
                    //打开的Sheet名
                    SidibJobListSheet = pck.Workbook.Worksheets["西迪布赛下料单"];
                    if (SidibJobListSheet.Name == "西迪布赛下料单")
                    {
                        //最大列
                        int maxColumnNum = SidibJobListSheet.Dimension.End.Column;
                        //最小列
                        int minColumnNum = SidibJobListSheet.Dimension.Start.Column;
                        //最小行
                        int minRowNum = SidibJobListSheet.Dimension.Start.Row;
                        //最大行
                        int maxRowNum = SidibJobListSheet.Dimension.End.Row;
                        //开始行
                        int sRowNum = 7;
                        //结束行
                        int eRowNum = 0;
                        //区域A的开始栏位
                        int sColNum = 1;
                        //区域A的结束栏位
                        int eColNum = 15;

                        for (int i = sRowNum; i < maxRowNum; i++)
                        {
                            object BoxNum = SidibJobListSheet.Cells[i, 1].Value;
                            if (BoxNum == null || BoxNum.ToString() == "")
                            {
                                continue;
                            }
                            string BoxNum1 = BoxNum.ToString();
                            String a = BoxNum1.Replace("\n", "");
                            if (a.ToString().Trim() == "制单人")
                            {
                                eRowNum = i - 5;
                                break;
                            }
                        }
                        DataRow SidibJobListSheetTableRow = XIDiBuSaiIssueMaterialBillsTable.NewRow();

                        for (int i = sRowNum; i < eRowNum; i++)
                        {
                            object Qty = SidibJobListSheet.GetValue(i, 9);
                            if (Qty == null || Qty.ToString() == "" || Convert.ToSingle(Qty) <= 0)
                            {
                                continue;
                            }
                            for (int j = sColNum; j < eColNum; j++)
                            {
                                //判断单元格是否是合并单元格并获取值
                                ExcelRange Rang = SidibJobListSheet.Cells[i, j];
                                object objectCellValue = SidibJobListSheet.GetValue(i, j);//单元格数据
                                string CellValue = objectCellValue != null ? objectCellValue.ToString().Trim() : "";
                                if (Rang.Merge)
                                {
                                    CellValue = GetMergeValue(SidibJobListSheet, i, j);
                                }
                                switch (j)
                                {
                                    case 1:
                                        SidibJobListSheetTableRow["OrderDetailId"] = CellValue;
                                        break;
                                    case 2:
                                        //Object FWide = SidibJobListSheet.GetValue(i, j);
                                        if (CellValue == "")
                                        {
                                            Single cellvalue1 = 0;
                                            SidibJobListSheetTableRow["FWide"] = cellvalue1;
                                        }
                                        else
                                        {
                                            SidibJobListSheetTableRow["FWide"] = CellValue;
                                        }
                                        break;
                                    case 3:
                                        //Object FHigh = SidibJobListSheet.GetValue(i, j);
                                        if (CellValue == "")
                                        {
                                            SidibJobListSheetTableRow["FHigh"] = 0;
                                        }
                                        else
                                        {
                                            SidibJobListSheetTableRow["FHigh"] = CellValue;
                                        }
                                        break;
                                    case 4:
                                        //Object FQty = SidibJobListSheet.GetValue(i, j);
                                        if (CellValue == "")
                                        {
                                            SidibJobListSheetTableRow["Qty"] = 0;
                                        }
                                        else
                                        {
                                            SidibJobListSheetTableRow["Qty"] = CellValue;
                                        }
                                        break;
                                    case 5:
                                        //Object PlateName1 = SidibJobListSheet.GetValue(i, j);
                                        SidibJobListSheetTableRow["PlateName"] = CellValue;
                                        break;
                                    case 6:
                                        //Object CutThick = SidibJobListSheet.GetValue(i, j);
                                        SidibJobListSheetTableRow["CutThick"] = CellValue;
                                        break;
                                    case 7:
                                        //Object CutWide = SidibJobListSheet.GetValue(i, j);
                                        SidibJobListSheetTableRow["CutWide"] = CellValue;
                                        break;
                                    case 8:
                                        //Object CutHigh = SidibJobListSheet.GetValue(i, j);
                                        SidibJobListSheetTableRow["CutHigh"] = CellValue;
                                        break;
                                    case 9:
                                        //Object CutQty = SidibJobListSheet.GetValue(i, j);
                                        SidibJobListSheetTableRow["CutQty"] = CellValue;
                                        break;
                                    case 10:
                                        Object MaterialDescription = SidibJobListSheet.GetValue(i, j);
                                        Object MaterialDescription1 = SidibJobListSheet.GetValue(i, j + 1);
                                        if (MaterialDescription == null)
                                        {
                                            MaterialDescription = "";
                                        }
                                        if (MaterialDescription1 == null)
                                        {
                                            MaterialDescription1 = "";
                                        }
                                        SidibJobListSheetTableRow["MaterialDescription"] = MaterialDescription + MaterialDescription1.ToString();
                                        break;
                                    case 12:
                                        //Object MaterialNote = SidibJobListSheet.GetValue(i, j);
                                        SidibJobListSheetTableRow["MaterialNote"] = CellValue;
                                        break;
                                    case 13:
                                        //Object DisplayMaterialSummary = SidibJobListSheet.GetValue(i, j);
                                        SidibJobListSheetTableRow["DisplayMaterialSummary"] = CellValue;
                                        break;
                                    case 14:
                                        //Object FaceConduct = SidibJobListSheet.GetValue(i, j);
                                        SidibJobListSheetTableRow["FaceConduct"] = CellValue;
                                        break;
                                }
                            }
                            XIDiBuSaiIssueMaterialBillsTable.Rows.Add(SidibJobListSheetTableRow.ItemArray);
                        }
                        XIDiBuSaiIssueMaterialBillsTable.TableName = "IssueMaterialBills2";
                        DS.Tables.Add(XIDiBuSaiIssueMaterialBillsTable);
                        XIDiBuSaiIssueMaterialBillsTable.Dispose();
                    }
                }
                catch (Exception ex)
                {
                    throw ex;
                }
                #endregion
                //西迪布赛领料单
                #region
                try
                {
                    //数据所在Sheet
                    ExcelWorksheet SiddibRequisitionFormSheet = null;
                    //打开的Sheet名
                    SiddibRequisitionFormSheet = pck.Workbook.Worksheets["西迪布赛领料单"];
                    if (SiddibRequisitionFormSheet.Name == "西迪布赛领料单")
                    {
                        //最大列
                        int maxColumnNum = SiddibRequisitionFormSheet.Dimension.End.Column;
                        //最小列
                        int minColumnNum = SiddibRequisitionFormSheet.Dimension.Start.Column;
                        //最小行
                        int minRowNum = SiddibRequisitionFormSheet.Dimension.Start.Row;
                        //最大行
                        int maxRowNum = SiddibRequisitionFormSheet.Dimension.End.Row;
                        //开始行
                        int sRowNum = 5;
                        //结束行
                        int eRowNum = 0;
                        //区域A的开始栏位
                        int sColNum = 1;
                        //区域A的结束栏位
                        int eColNum = 6;

                        for (int i = sRowNum; i < maxRowNum; i++)
                        {
                            object RowNum = SiddibRequisitionFormSheet.Cells[i, 1].Value;
                            if (RowNum == null || RowNum.ToString() == "")
                            {
                                continue;
                            }
                            if (RowNum.ToString() == "制单人：")
                            {
                                eRowNum = i - 1;
                                break;
                            }
                        }
                        DataRow SiddibRequisitionFormSheetTableRow = XIDiBuSaiGetMaterialBillsTable.NewRow();

                        //为领料单创建一个datatable
                        DataTable PickingTable1 = new DataTable();
                        PickingTable1.Columns.Add(string.Format("ProductDescription"), Type.GetType("System.String"));//物料描述
                        PickingTable1.Columns.Add(string.Format("ProductName"), Type.GetType("System.String"));
                        DataRow Pickingrows1 = PickingTable1.NewRow();
                        //读取物料描述信息存放在datatable中
                        for (int i = sRowNum; i < eRowNum; i++)
                        {
                            string Qty = CStr(SiddibRequisitionFormSheet.Cells[i, 4].Value);
                            if (Qty == null || Qty == "" || Convert.ToSingle(Qty) <= 0)
                            {
                                continue;
                            }
                            object ProductDescription = CStr(SiddibRequisitionFormSheet.Cells[i, 3].Value);
                            Pickingrows1["ProductDescription"] = ProductDescription.ToString();
                            PickingTable1.Rows.Add(Pickingrows1.ItemArray);

                        }
                        //SqlConnection con = new SqlConnection("Data Source=192.168.124.72;Initial Catalog=OrBitXI;User ID=sa;PassWord=admin@2017");
                        con.Open();
                        //调用存储过程根据物料描述获取到物料编号存放在另一个datatable中
                        SqlCommand Pickingcmda = new SqlCommand();
                        Pickingcmda.CommandText = "Pro_GetProductName";
                        Pickingcmda.Connection = con;
                        Pickingcmda.CommandType = CommandType.StoredProcedure;
                        SqlParameter parameters =
                        new SqlParameter("@Pro_GetProductName", SqlDbType.Structured)
                        {
                            Value = PickingTable1
                        };

                        Pickingcmda.Parameters.Add(parameters);
                        Pickingcmda.ExecuteNonQuery();
                        Pickingcmda.Parameters.Add(new SqlParameter("@return", SqlDbType.Int));
                        Pickingcmda.Parameters["@return"].Direction = ParameterDirection.ReturnValue;
                        SqlDataReader readerPickinga = Pickingcmda.ExecuteReader();
                        DataTable Pickingdta = new DataTable();
                        Pickingdta.Load(readerPickinga);
                        con.Close();
                        for (int i = sRowNum; i < eRowNum; i++)
                        {
                            object plateDescription = SiddibRequisitionFormSheet.Cells[i, 3].Value;
                            if (plateDescription == null)
                            {
                                continue;
                            }
                            for (int j = sColNum; j < eColNum; j++)
                            {
                                //判断单元格是否是合并单元格并获取值
                                ExcelRange Rang = SiddibRequisitionFormSheet.Cells[i, j];
                                object objectCellValue = SiddibRequisitionFormSheet.GetValue(i, j);//单元格数据
                                string CellValue = objectCellValue != null ? objectCellValue.ToString().Trim() : "";
                                if (Rang.Merge)
                                {
                                    CellValue = GetMergeValue(SiddibRequisitionFormSheet, i, j);
                                }
                                switch (j)
                                {
                                    case 1:
                                        //Object CateGory = SiddibRequisitionFormSheet.Cells[i, j].Value;
                                        SiddibRequisitionFormSheetTableRow["CateGory"] = CellValue;
                                        break;
                                    case 2:
                                        Object NumericalOrder = SiddibRequisitionFormSheet.Cells[i, j].Value;
                                        SiddibRequisitionFormSheetTableRow["NumericalOrder"] = NumericalOrder;
                                        break;
                                    case 3:
                                        //Object CateGory = SiddibRequisitionFormSheet.Cells[i, j].Value;
                                        //SiddibRequisitionFormSheetTableRow["CateGory"] = CateGory;
                                        object PlateDescription = SiddibRequisitionFormSheet.Cells[i, j].Value;
                                        for (int a = 0; a < Pickingdta.Rows.Count; a++)
                                        {
                                            object PlateName = Pickingdta.Rows[0]["ProductName"].ToString();
                                            if (plateDescription.ToString() == Pickingdta.Rows[0]["ProductDescription"].ToString())
                                            {
                                                if (PlateName == null || PlateName.ToString() == "")
                                                {
                                                    NullCount++;
                                                }
                                                SiddibRequisitionFormSheetTableRow["ProductName"] = PlateName;
                                                SiddibRequisitionFormSheetTableRow["ProductDes"] = PlateDescription;
                                            }
                                        }
                                        break;
                                    case 4:
                                        Object Qty = SiddibRequisitionFormSheet.Cells[i, j].Value;
                                        if (Qty == null)
                                        {
                                            Qty = 0;
                                        }
                                        SiddibRequisitionFormSheetTableRow["Qty"] = Qty;
                                        break;
                                    case 5:
                                        Object Unit = SiddibRequisitionFormSheet.Cells[i, j].Value;
                                        SiddibRequisitionFormSheetTableRow["Unit"] = Unit;
                                        break;
                                }
                            }
                            XIDiBuSaiGetMaterialBillsTable.Rows.Add(SiddibRequisitionFormSheetTableRow.ItemArray);
                        }
                        XIDiBuSaiGetMaterialBillsTable.TableName = "GetMaterialBills2";
                        DS.Tables.Add(XIDiBuSaiGetMaterialBillsTable);
                        Pickingdta.Dispose();
                        XIDiBuSaiGetMaterialBillsTable.Dispose();
                        readerPickinga.Dispose();
                    }
                }
                catch (Exception ex)
                {
                    throw ex;
                }
                #endregion

                //齐彭代尔下料单
                #region
                try
                {
                    Sheet = pck.Workbook.Worksheets["齐彭代尔下料单"];
                    if (Sheet != null)
                    {
                        if (Sheet.Hidden.ToString() == "Visible")
                        {
                            //if (Sheet.Name == "无毒系列作业单")
                            //{
                            int maxColumnNum = Sheet.Dimension.End.Column;//最大列
                            int minColumnNum = Sheet.Dimension.Start.Column;//最小列
                            int minRowNum = Sheet.Dimension.Start.Row;//最小行
                            int maxRowNum = Sheet.Dimension.End.Row;//最大行
                            int sRowNum = 8;//开始行
                            int eRowNum = 0;//结束行
                            int sAColNum = 1;//区域A的开始栏位
                            int eAColNum = 13;//区域A的结束栏位
                            //string PlateName = "";
                            //string OrderDetailId = "";
                            //获取结束行
                            for (int d = 1; d < maxRowNum; d++)
                            {
                                string EndRow = CStr(Sheet.Cells[d, 1].Value);
                                if (EndRow == null || EndRow == "")
                                {
                                    continue;
                                }
                                if (EndRow == "制单人：")
                                {
                                    eRowNum = d - 3;
                                    break;
                                }
                            }
                            ////创建datatable存放箱体序号
                            //DataTable BoxNum = new DataTable();
                            //BoxNum.Columns.Add(string.Format("BoxNumId"), Type.GetType("System.String"));
                            //BoxNum.Columns.Add(string.Format("BoxNum"), Type.GetType("System.String"));
                            //BoxNum.Columns.Add(string.Format("OrderDetailId"), Type.GetType("System.String"));
                            //BoxNum.Columns.Add(string.Format("Identification"), Type.GetType("System.String"));
                            //DataRow BoxRow = BoxNum.NewRow();
                            //for (int i = sRowNum; i < eRowNum; i++)
                            //{
                            //    string BoxNumId = CStr(Sheet.Cells[i, 1].Value);
                            //    string BoxName = CStr(Sheet.Cells[i, 5].Value);
                            //    if (BoxName == "" || BoxName == null)
                            //    {
                            //        continue;
                            //    }
                            //    else
                            //    {
                            //        BoxRow["BoxNumId"] = System.Guid.NewGuid().ToString().Substring(0, 12).ToUpper();
                            //        BoxRow["BoxNum"] = BoxNumId;
                            //        BoxRow["OrderDetailId"] = ParentId;
                            //    }
                            //    BoxNum.Rows.Add(BoxRow.ItemArray);
                            //}
                            ////调用存储过程，判断数据库表是否存在记录
                            //SqlCommand com = new SqlCommand();
                            //con.Open();
                            //com.CommandText = "Pro_SelectCaseNumber";
                            //com.Connection = con;
                            //com.CommandType = CommandType.StoredProcedure;
                            //SqlParameter paremeter = new SqlParameter("@Pro_SelectCaseNumber", SqlDbType.Structured)
                            //{
                            //    Value = BoxNum
                            //};
                            //com.ExecuteNonQuery();
                            //com.Parameters.Add(paremeter);
                            //com.Parameters.Add(new SqlParameter("@return", SqlDbType.Int));
                            //com.Parameters["@return"].Direction = ParameterDirection.ReturnValue;
                            //com.ExecuteNonQuery();
                            ////数据库存储过程返回0表示存在记录
                            //if (Convert.ToInt32(com.Parameters["@return"].Value) == 0)
                            //{
                            //领料单数据读取
                            for (int i = sRowNum; i <= eRowNum; i++)
                            {
                                DataRow newARow = QiPengDaiErIssueMaterialBillsTable.NewRow();
                                string Qty = CStr(Sheet.Cells[i, 9].Value);
                                //OrderDetailId = CStr(Sheet.Cells[i, 1].Value);
                                if (Qty == "" || Qty == null || Convert.ToSingle(Qty) <= 0)
                                {
                                    continue;
                                }
                                if (System.Text.RegularExpressions.Regex.IsMatch(Qty.ToString(), @"^[-+]?[0-9]*\.?[0-9]+$"))
                                {
                                    newARow["PlateType"] = Sheet.Cells[1, 1].Value.ToString().Substring(0, 2);
                                    newARow["HandType"] = Sheet.Cells[3, 2].Value;
                                    newARow["CenterMaterials"] = Sheet.Cells[4, 2].Value;
                                    newARow["FaceConduct"] = Sheet.Cells[3, 4].Value;
                                    for (int j = sAColNum; j <= eAColNum; j++)
                                    {
                                        con.Close();
                                        newARow["ProductOrderId"] = ParentId;
                                        ExcelRange Rang = Sheet.Cells[i, j];
                                        object objectCellValue = Sheet.GetValue(i, j);//单元格数据
                                        string CellValue = objectCellValue != null ? objectCellValue.ToString().Trim() : "";
                                        if (Rang.Merge)
                                        {
                                            CellValue = GetMergeValue(Sheet, i, j);
                                        }
                                        switch (j)
                                        {
                                            case 1:
                                                newARow["OrderDetailId"] = CellValue;
                                                break;
                                            case 2:
                                                if (CellValue == "" || CellValue == null)
                                                {
                                                    CellValue = "0";
                                                    Convert.ToSingle(CellValue);
                                                    newARow["FWide"] = CellValue;
                                                }
                                                else
                                                {
                                                    if (System.Text.RegularExpressions.Regex.IsMatch(CellValue, @"^[-+]?[0-9]*\.?[0-9]+$"))
                                                    {

                                                        newARow["FWide"] = CellValue;
                                                    }
                                                    else
                                                    {
                                                        MessageBox.Show("请检查工作表" + Sheet.Name + "第" + i + "行第" + j + "列数据是否正确");
                                                        //TheWorksheetExists = false;
                                                    }
                                                }
                                                //newARow["FWide"] = CellValue;
                                                break;
                                            case 3:
                                                if (CellValue == "" || CellValue == null)
                                                {
                                                    CellValue = "0";
                                                    Convert.ToSingle(CellValue);
                                                    newARow["FHigh"] = CellValue;
                                                }
                                                else
                                                {
                                                    if (System.Text.RegularExpressions.Regex.IsMatch(CellValue, @"^[-+]?[0-9]*\.?[0-9]+$"))
                                                    {

                                                        newARow["FHigh"] = CellValue;
                                                    }
                                                    else
                                                    {
                                                        MessageBox.Show("请检查工作表" + Sheet.Name + "第" + i + "行第" + j + "列数据是否正确");
                                                        //TheWorksheetExists = false;
                                                    }
                                                }
                                                //newARow["FLong"] = CellValue;
                                                break;
                                            case 4:
                                                if (CellValue == "" || CellValue == null)
                                                {
                                                    CellValue = "0";
                                                    Convert.ToSingle(CellValue);
                                                    newARow["Qty"] = CellValue;
                                                }
                                                else
                                                {
                                                    if (System.Text.RegularExpressions.Regex.IsMatch(CellValue, @"^[-+]?[0-9]*\.?[0-9]+$"))
                                                    {

                                                        newARow["Qty"] = CellValue;
                                                    }
                                                    else
                                                    {
                                                        MessageBox.Show("请检查工作表" + Sheet.Name + "第" + i + "行第" + j + "列数据是否正确");
                                                        //TheWorksheetExists = false;
                                                    }
                                                    //newARow["Qty"] = CellValue;
                                                }
                                                break;
                                            case 5:
                                                newARow["PlateName"] = CellValue;
                                                break;
                                            case 6:
                                                if (CellValue == "" || CellValue == null)
                                                {
                                                    CellValue = "0";
                                                    Convert.ToSingle(CellValue);
                                                    newARow["CutThick"] = CellValue;
                                                }
                                                else
                                                {
                                                    if (System.Text.RegularExpressions.Regex.IsMatch(CellValue, @"^[-+]?[0-9]*\.?[0-9]+$"))
                                                    {

                                                        newARow["CutThick"] = CellValue;
                                                    }
                                                    else
                                                    {
                                                        MessageBox.Show("请检查工作表" + Sheet.Name + "第" + i + "行第" + j + "列数据是否正确");
                                                        //TheWorksheetExists = false;
                                                    }
                                                    //newARow["CutThick"] = CellValue;
                                                }
                                                //newARow["CutThick"] = CellValue;
                                                break;
                                            case 7:
                                                if (CellValue == "" || CellValue == null)
                                                {
                                                    CellValue = "0";
                                                    Convert.ToSingle(CellValue);
                                                    newARow["CutWide"] = CellValue;
                                                }
                                                else
                                                {
                                                    if (System.Text.RegularExpressions.Regex.IsMatch(CellValue, @"^[-+]?[0-9]*\.?[0-9]+$"))
                                                    {

                                                        newARow["CutWide"] = CellValue;
                                                    }
                                                    else
                                                    {
                                                        MessageBox.Show("请检查工作表" + Sheet.Name + "第" + i + "行第" + j + "列数据是否正确");
                                                        //TheWorksheetExists = false;
                                                    }
                                                    //newARow["CutQty"] = CellValue;
                                                }
                                                //newARow["CutWide"] = CellValue;
                                                break;
                                            case 8:
                                                if (CellValue == "" || CellValue == null)
                                                {
                                                    CellValue = "0";
                                                    Convert.ToSingle(CellValue);
                                                    newARow["CutHigh"] = CellValue;
                                                }
                                                else
                                                {
                                                    if (System.Text.RegularExpressions.Regex.IsMatch(CellValue, @"^[-+]?[0-9]*\.?[0-9]+$"))
                                                    {

                                                        newARow["CutHigh"] = CellValue;
                                                    }
                                                    else
                                                    {
                                                        MessageBox.Show("请检查工作表" + Sheet.Name + "第" + i + "行第" + j + "列数据是否正确");
                                                        //TheWorksheetExists = false;
                                                    }
                                                    //newARow["CutLong"] = CellValue;
                                                }
                                                //newARow["CutLong"] = CellValue;
                                                break;
                                            case 9:
                                                if (CellValue == "" || CellValue == null)
                                                {
                                                    CellValue = "0";
                                                    Convert.ToSingle(CellValue);
                                                    newARow["CutQty"] = CellValue;
                                                }
                                                else
                                                {
                                                    if (System.Text.RegularExpressions.Regex.IsMatch(CellValue, @"^[-+]?[0-9]*\.?[0-9]+$"))
                                                    {

                                                        newARow["CutQty"] = CellValue;
                                                    }
                                                    else
                                                    {
                                                        MessageBox.Show("请检查工作表" + Sheet.Name + "第" + i + "行第" + j + "列数据是否正确");
                                                        //TheWorksheetExists = false;
                                                    }
                                                    //newARow["CutQty"] = CellValue;
                                                }
                                                break;
                                            case 10: newARow["MaterialDescription"] = CellValue; break;
                                            case 11: newARow["MaterialNote"] = CellValue; break;
                                            case 12: newARow["DisplayMaterialSummary"] = CellValue; break;
                                            case 13: newARow["AreaOfContour"] = CellValue; break;
                                        }
                                    }
                                    //if (IsOrderDetailQueryDoMethod == false)
                                    //{
                                    //    break;
                                    //}
                                    QiPengDaiErIssueMaterialBillsTable.Rows.Add(newARow);

                                    //}
                                }
                                //}
                                //else
                                //{
                                //    con.Close();
                                //}
                            }
                            QiPengDaiErIssueMaterialBillsTable.TableName = "IssueMaterialBills3";
                            DS.Tables.Add(QiPengDaiErIssueMaterialBillsTable);
                            QiPengDaiErIssueMaterialBillsTable.Dispose();
                        }
                        //else
                        //{
                        //    MessageBox.Show("无毒系列作业单工作表不存在");
                        //    //TheWorksheetExists = false;
                        //}
                    }
                }
                catch (Exception ex)
                {
                    throw ex;
                }
                #endregion
                //齐彭代尔领料单
                #region
                try
                {
                    //if (IsOrderDetailQueryDoMethod == true)
                    //{
                    //    if (TheWorksheetExists)
                    //    {
                    ExcelWorksheet Sheet1 = null;//数据所在Sheet
                    Sheet1 = pck.Workbook.Worksheets["齐彭代尔领料单"];
                    if (Sheet1.Hidden.ToString() == "Visible")
                    {
                        //if (Sheet1.Name == "无毒系列领料单")
                        //{
                        int maxColumnNum1 = Sheet1.Dimension.End.Column;//最大列
                        int maxRowNum1 = Sheet1.Dimension.End.Row;//最大行
                        int Sheet1RowNum = 5;//开始行
                        int Sheet1EndRowNum = 0;//结束行
                        int Sheet1StartAColNum = 1;//区域A的开始栏位
                        int Sheet1EndAColNum = 6;//区域A的结束栏位
                        string ExcelValue2 = "";
                        for (int d = 26; d < maxRowNum1; d++)
                        {
                            string EndRow = CStr(Sheet1.Cells[d, 1].Value);
                            if (EndRow == null || EndRow == "")
                            {
                                continue;
                            }
                            if (EndRow == "制单人：")
                            {
                                Sheet1EndRowNum = d - 1;
                                break;
                            }
                        }
                        //创建datatable 存放物料描述信息
                        DataTable GetproductNameTable = new DataTable();
                        GetproductNameTable.Columns.Add(string.Format("ProductDescription"), Type.GetType("System.String"));
                        GetproductNameTable.Columns.Add(string.Format("ProductName"), Type.GetType("System.String"));
                        DataRow GetproductNameRow = GetproductNameTable.NewRow();
                        for (int i = Sheet1RowNum; i < Sheet1EndRowNum; i++)
                        {
                            string Qty = CStr(Sheet1.Cells[i, 4].Value);
                            if (Qty == "" || Qty == null || Convert.ToSingle(Qty) <= 0)
                            {
                                continue;
                            }
                            else
                            {
                                string ProductDescription = CStr(Sheet1.Cells[i, 3].Value);
                                GetproductNameRow["ProductDescription"] = ProductDescription;
                            }
                            GetproductNameTable.Rows.Add(GetproductNameRow.ItemArray);
                        }
                        //调用存储过程根据物料描述获取物料号存放进另一个datatable
                        con.Open();
                        SqlCommand com = new SqlCommand();
                        com.CommandText = "Pro_GetproductName";
                        com.Connection = con;
                        com.CommandType = CommandType.StoredProcedure;
                        SqlParameter para = new SqlParameter("@Pro_GetproductName", SqlDbType.Structured)
                        {
                            Value = GetproductNameTable
                        };
                        com.Parameters.Add(para);
                        com.ExecuteNonQuery();
                        com.Parameters.Add(new SqlParameter("@return", SqlDbType.Int));
                        com.Parameters["@return"].Direction = ParameterDirection.ReturnValue;
                        DataTable dt = new DataTable();
                        SqlDataReader reader = com.ExecuteReader();
                        dt.Load(reader);
                        //存储过程返回0为true
                        if (Convert.ToInt32(com.Parameters["@return"].Value) == 0)
                        {
                            con.Close();
                            //领料单数据读取
                            for (int i = Sheet1RowNum; i <= Sheet1EndRowNum; i++)
                            {
                                DataRow newARow = QiPengDaiErGetMaterialBillsTable.NewRow();
                                string ProductDescription = CStr(Sheet1.Cells[i, 3].Value);
                                ExcelValue2 = CStr(Sheet1.Cells[i, 4].Value);

                                //string ExcelValue1 = Sheet.GetValue(i, 3).ToString();
                                if ((ExcelValue2 == "") || (ExcelValue2 == null))
                                {
                                    continue;
                                }
                                if (System.Text.RegularExpressions.Regex.IsMatch(ExcelValue2, @"^[-+]?[0-9]*\.?[0-9]+$"))
                                {
                                    if (Convert.ToSingle(ExcelValue2) > 0)
                                    {
                                        for (int j = Sheet1StartAColNum; j <= Sheet1EndAColNum; j++)
                                        {
                                            newARow["ProductOrderId"] = ParentId;

                                            ExcelRange Rang = Sheet1.Cells[i, j];
                                            object objectCellValue = Sheet1.GetValue(i, j);//单元格数据
                                            string CellValue = objectCellValue != null ? objectCellValue.ToString().Trim() : "";
                                            if (Rang.Merge)
                                            {
                                                CellValue = GetMergeValue(Sheet1, i, j);

                                            }
                                            switch (j)
                                            {
                                                case 1: newARow["ProjectName"] = CellValue; break;
                                                case 2:
                                                    newARow["NumericalOrder"] = CellValue;
                                                    break;
                                                case 3:
                                                    for (int q = 0; q < dt.Rows.Count; q++)
                                                    {
                                                        string SQLProductDescription = dt.Rows[q]["ProductDescription"].ToString();
                                                        if (SQLProductDescription == ProductDescription)
                                                        {
                                                            string ProductName = dt.Rows[q]["ProductName"].ToString();
                                                            if (ProductName == null || ProductName == "")
                                                            {
                                                                NullCount++;
                                                            }
                                                            newARow["ProductName"] = ProductName;
                                                            newARow["ProductDes"] = SQLProductDescription;
                                                        }
                                                    }
                                                    break;
                                                case 4:
                                                    if (CellValue == "" || CellValue == null)
                                                    {
                                                        CellValue = "0";
                                                        Convert.ToSingle(CellValue);
                                                        newARow["Qty"] = CellValue;
                                                    }
                                                    else
                                                    {
                                                        if (System.Text.RegularExpressions.Regex.IsMatch(CellValue, @"^[-+]?[0-9]*\.?[0-9]+$"))
                                                        {
                                                            decimal Qty = Math.Round(decimal.Parse(CellValue), 3, MidpointRounding.AwayFromZero);

                                                            newARow["Qty"] = Qty;
                                                        }
                                                        else
                                                        {
                                                            MessageBox.Show("请检查工作表" + Sheet1.Name + "第" + i + "行第" + j + "列数据是否正确");
                                                            //TheWorksheetExists = false;
                                                        }
                                                        //newARow["Qty"] = CellValue;
                                                    }
                                                    break;
                                                case 5: newARow["Unit"] = CellValue; break;
                                                case 6: newARow["PackingConfirmed"] = CellValue; break;
                                            }
                                        }
                                        QiPengDaiErGetMaterialBillsTable.Rows.Add(newARow);
                                    }
                                }
                            }
                            QiPengDaiErGetMaterialBillsTable.TableName = "GetMaterialBills3";
                            DS.Tables.Add(QiPengDaiErGetMaterialBillsTable);
                            dt.Dispose();
                            reader.Dispose();
                            QiPengDaiErGetMaterialBillsTable.Dispose();
                        }
                        else
                        {
                            con.Close();
                        }
                        //}
                    }
                    //    }
                    //}
                }
                catch (Exception ex)
                {
                    throw ex;
                }
                #endregion




                //图兰朵下料单
                #region
                try
                {
                    //数据所在Sheet
                    ExcelWorksheet TurandotWorkSheet = null;
                    //打开的Sheet名
                    TurandotWorkSheet = pck.Workbook.Worksheets["图兰朵下料单"];
                    if (TurandotWorkSheet.Name == "图兰朵下料单")
                    {
                        //最大列
                        int maxColumnNum = TurandotWorkSheet.Dimension.End.Column;
                        //最小列
                        int minColumnNum = TurandotWorkSheet.Dimension.Start.Column;
                        //最小行
                        int minRowNum = TurandotWorkSheet.Dimension.Start.Row;
                        //最大行
                        int maxRowNum = TurandotWorkSheet.Dimension.End.Row;
                        //开始行
                        int sRowNum = 7;
                        //结束行
                        int eRowNum = 0;
                        int sColum = 1;
                        int Ecolum = 11;

                        for (int i = sRowNum; i < maxRowNum; i++)
                        {
                            Object EndRow = TurandotWorkSheet.GetValue(i, 1);
                            if (EndRow == null)
                            {
                                continue;
                            }
                            if (EndRow.ToString() == "制单人：")
                            {
                                eRowNum = i - 4;
                                break;
                            }
                        }

                        DataRow TurandotWorkSheetTableRow = TurandotWorkSheetTable.NewRow();
                        for (int i = 40; i < eRowNum; i++)
                        {
                            Object Qty = TurandotWorkSheet.GetValue(i, 9);
                            if (Qty == null || Qty.ToString() == "" || Convert.ToInt32(Qty) == 0)
                            {
                                continue;
                            }
                            string IssueMaterialBillsId = System.Guid.NewGuid().ToString().Substring(0, 12);
                            TurandotWorkSheetTableRow["IssueMaterialBillsId"] = IssueMaterialBillsId;
                            //拉手类型
                            string HandType = CStr(TurandotWorkSheet.Cells[3, 2].Value);
                            TurandotWorkSheetTableRow["HandType"] = HandType;
                            //面材处理方式FaceConduct
                            string FaceConduct = CStr(TurandotWorkSheet.Cells[3, 4].Value);
                            TurandotWorkSheetTableRow["FaceConduct"] = FaceConduct;
                            //款式
                            string Stytle = CStr(TurandotWorkSheet.Cells[3, 6].Value);
                            TurandotWorkSheetTableRow["Stytle"] = Stytle;
                            //芯材
                            string CenterMaterials = CStr(TurandotWorkSheet.Cells[4, 8].Value);
                            TurandotWorkSheetTableRow["CenterMaterials"] = CenterMaterials;
                            for (int j = sColum; j < Ecolum; j++)
                            {
                                ExcelRange Rang = TurandotWorkSheet.Cells[i, j];
                                object objectCellValue = TurandotWorkSheet.GetValue(i, j);//单元格数据
                                string CellValue = objectCellValue != null ? objectCellValue.ToString().Trim() : "";
                                if (Rang.Merge)
                                {
                                    CellValue = GetMergeValue(TurandotWorkSheet, i, j);
                                }
                                switch (j)
                                {
                                    case 1:
                                        TurandotWorkSheetTableRow["OrderDetailId"] = CellValue;
                                        break;
                                    case 2:
                                        //object PlateName1 = TurandotWorkSheet.GetValue(i, j);
                                        if (CellValue == null)
                                        {
                                            CellValue = "0";
                                        }
                                        if (System.Text.RegularExpressions.Regex.IsMatch(CellValue.ToString(), @"^[-+]?[0-9]*\.?[0-9]+$"))
                                        {
                                            TurandotWorkSheetTableRow["FWide"] = CellValue;//成型宽度
                                        }
                                        else
                                        {
                                            CellValue = "0";
                                            TurandotWorkSheetTableRow["FWide"] = CellValue;//成型宽度
                                        }
                                        break;
                                    case 3:
                                        if (CellValue == null)
                                        {
                                            CellValue = "0";
                                        }
                                        if (System.Text.RegularExpressions.Regex.IsMatch(CellValue.ToString(), @"^[-+]?[0-9]*\.?[0-9]+$"))
                                        {
                                            TurandotWorkSheetTableRow["FHigh"] = CellValue;//成型高度
                                        }
                                        else
                                        {
                                            CellValue = "0";
                                            TurandotWorkSheetTableRow["FHigh"] = CellValue;//成型高度
                                        }
                                        //object FWide = TurandotWorkSheet.GetValue(i, j);
                                        //TurandotWorkSheetTableRow["FHigh"] = CellValue;//成型高度
                                        break;
                                    case 4:
                                        //object FHigh = TurandotWorkSheet.GetValue(i, j);
                                        if (CellValue == null)
                                        {
                                            CellValue = "0";
                                        }
                                        if (System.Text.RegularExpressions.Regex.IsMatch(CellValue.ToString(), @"^[-+]?[0-9]*\.?[0-9]+$"))
                                        {
                                            TurandotWorkSheetTableRow["Qty"] = CellValue;//成型数量
                                        }
                                        else
                                        {
                                            CellValue = "0";
                                            TurandotWorkSheetTableRow["Qty"] = CellValue;//成型数量
                                        }
                                        //TurandotWorkSheetTableRow["Qty"] = CellValue;//成型数量
                                        break;
                                    case 5:
                                        //object FQTY = TurandotWorkSheet.GetValue(i, j);
                                        TurandotWorkSheetTableRow["PlateName"] = CellValue;//板件名称
                                        break;
                                    case 6:
                                        if (System.Text.RegularExpressions.Regex.IsMatch(CellValue.ToString(), @"^[-+]?[0-9]*\.?[0-9]+$"))
                                        {
                                            TurandotWorkSheetTableRow["CutThick"] = CellValue;//下料厚度
                                        }
                                        else
                                        {
                                            CellValue = "0";
                                            TurandotWorkSheetTableRow["CutThick"] = CellValue;//下料厚度
                                        }
                                        //object FQTY = TurandotWorkSheet.GetValue(i, j);
                                        //TurandotWorkSheetTableRow["CutThick"] = CellValue;//下料厚度
                                        break;
                                    case 7:
                                        if (System.Text.RegularExpressions.Regex.IsMatch(CellValue.ToString(), @"^[-+]?[0-9]*\.?[0-9]+$"))
                                        {
                                            TurandotWorkSheetTableRow["CutWide"] = CellValue;//下料宽度
                                        }
                                        else
                                        {
                                            CellValue = "0";
                                            TurandotWorkSheetTableRow["CutWide"] = CellValue;//下料宽度
                                        }
                                        //object CutWide = TurandotWorkSheet.GetValue(i, j);
                                        //TurandotWorkSheetTableRow["CutWide"] = CellValue;//下料宽度
                                        break;
                                    case 8:
                                        if (System.Text.RegularExpressions.Regex.IsMatch(CellValue.ToString(), @"^[-+]?[0-9]*\.?[0-9]+$"))
                                        {
                                            TurandotWorkSheetTableRow["CutHigh"] = CellValue;//下料高度
                                        }
                                        else
                                        {
                                            CellValue = "0";
                                            TurandotWorkSheetTableRow["CutHigh"] = CellValue;//下料高度
                                        }
                                        //object CutHigh = TurandotWorkSheet.GetValue(i, j);
                                        //TurandotWorkSheetTableRow["CutHigh"] = CellValue;//下料高度
                                        break;
                                    case 9:
                                        if (System.Text.RegularExpressions.Regex.IsMatch(CellValue.ToString(), @"^[-+]?[0-9]*\.?[0-9]+$"))
                                        {
                                            TurandotWorkSheetTableRow["CutQty"] = CellValue;//下料数量
                                        }
                                        else
                                        {
                                            CellValue = "0";
                                            TurandotWorkSheetTableRow["CutQty"] = CellValue;//下料数量
                                        }
                                        //object CutQty = TurandotWorkSheet.GetValue(i, j);
                                        //TurandotWorkSheetTableRow["CutQty"] = CellValue;//下料数量
                                        break;
                                    case 10:
                                        TurandotWorkSheetTableRow["MaterialDescription"] = CellValue;//加工备注
                                        break;
                                }
                            }
                            TurandotWorkSheetTable.Rows.Add(TurandotWorkSheetTableRow.ItemArray);
                        }
                        TurandotWorkSheetTable.TableName = "IssueMaterialBills4";
                        DS.Tables.Add(TurandotWorkSheetTable);
                        TurandotWorkSheetTable.Dispose();
                    }
                }
                catch (Exception ex)
                {
                    throw ex;
                }
                #endregion
                //图兰朵领料单 备注：没有写读取物料号代码
                #region
                try
                {
                    //数据所在Sheet
                    ExcelWorksheet TurandotCollectionSheet = null;
                    //打开的Sheet名
                    TurandotCollectionSheet = pck.Workbook.Worksheets["图兰朵领料单"];
                    if (TurandotCollectionSheet.Name == "图兰朵领料单")
                    {
                        //最大列
                        int maxColumnNum = TurandotCollectionSheet.Dimension.End.Column;
                        //最小列
                        int minColumnNum = TurandotCollectionSheet.Dimension.Start.Column;
                        //最小行
                        int minRowNum = TurandotCollectionSheet.Dimension.Start.Row;
                        //最大行
                        int maxRowNum = TurandotCollectionSheet.Dimension.End.Row;
                        //开始行
                        int sRowNum = 5;
                        //结束行
                        int eRowNum = 0;
                        //区域A的开始栏位
                        int sColNum = 1;
                        //区域A的结束栏位
                        int eColNum = 7;

                        for (int i = sRowNum; i <= maxRowNum; i++)
                        {
                            Object EndRow = TurandotCollectionSheet.GetValue(i, 1);
                            if (EndRow == null)
                            {
                                continue;
                            }
                            if (EndRow.ToString() == "制单人：")
                            {
                                eRowNum = i - 1;
                                break;
                            }
                        }
                        //创建datatable 存放物料描述信息
                        DataTable GetproductNameTable = new DataTable();
                        GetproductNameTable.Columns.Add(string.Format("ProductDescription"), Type.GetType("System.String"));
                        GetproductNameTable.Columns.Add(string.Format("ProductName"), Type.GetType("System.String"));
                        DataRow GetproductNameRow = GetproductNameTable.NewRow();
                        for (int i = sRowNum; i < eRowNum; i++)
                        {
                            string Qty = CStr(TurandotCollectionSheet.Cells[i, 4].Value);

                            if (Qty == "" || Qty == null || Convert.ToSingle(Qty) <= 0)
                            {
                                continue;
                            }
                            else
                            {
                                string ProductDescription = CStr(TurandotCollectionSheet.Cells[i, 3].Value);
                                GetproductNameRow["ProductDescription"] = ProductDescription;
                            }
                            GetproductNameTable.Rows.Add(GetproductNameRow.ItemArray);
                        }
                        //调用存储过程根据物料描述获取物料号存放进另一个datatable
                        con.Open();
                        SqlCommand com = new SqlCommand();
                        com.CommandText = "Pro_GetproductName";
                        com.Connection = con;
                        com.CommandType = CommandType.StoredProcedure;
                        SqlParameter para = new SqlParameter("@Pro_GetproductName", SqlDbType.Structured)
                        {
                            Value = GetproductNameTable
                        };
                        com.Parameters.Add(para);
                        com.ExecuteNonQuery();
                        com.Parameters.Add(new SqlParameter("@return", SqlDbType.Int));
                        com.Parameters["@return"].Direction = ParameterDirection.ReturnValue;
                        DataTable dt = new DataTable();
                        SqlDataReader reader = com.ExecuteReader();
                        dt.Load(reader);
                        //存储过程返回0为true
                        DataRow MaterialRequisitionSheetTableRow = MaterialRequisitionSheetTable.NewRow();
                        for (int i = sRowNum; i < eRowNum; i++)
                        {
                            Object Qty = TurandotCollectionSheet.GetValue(i, 4);
                            if (Qty == null)
                            {
                                continue;
                            }
                            MaterialRequisitionSheetTableRow["GetMaterialBillsId"] = System.Guid.NewGuid().ToString().Substring(0, 12).ToUpper();//领料单主键

                            MaterialRequisitionSheetTableRow["ProductOrderId"] = ParentId;//生产订单主键
                            string ProductDescription = CStr(TurandotCollectionSheet.Cells[i, 3].Value);
                            for (int j = sColNum; j < eColNum; j++)
                            {
                                //判断单元格是否是合并单元格并获取值
                                ExcelRange Rang = TurandotCollectionSheet.Cells[i, j];
                                object objectCellValue = TurandotCollectionSheet.GetValue(i, j);//单元格数据
                                string CellValue = objectCellValue != null ? objectCellValue.ToString().Trim() : "";
                                if (Rang.Merge)
                                {
                                    CellValue = GetMergeValue(TurandotCollectionSheet, i, j);
                                }
                                switch (j)
                                {
                                    case 1:
                                        //Object CateGory = TurandotCollectionSheet.GetValue(i, j);
                                        MaterialRequisitionSheetTableRow["MaterialType"] = CellValue;//物料类型
                                        break;
                                    case 2:
                                        //Object NumericalOrder = TurandotCollectionSheet.GetValue(i, j);
                                        MaterialRequisitionSheetTableRow["NumericalOrder"] = CellValue;//序号
                                        break;
                                    case 3:
                                        for (int q = 0; q < dt.Rows.Count; q++)
                                        {
                                            string SQLProductDescription = dt.Rows[q]["ProductDescription"].ToString();
                                            if (SQLProductDescription == ProductDescription)
                                            {
                                                string ProductName = dt.Rows[q]["ProductName"].ToString();
                                                if (ProductName == null || ProductName == "")
                                                {
                                                    NullCount++;
                                                }
                                                MaterialRequisitionSheetTableRow["ProductName"] = ProductName;//物料号
                                                MaterialRequisitionSheetTableRow["ProductDes"] = SQLProductDescription;//物料描述
                                            }
                                        }
                                        //MaterialRequisitionSheetTableRow["ProductDes"] = PlateDescription.ToString() + PlateDescription1;
                                        break;
                                    case 4:
                                        MaterialRequisitionSheetTableRow["Qty"] = Qty;//数量
                                        break;
                                    case 5:
                                        //Object Unitt = TurandotCollectionSheet.GetValue(i, j);
                                        MaterialRequisitionSheetTableRow["Unit"] = CellValue;//单位
                                        break;
                                    case 6:
                                        //Object Unitt = TurandotCollectionSheet.GetValue(i, j);
                                        MaterialRequisitionSheetTableRow["PackingConfirmed"] = CellValue;//备注
                                        break;
                                }
                            }
                            MaterialRequisitionSheetTable.Rows.Add(MaterialRequisitionSheetTableRow.ItemArray);
                        }
                        MaterialRequisitionSheetTable.TableName = "GetMaterialBills4";
                        DS.Tables.Add(MaterialRequisitionSheetTable);
                        MaterialRequisitionSheetTable.Dispose();
                        dt.Dispose();
                    }
                }
                catch (Exception ex)
                {
                    throw ex;
                }
                #endregion


                //古典门板作业单
                #region
                try
                {
                    //数据所在Sheet
                    ExcelWorksheet ClassicDoorSheet = null;
                    //打开的Sheet名
                    ClassicDoorSheet = pck.Workbook.Worksheets["古典门板作业单"];
                    if (ClassicDoorSheet.Name == "古典门板作业单")
                    {
                        //最大列
                        int maxColumnNum = ClassicDoorSheet.Dimension.End.Column;
                        //最小列
                        int minColumnNum = ClassicDoorSheet.Dimension.Start.Column;
                        //最小行
                        int minRowNum = ClassicDoorSheet.Dimension.Start.Row;
                        //最大行
                        int maxRowNum = ClassicDoorSheet.Dimension.End.Row;
                        //开始行
                        int sRowNum = 7;
                        //结束行
                        int eRowNum = 0;
                        //区域A的开始栏位
                        int sColNum = 1;
                        //区域A的结束栏位
                        int eColNum = 13;

                        for (int i = sRowNum; i < maxRowNum; i++)
                        {
                            Object plateName = ClassicDoorSheet.Cells[i, 1].Value;
                            if (plateName == null)
                            {
                                continue;
                            }
                            if (plateName.ToString() == "说明：按照2012新工艺铣型")
                            {
                                eRowNum = i - 1;
                                break;
                            }
                        }

                        DataRow ClassicDoorSheetTableRow = ClassicDoorSheetTable.NewRow();

                        ////创建datatable存放箱体序号
                        //DataTable BoxNum = new DataTable();
                        //BoxNum.Columns.Add(string.Format("BoxNumId"), Type.GetType("System.String"));
                        //BoxNum.Columns.Add(string.Format("BoxNum"), Type.GetType("System.String"));
                        //BoxNum.Columns.Add(string.Format("OrderDetailId"), Type.GetType("System.String"));
                        //BoxNum.Columns.Add(string.Format("Identification"), Type.GetType("System.String"));
                        //DataRow BoxRow = BoxNum.NewRow();
                        //for (int i = sRowNum; i < eRowNum; i++)
                        //{
                        //    string BoxNumId = CStr(ClassicDoorSheet.Cells[i, 1].Value);
                        //    string BoxName = CStr(ClassicDoorSheet.Cells[i, 5].Value);
                        //    if (BoxName == "" || BoxName == null)
                        //    {
                        //        continue;
                        //    }
                        //    else
                        //    {
                        //        BoxRow["BoxNumId"] = System.Guid.NewGuid().ToString().Substring(0, 12).ToUpper();
                        //        BoxRow["BoxNum"] = BoxNumId;
                        //        BoxRow["OrderDetailId"] = ParentId;
                        //    }
                        //    BoxNum.Rows.Add(BoxRow.ItemArray);
                        //}
                        ////调用存储过程，判断数据库表是否存在记录
                        //SqlCommand com = new SqlCommand();
                        ////SqlConnection con = new SqlConnection("Data Source=192.168.124.72;Initial Catalog=OrBitXI;User ID=sa;PassWord=admin@2017");
                        //con.Open();
                        //com.CommandText = "Pro_SelectCaseNumber";
                        //com.Connection = con;
                        //com.CommandType = CommandType.StoredProcedure;
                        //SqlParameter paremeter = new SqlParameter("@Pro_SelectCaseNumber", SqlDbType.Structured)
                        //{
                        //    Value = BoxNum
                        //};
                        //com.ExecuteNonQuery();
                        //com.Parameters.Add(paremeter);
                        //com.Parameters.Add(new SqlParameter("@return", SqlDbType.Int));
                        //com.Parameters["@return"].Direction = ParameterDirection.ReturnValue;
                        //com.ExecuteNonQuery();
                        ////数据库存储过程返回0表示存在记录
                        //if (Convert.ToInt32(com.Parameters["@return"].Value) == 0)
                        //{
                        for (int i = sRowNum; i < eRowNum; i++)
                        {
                            Object Qty = ClassicDoorSheet.Cells[i, 9].Value;
                            if (Qty == null || Qty.ToString() == "" || Convert.ToSingle(Qty) <= 0)
                            {
                                continue;
                            }
                            ClassicDoorSheetTableRow["GetMaterialBillsId"] = System.Guid.NewGuid().ToString().Substring(0, 12).ToUpper();
                            ClassicDoorSheetTableRow["ProductOrderId"] = ParentId;
                            //拉手类型
                            object HandType = ClassicDoorSheet.Cells[3, 2].Value;
                            ClassicDoorSheetTableRow["HandType"] = HandType;
                            //款式
                            object Stytle = ClassicDoorSheet.Cells[3, 7].Value;
                            ClassicDoorSheetTableRow["Stytle"] = Stytle;

                            for (int j = sColNum; j <= eColNum; j++)
                            {
                                ExcelRange Rang = ClassicDoorSheet.Cells[i, j];
                                object objectCellValue = ClassicDoorSheet.GetValue(i, j);//单元格数据
                                string CellValue = objectCellValue != null ? objectCellValue.ToString().Trim() : "";
                                if (Rang.Merge)
                                {
                                    CellValue = GetMergeValue(ClassicDoorSheet, i, j);
                                }
                                switch (j)
                                {
                                    case 1:
                                        ClassicDoorSheetTableRow["OrderDetailId"] = CellValue;
                                        break;
                                    case 2:
                                        if (CellValue == "" || CellValue == null)
                                        {
                                            CellValue = "0";
                                            Convert.ToSingle(CellValue);
                                            ClassicDoorSheetTableRow["FWide"] = CellValue;
                                        }
                                        else
                                        {
                                            if (System.Text.RegularExpressions.Regex.IsMatch(CellValue, @"^[-+]?[0-9]*\.?[0-9]+$"))
                                            {

                                                ClassicDoorSheetTableRow["FWide"] = CellValue;
                                            }
                                        }
                                        //newARow["FWide"] = CellValue;
                                        break;
                                    case 3:
                                        if (CellValue == "" || CellValue == null)
                                        {
                                            CellValue = "0";
                                            Convert.ToSingle(CellValue);
                                            ClassicDoorSheetTableRow["FLong"] = CellValue;
                                        }
                                        else
                                        {
                                            if (System.Text.RegularExpressions.Regex.IsMatch(CellValue, @"^[-+]?[0-9]*\.?[0-9]+$"))
                                            {

                                                ClassicDoorSheetTableRow["FLong"] = CellValue;
                                            }
                                        }
                                        //newARow["FLong"] = CellValue;
                                        break;
                                    case 4:
                                        if (CellValue == "" || CellValue == null)
                                        {
                                            CellValue = "0";
                                            Convert.ToSingle(CellValue);
                                            ClassicDoorSheetTableRow["Qty"] = CellValue;
                                        }
                                        else
                                        {
                                            if (System.Text.RegularExpressions.Regex.IsMatch(CellValue, @"^[-+]?[0-9]*\.?[0-9]+$"))
                                            {

                                                ClassicDoorSheetTableRow["Qty"] = CellValue;
                                            }
                                            //newARow["Qty"] = CellValue;
                                        }
                                        break;
                                    case 5:
                                        ClassicDoorSheetTableRow["PlateName"] = CellValue;
                                        break;
                                    case 6:
                                        if (CellValue == "" || CellValue == null)
                                        {
                                            CellValue = "0";
                                            Convert.ToSingle(CellValue);
                                            ClassicDoorSheetTableRow["CutThick"] = CellValue;
                                        }
                                        else
                                        {
                                            if (System.Text.RegularExpressions.Regex.IsMatch(CellValue, @"^[-+]?[0-9]*\.?[0-9]+$"))
                                            {

                                                ClassicDoorSheetTableRow["CutThick"] = CellValue;
                                            }
                                            else
                                            {
                                                CellValue = CellValue.Substring(0, CellValue.Length - 1);
                                                ClassicDoorSheetTableRow["CutThick"] = CellValue;
                                            }
                                            //newARow["CutThick"] = CellValue;
                                        }
                                        //newARow["CutThick"] = CellValue;
                                        break;
                                    case 7:
                                        if (CellValue == "" || CellValue == null)
                                        {
                                            CellValue = "0";
                                            Convert.ToSingle(CellValue);
                                            ClassicDoorSheetTableRow["CutWide"] = CellValue;
                                        }
                                        else
                                        {
                                            if (System.Text.RegularExpressions.Regex.IsMatch(CellValue, @"^[-+]?[0-9]*\.?[0-9]+$"))
                                            {

                                                ClassicDoorSheetTableRow["CutWide"] = CellValue;
                                            }
                                            //newARow["CutQty"] = CellValue;
                                        }
                                        //newARow["CutWide"] = CellValue;
                                        break;
                                    case 8:
                                        if (CellValue == "" || CellValue == null)
                                        {
                                            CellValue = "0";
                                            Convert.ToSingle(CellValue);
                                            ClassicDoorSheetTableRow["CutLong"] = CellValue;
                                        }
                                        else
                                        {
                                            if (System.Text.RegularExpressions.Regex.IsMatch(CellValue, @"^[-+]?[0-9]*\.?[0-9]+$"))
                                            {

                                                ClassicDoorSheetTableRow["CutLong"] = CellValue;
                                            }
                                            //newARow["CutLong"] = CellValue;
                                        }
                                        //newARow["CutLong"] = CellValue;
                                        break;
                                    case 9:
                                        if (CellValue == "" || CellValue == null)
                                        {
                                            CellValue = "0";
                                            Convert.ToSingle(CellValue);
                                            ClassicDoorSheetTableRow["CutQty"] = CellValue;
                                        }
                                        else
                                        {
                                            if (System.Text.RegularExpressions.Regex.IsMatch(CellValue, @"^[-+]?[0-9]*\.?[0-9]+$"))
                                            {

                                                ClassicDoorSheetTableRow["CutQty"] = CellValue;
                                            }
                                        }
                                        break;
                                    case 10: ClassicDoorSheetTableRow["MaterialDescription"] = CellValue; break;//加工备注
                                    case 11: ClassicDoorSheetTableRow["MaterialNote"] = CellValue; break;//材质备注
                                    case 12: ClassicDoorSheetTableRow["DisplayMaterialSummary"] = CellValue; break;//材质汇总
                                    case 13: ClassicDoorSheetTableRow["AreaOfContour"] = CellValue; break;//投影面积
                                }
                            }
                            ClassicDoorSheetTable.Rows.Add(ClassicDoorSheetTableRow.ItemArray);
                        }
                        ClassicDoorSheetTable.TableName = "IssueMaterialBills7";
                        DS.Tables.Add(ClassicDoorSheetTable);
                        ClassicDoorSheetTable.Dispose();
                        //}
                    }
                }
                catch (Exception ex)
                {
                    throw ex;
                }
                #endregion
                //古典门板领料单
                #region
                try
                {
                    //数据所在Sheet
                    ExcelWorksheet ClassicDoorHandleSheet = null;
                    //打开的Sheet名
                    ClassicDoorHandleSheet = pck.Workbook.Worksheets["古典门板领料单"];
                    if (ClassicDoorHandleSheet.Name == "古典门板领料单")
                    {
                        //最大列
                        int maxColumnNum = ClassicDoorHandleSheet.Dimension.End.Column;
                        //最小列
                        int minColumnNum = ClassicDoorHandleSheet.Dimension.Start.Column;
                        //最小行
                        int minRowNum = ClassicDoorHandleSheet.Dimension.Start.Row;
                        //最大行
                        int maxRowNum = ClassicDoorHandleSheet.Dimension.End.Row;
                        //开始行
                        int sRowNum = 6;
                        //结束行
                        int eRowNum = 0;
                        //区域A的开始栏位
                        int sColNum = 1;
                        //区域A的结束栏位
                        int eColNum = 7;

                        for (int i = sRowNum; i < maxRowNum; i++)
                        {
                            object PlateDescription = ClassicDoorHandleSheet.Cells[i, 1].Value;
                            if (PlateDescription == null)
                            {
                                continue;
                            }
                            if (PlateDescription.ToString() == "拆解人")
                            {
                                eRowNum = i - 1;
                                break;
                            }
                        }

                        DataRow ClassicDoorHandleSheetTableRow = ClassicDoorHandleSheetTable.NewRow();
                        ////创建datatable存放箱体序号
                        //DataTable BoxNum = new DataTable();
                        //BoxNum.Columns.Add(string.Format("BoxNumId"), Type.GetType("System.String"));
                        //BoxNum.Columns.Add(string.Format("BoxNum"), Type.GetType("System.String"));
                        //BoxNum.Columns.Add(string.Format("OrderDetailId"), Type.GetType("System.String"));
                        //BoxNum.Columns.Add(string.Format("Identification"), Type.GetType("System.String"));
                        //DataRow BoxRow = BoxNum.NewRow();
                        //for (int i = sRowNum; i < eRowNum; i++)
                        //{
                        //    string BoxNumId = CStr(ClassicDoorHandleSheet.Cells[i, 1].Value);
                        //    string BoxName = CStr(ClassicDoorHandleSheet.Cells[i, 5].Value);
                        //    if (BoxName == "" || BoxName == null)
                        //    {
                        //        continue;
                        //    }
                        //    else
                        //    {
                        //        BoxRow["BoxNumId"] = System.Guid.NewGuid().ToString().Substring(0, 12).ToUpper();
                        //        BoxRow["BoxNum"] = BoxNumId;
                        //        BoxRow["OrderDetailId"] = ParentId;
                        //    }
                        //    BoxNum.Rows.Add(BoxRow.ItemArray);
                        //}
                        ////调用存储过程，判断数据库表是否存在记录
                        //SqlCommand com = new SqlCommand();
                        ////SqlConnection con = new SqlConnection("Data Source=192.168.124.72;Initial Catalog=OrBitXI;User ID=sa;PassWord=admin@2017");
                        //con.Open();
                        //com.CommandText = "Pro_SelectCaseNumber";
                        //com.Connection = con;
                        //com.CommandType = CommandType.StoredProcedure;
                        //SqlParameter paremeter = new SqlParameter("@Pro_SelectCaseNumber", SqlDbType.Structured)
                        //{
                        //    Value = BoxNum
                        //};
                        //com.ExecuteNonQuery();
                        //com.Parameters.Add(paremeter);
                        //com.Parameters.Add(new SqlParameter("@return", SqlDbType.Int));
                        //com.Parameters["@return"].Direction = ParameterDirection.ReturnValue;
                        ////数据库存储过程返回0表示存在记录
                        //if (Convert.ToInt32(com.Parameters["@return"].Value) == 0)
                        //{

                        //创建datatable 存放物料描述信息
                        DataTable GetproductNameTable = new DataTable();
                        GetproductNameTable.Columns.Add(string.Format("ProductDescription"), Type.GetType("System.String"));
                        GetproductNameTable.Columns.Add(string.Format("ProductName"), Type.GetType("System.String"));
                        DataRow GetproductNameRow = GetproductNameTable.NewRow();
                        for (int i = sRowNum; i < eRowNum; i++)
                        {
                            string Qty = CStr(ClassicDoorHandleSheet.Cells[i, 4].Value);
                            if (Qty == "" || Qty == null || Convert.ToSingle(Qty) <= 0)
                            {
                                continue;
                            }
                            else
                            {
                                string ProductDescription = CStr(ClassicDoorHandleSheet.Cells[i, 3].Value);
                                GetproductNameRow["ProductDescription"] = ProductDescription;
                            }
                            GetproductNameTable.Rows.Add(GetproductNameRow.ItemArray);
                        }
                        //调用存储过程根据物料描述获取物料号存放进另一个datatable
                        con.Close();
                        con.Open();
                        SqlCommand com = new SqlCommand();
                        com.CommandText = "Pro_GetproductName";
                        com.Connection = con;
                        com.CommandType = CommandType.StoredProcedure;
                        SqlParameter para = new SqlParameter("@Pro_GetproductName", SqlDbType.Structured)
                        {
                            Value = GetproductNameTable
                        };
                        com.Parameters.Add(para);
                        com.ExecuteNonQuery();
                        com.Parameters.Add(new SqlParameter("@return", SqlDbType.Int));
                        com.Parameters["@return"].Direction = ParameterDirection.ReturnValue;
                        DataTable dt = new DataTable();
                        SqlDataReader reader = com.ExecuteReader();
                        dt.Load(reader);
                        reader.Dispose();
                        com.Dispose();
                        for (int i = sRowNum; i < eRowNum; i++)
                        {
                            object Qty = ClassicDoorHandleSheet.Cells[i, 4].Value;
                            if (Qty == null || Qty == "" || Convert.ToSingle(Qty) <= 0)
                            {
                                continue;
                            }
                            ClassicDoorHandleSheetTableRow["GetMaterialBillsId"] = System.Guid.NewGuid().ToString().Substring(0, 12).ToUpper();
                            ClassicDoorHandleSheetTableRow["ProductOrderId"] = ParentId;
                            for (int j = sColNum; j < eColNum; j++)
                            {
                                //判断单元格是否是合并单元格并获取值
                                ExcelRange Rang = ClassicDoorHandleSheet.Cells[i, j];
                                object objectCellValue = ClassicDoorHandleSheet.GetValue(i, j);//单元格数据
                                string CellValue = objectCellValue != null ? objectCellValue.ToString().Trim() : "";
                                if (Rang.Merge)
                                {
                                    CellValue = GetMergeValue(ClassicDoorHandleSheet, i, j);
                                }
                                switch (j)
                                {
                                    case 1:
                                        //object CateGory = ClassicDoorHandleSheet.Cells[i, j].Value;
                                        ClassicDoorHandleSheetTableRow["MaterialType"] = CellValue;//物料类型
                                        break;
                                    case 2:
                                        //object NumericalOrder = ClassicDoorHandleSheet.Cells[i, j].Value;
                                        ClassicDoorHandleSheetTableRow["NumericalOrder"] = CellValue;//序号
                                        break;
                                    case 3:
                                        //object ProductDes = ClassicDoorHandleSheet.Cells[i, j].Value;
                                        //ClassicDoorHandleSheetTableRow["ProductDes"] = CellValue;//物料描述
                                        for (int q = 0; q < dt.Rows.Count; q++)
                                        {
                                            string SQLProductDescription = dt.Rows[q]["ProductDescription"].ToString();
                                            if (SQLProductDescription == CellValue)
                                            {
                                                string ProductName = dt.Rows[q]["ProductName"].ToString();
                                                if (ProductName == null || ProductName == "")
                                                {
                                                    NullCount++;
                                                }
                                                ClassicDoorHandleSheetTableRow["ProductName"] = dt.Rows[q]["ProductName"];//物料号
                                                ClassicDoorHandleSheetTableRow["ProductDes"] = SQLProductDescription;//物料描述
                                            }
                                        }
                                        break;
                                    case 4:
                                        //object Qty = ClassicDoorHandleSheet.Cells[i, j].Value;
                                        ClassicDoorHandleSheetTableRow["Qty"] = Qty;//数量
                                        break;
                                    case 5:
                                        //object Unit = ClassicDoorHandleSheet.Cells[i, j].Value;
                                        ClassicDoorHandleSheetTableRow["Unit"] = CellValue;//单位
                                        break;
                                    case 6:
                                        //object Remark = ClassicDoorHandleSheet.Cells[i, j].Value;
                                        ClassicDoorHandleSheetTableRow["Remark"] = CellValue;//装箱清单
                                        break;
                                }
                            }
                            ClassicDoorHandleSheetTable.Rows.Add(ClassicDoorHandleSheetTableRow.ItemArray);
                        }
                        ClassicDoorHandleSheetTable.TableName = "IssueMaterialBills5";
                        DS.Tables.Add(ClassicDoorHandleSheetTable);
                        ClassicDoorHandleSheetTable.Dispose();
                        dt.Dispose();
                        con.Close();

                        //}
                    }
                }
                catch (Exception ex)
                {
                    throw ex;
                }
                #endregion

                //现代新中式作业单
                #region
                try
                {
                    //数据所在Sheet
                    ExcelWorksheet ClassicDoorSheet = null;
                    //打开的Sheet名
                    ClassicDoorSheet = pck.Workbook.Worksheets["现代新中式作业单"];
                    if (ClassicDoorSheet.Name == "现代新中式作业单")
                    {
                        //最大列
                        int maxColumnNum = ClassicDoorSheet.Dimension.End.Column;
                        //最小列
                        int minColumnNum = ClassicDoorSheet.Dimension.Start.Column;
                        //最小行
                        int minRowNum = ClassicDoorSheet.Dimension.Start.Row;
                        //最大行
                        int maxRowNum = ClassicDoorSheet.Dimension.End.Row;
                        //开始行
                        int sRowNum = 7;
                        //结束行
                        int eRowNum = 0;
                        //区域A的开始栏位
                        int sColNum = 1;
                        //区域A的结束栏位
                        int eColNum = 13;

                        for (int i = sRowNum; i < maxRowNum; i++)
                        {
                            Object plateName = ClassicDoorSheet.Cells[i, 1].Value;
                            if (plateName == null)
                            {
                                continue;
                            }
                            if (plateName.ToString() == "说明：按照2012新工艺铣型")
                            {
                                eRowNum = i - 1;
                                break;
                            }
                        }

                        DataRow ClassicDoorSheetTableRow = XianDaiXinZhongShiIssueMaterialBillsTable.NewRow();

                        ////创建datatable存放箱体序号
                        //DataTable BoxNum = new DataTable();
                        //BoxNum.Columns.Add(string.Format("BoxNumId"), Type.GetType("System.String"));
                        //BoxNum.Columns.Add(string.Format("BoxNum"), Type.GetType("System.String"));
                        //BoxNum.Columns.Add(string.Format("OrderDetailId"), Type.GetType("System.String"));
                        //BoxNum.Columns.Add(string.Format("Identification"), Type.GetType("System.String"));
                        //DataRow BoxRow = BoxNum.NewRow();
                        //for (int i = sRowNum; i < eRowNum; i++)
                        //{
                        //    string BoxNumId = CStr(ClassicDoorSheet.Cells[i, 1].Value);
                        //    string BoxName = CStr(ClassicDoorSheet.Cells[i, 5].Value);
                        //    if (BoxName == "" || BoxName == null)
                        //    {
                        //        continue;
                        //    }
                        //    else
                        //    {
                        //        BoxRow["BoxNumId"] = System.Guid.NewGuid().ToString().Substring(0, 12).ToUpper();
                        //        BoxRow["BoxNum"] = BoxNumId;
                        //        BoxRow["OrderDetailId"] = ParentId;
                        //    }
                        //    BoxNum.Rows.Add(BoxRow.ItemArray);
                        //}
                        ////调用存储过程，判断数据库表是否存在记录
                        //SqlCommand com = new SqlCommand();
                        ////SqlConnection con = new SqlConnection("Data Source=192.168.124.72;Initial Catalog=OrBitXI;User ID=sa;PassWord=admin@2017");
                        //con.Open();
                        //com.CommandText = "Pro_SelectCaseNumber";
                        //com.Connection = con;
                        //com.CommandType = CommandType.StoredProcedure;
                        //SqlParameter paremeter = new SqlParameter("@Pro_SelectCaseNumber", SqlDbType.Structured)
                        //{
                        //    Value = BoxNum
                        //};
                        //com.ExecuteNonQuery();
                        //com.Parameters.Add(paremeter);
                        //com.Parameters.Add(new SqlParameter("@return", SqlDbType.Int));
                        //com.Parameters["@return"].Direction = ParameterDirection.ReturnValue;
                        //com.ExecuteNonQuery();
                        ////数据库存储过程返回0表示存在记录
                        //if (Convert.ToInt32(com.Parameters["@return"].Value) == 0)
                        //{
                        for (int i = sRowNum; i < eRowNum; i++)
                        {
                            Object Qty = ClassicDoorSheet.Cells[i, 9].Value;
                            if (Qty == null || Qty.ToString() == "" || Convert.ToSingle(Qty) <= 0)
                            {
                                continue;
                            }
                            ClassicDoorSheetTableRow["IssueMaterialBillsId"] = System.Guid.NewGuid().ToString().Substring(0, 12).ToUpper();
                            ClassicDoorSheetTableRow["ProductOrderId"] = ParentId;
                            object HandType = ClassicDoorSheet.Cells[3, 2].Value;//拉手类型
                            ClassicDoorSheetTableRow["HandType"] = HandType;
                            object Stytle = ClassicDoorSheet.Cells[3, 7].Value;//款式
                            ClassicDoorSheetTableRow["Stytle"] = Stytle;


                            for (int j = sColNum; j <= eColNum; j++)
                            {
                                ExcelRange Rang = ClassicDoorSheet.Cells[i, j];
                                object objectCellValue = ClassicDoorSheet.GetValue(i, j);//单元格数据
                                string CellValue = objectCellValue != null ? objectCellValue.ToString().Trim() : "";
                                if (Rang.Merge)
                                {
                                    CellValue = GetMergeValue(ClassicDoorSheet, i, j);
                                }
                                switch (j)
                                {
                                    case 1:
                                        ClassicDoorSheetTableRow["OrderDetailId"] = CellValue;
                                        break;
                                    case 2:
                                        if (CellValue == "" || CellValue == null)
                                        {
                                            CellValue = "0";
                                            Convert.ToSingle(CellValue);
                                            ClassicDoorSheetTableRow["FWide"] = CellValue;
                                        }
                                        else
                                        {
                                            if (System.Text.RegularExpressions.Regex.IsMatch(CellValue, @"^[-+]?[0-9]*\.?[0-9]+$"))
                                            {

                                                ClassicDoorSheetTableRow["FWide"] = CellValue;
                                            }
                                        }
                                        //newARow["FWide"] = CellValue;
                                        break;
                                    case 3:
                                        if (CellValue == "" || CellValue == null)
                                        {
                                            CellValue = "0";
                                            Convert.ToSingle(CellValue);
                                            ClassicDoorSheetTableRow["FLong"] = CellValue;
                                        }
                                        else
                                        {
                                            if (System.Text.RegularExpressions.Regex.IsMatch(CellValue, @"^[-+]?[0-9]*\.?[0-9]+$"))
                                            {

                                                ClassicDoorSheetTableRow["FLong"] = CellValue;
                                            }
                                        }
                                        //newARow["FLong"] = CellValue;
                                        break;
                                    case 4:
                                        if (CellValue == "" || CellValue == null)
                                        {
                                            CellValue = "0";
                                            Convert.ToSingle(CellValue);
                                            ClassicDoorSheetTableRow["Qty"] = CellValue;
                                        }
                                        else
                                        {
                                            if (System.Text.RegularExpressions.Regex.IsMatch(CellValue, @"^[-+]?[0-9]*\.?[0-9]+$"))
                                            {

                                                ClassicDoorSheetTableRow["Qty"] = CellValue;
                                            }
                                            //newARow["Qty"] = CellValue;
                                        }
                                        break;
                                    case 5:
                                        ClassicDoorSheetTableRow["PlateName"] = CellValue;
                                        break;
                                    case 6:
                                        if (CellValue == "" || CellValue == null)
                                        {
                                            CellValue = "0";
                                            Convert.ToSingle(CellValue);
                                            ClassicDoorSheetTableRow["CutThick"] = CellValue;
                                        }
                                        else
                                        {
                                            if (System.Text.RegularExpressions.Regex.IsMatch(CellValue, @"^[-+]?[0-9]*\.?[0-9]+$"))
                                            {

                                                ClassicDoorSheetTableRow["CutThick"] = CellValue;
                                            }
                                            //newARow["CutThick"] = CellValue;
                                        }
                                        //newARow["CutThick"] = CellValue;
                                        break;
                                    case 7:
                                        if (CellValue == "" || CellValue == null)
                                        {
                                            CellValue = "0";
                                            Convert.ToSingle(CellValue);
                                            ClassicDoorSheetTableRow["CutWide"] = CellValue;
                                        }
                                        else
                                        {
                                            if (System.Text.RegularExpressions.Regex.IsMatch(CellValue, @"^[-+]?[0-9]*\.?[0-9]+$"))
                                            {

                                                ClassicDoorSheetTableRow["CutWide"] = CellValue;
                                            }
                                            //newARow["CutQty"] = CellValue;
                                        }
                                        //newARow["CutWide"] = CellValue;
                                        break;
                                    case 8:
                                        if (CellValue == "" || CellValue == null)
                                        {
                                            CellValue = "0";
                                            Convert.ToSingle(CellValue);
                                            ClassicDoorSheetTableRow["CutLong"] = CellValue;
                                        }
                                        else
                                        {
                                            if (System.Text.RegularExpressions.Regex.IsMatch(CellValue, @"^[-+]?[0-9]*\.?[0-9]+$"))
                                            {

                                                ClassicDoorSheetTableRow["CutLong"] = CellValue;
                                            }
                                            //newARow["CutLong"] = CellValue;
                                        }
                                        //newARow["CutLong"] = CellValue;
                                        break;
                                    case 9:
                                        ClassicDoorSheetTableRow["CutQty"] = Qty;
                                        break;
                                    case 10: ClassicDoorSheetTableRow["MaterialDescription"] = CellValue; break;
                                    case 11: ClassicDoorSheetTableRow["MaterialNote"] = CellValue; break;
                                    case 12: ClassicDoorSheetTableRow["DisplayMaterialSummary"] = CellValue; break;
                                    case 13: ClassicDoorSheetTableRow["AreaOfContour"] = CellValue; break;
                                }
                            }
                            XianDaiXinZhongShiIssueMaterialBillsTable.Rows.Add(ClassicDoorSheetTableRow.ItemArray);
                        }
                        XianDaiXinZhongShiIssueMaterialBillsTable.TableName = "GetMaterialBills5";
                        DS.Tables.Add(XianDaiXinZhongShiGetMaterialBillsTable);
                        XianDaiXinZhongShiIssueMaterialBillsTable.Dispose();
                        //}
                    }
                }
                catch (Exception ex)
                {
                    throw ex;
                }
                #endregion
                //现代新中式领料单
                #region
                try
                {
                    //数据所在Sheet
                    ExcelWorksheet ClassicDoorHandleSheet = null;
                    //打开的Sheet名
                    ClassicDoorHandleSheet = pck.Workbook.Worksheets["现代新中式领料单"];
                    if (ClassicDoorHandleSheet.Name == "现代新中式领料单")
                    {
                        //最大列
                        int maxColumnNum = ClassicDoorHandleSheet.Dimension.End.Column;
                        //最小列
                        int minColumnNum = ClassicDoorHandleSheet.Dimension.Start.Column;
                        //最小行
                        int minRowNum = ClassicDoorHandleSheet.Dimension.Start.Row;
                        //最大行
                        int maxRowNum = ClassicDoorHandleSheet.Dimension.End.Row;
                        //开始行
                        int sRowNum = 5;
                        //结束行
                        int eRowNum = 0;
                        //区域A的开始栏位
                        int sColNum = 1;
                        //区域A的结束栏位
                        int eColNum = 7;

                        for (int i = sRowNum; i < maxRowNum; i++)
                        {
                            object PlateDescription = ClassicDoorHandleSheet.Cells[i, 1].Value;
                            if (PlateDescription == null)
                            {
                                continue;
                            }
                            if (PlateDescription.ToString() == "制单人：")
                            {
                                eRowNum = i - 1;
                                break;
                            }
                        }

                        DataRow ClassicDoorHandleSheetTableRow = XianDaiXinZhongShiGetMaterialBillsTable.NewRow();
                        //创建datatable 存放物料描述信息
                        DataTable GetproductNameTable = new DataTable();
                        GetproductNameTable.Columns.Add(string.Format("ProductDescription"), Type.GetType("System.String"));
                        GetproductNameTable.Columns.Add(string.Format("ProductName"), Type.GetType("System.String"));
                        DataRow GetproductNameRow = GetproductNameTable.NewRow();
                        for (int i = sRowNum; i < eRowNum; i++)
                        {
                            string Qty = CStr(ClassicDoorHandleSheet.Cells[i, 4].Value);
                            if (Qty == "" || Qty == null || Convert.ToSingle(Qty) <= 0)
                            {
                                continue;
                            }
                            else
                            {
                                string ProductDescription = CStr(ClassicDoorHandleSheet.Cells[i, 3].Value);
                                GetproductNameRow["ProductDescription"] = ProductDescription;
                            }
                            GetproductNameTable.Rows.Add(GetproductNameRow.ItemArray);
                        }
                        //调用存储过程根据物料描述获取物料号存放进另一个datatable
                        con.Open();
                        SqlCommand com = new SqlCommand();
                        com.CommandText = "Pro_GetproductName";
                        com.Connection = con;
                        com.CommandType = CommandType.StoredProcedure;
                        SqlParameter para = new SqlParameter("@Pro_GetproductName", SqlDbType.Structured)
                        {
                            Value = GetproductNameTable
                        };
                        com.Parameters.Add(para);
                        com.ExecuteNonQuery();
                        com.Parameters.Add(new SqlParameter("@return", SqlDbType.Int));
                        com.Parameters["@return"].Direction = ParameterDirection.ReturnValue;
                        DataTable dt = new DataTable();
                        SqlDataReader reader = com.ExecuteReader();
                        dt.Load(reader);
                        reader.Dispose();
                        com.Dispose();
                        con.Dispose();
                        GetproductNameTable.Dispose();
                        for (int i = sRowNum; i < eRowNum; i++)
                        {
                            object Qty = ClassicDoorHandleSheet.Cells[i, 4].Value;
                            if (Qty == null || Qty.ToString() == "" || Convert.ToSingle(Qty) <= 0)
                            {
                                continue;
                            }
                            for (int j = sColNum; j < eColNum; j++)
                            {
                                //判断单元格是否是合并单元格并获取值
                                ExcelRange Rang = ClassicDoorHandleSheet.Cells[i, j];
                                object objectCellValue = ClassicDoorHandleSheet.GetValue(i, j);//单元格数据
                                string CellValue = objectCellValue != null ? objectCellValue.ToString().Trim() : "";
                                if (Rang.Merge)
                                {
                                    CellValue = GetMergeValue(ClassicDoorHandleSheet, i, j);
                                }
                                ClassicDoorHandleSheetTableRow["GetMaterialBillsId"] = System.Guid.NewGuid().ToString().Substring(0, 12).ToUpper();
                                ClassicDoorHandleSheetTableRow["ProductOrderId"] = ParentId;
                                switch (j)
                                {
                                    case 1:
                                        //object CateGory = ClassicDoorHandleSheet.Cells[i, j].Value;
                                        ClassicDoorHandleSheetTableRow["MaterialType"] = CellValue;
                                        break;
                                    case 2:
                                        //object NumericalOrder = ClassicDoorHandleSheet.Cells[i, j].Value;
                                        ClassicDoorHandleSheetTableRow["NumericalOrder"] = CellValue;
                                        break;
                                    case 3:
                                        //object ProductDes = ClassicDoorHandleSheet.Cells[i, j].Value;
                                        //ClassicDoorHandleSheetTableRow["ProductDes"] = CellValue;
                                        for (int q = 0; q < dt.Rows.Count; q++)
                                        {
                                            string SQLProductDescription = dt.Rows[q]["ProductDescription"].ToString();
                                            if (SQLProductDescription == CellValue)
                                            {
                                                string ProductName = dt.Rows[q]["ProductName"].ToString();
                                                if (ProductName == null || ProductName == "")
                                                {
                                                    NullCount++;
                                                }
                                                ClassicDoorHandleSheetTableRow["ProductName"] = dt.Rows[q]["ProductName"];//物料号
                                                ClassicDoorHandleSheetTableRow["ProductDes"] = SQLProductDescription;//物料描述
                                            }
                                        }
                                        break;
                                    case 4:
                                        //object Qty = ClassicDoorHandleSheet.Cells[i, j].Value;
                                        ClassicDoorHandleSheetTableRow["Qty"] = Qty;
                                        break;
                                    case 5:
                                        //object Unit = ClassicDoorHandleSheet.Cells[i, j].Value;
                                        ClassicDoorHandleSheetTableRow["Unit"] = CellValue;
                                        break;
                                    case 6:
                                        //object Remark = ClassicDoorHandleSheet.Cells[i, j].Value;
                                        ClassicDoorHandleSheetTableRow["Remark"] = CellValue;
                                        break;
                                }
                            }
                            XianDaiXinZhongShiGetMaterialBillsTable.Rows.Add(ClassicDoorHandleSheetTableRow.ItemArray);
                        }
                        XianDaiXinZhongShiGetMaterialBillsTable.TableName = "IssueMaterialBills3";
                        DS.Tables.Add(XianDaiXinZhongShiGetMaterialBillsTable);
                        XianDaiXinZhongShiGetMaterialBillsTable.Dispose();
                        dt.Dispose();

                    }
                }
                catch (Exception ex)
                {
                    throw ex;
                }
                #endregion



            aa:
                Fs.Dispose();
                pck.Dispose();
                con.Dispose();

                DialogResult ResultYes = MessageBox.Show("是否推送？", "提示", MessageBoxButtons.OKCancel, MessageBoxIcon.Question);
                if (ResultYes == DialogResult.OK)
                {

                    //实例化通用方法类
                    DataToSQL data1 = new DataToSQL();
                    //调用导入数据库通用方法
                    data1.DataToSQLobj(DS);
                    //上传Excel文件到服务器上
                    data1.UpLoadExcel(Path);
                    DS.Dispose();
                    //修改订单推送状态
                    data1.UpdProductOrderCurrentStatus(ParentId);
                    MessageBox.Show("推送成功，领料单物料号为空的记录有" + NullCount + "条");
                }


                //通用方法测试方法
                //data1.DataToSQLobj2(materialBillsDataTable);
            }

        }

        /// <summary>
        /// 判断合并单元格获取值
        /// </summary>
        /// <param name="worksheet">Sheet页</param>
        /// <param name="row">单元格行</param>
        /// <param name="column">单元格列</param>
        /// <returns>返回值</returns>
        public static string GetMergeValue(ExcelWorksheet worksheet, int row, int column)
        {
            string MergeValue = "";
            ExcelWorksheet.MergeCellsCollection<string> MergeCells = worksheet.MergedCells;
            for (int i = 0; i < MergeCells.Count; i++)
            {
                string range = MergeCells[i];
                ExcelAddress add = new ExcelAddress(range);
                int srow = add.Start.Row;//合并单元格开始行
                int scol = add.Start.Column;//合并单元格开始行
                int erow = add.End.Row;//合并单元格结束行
                int ecol = add.End.Column;//合并单元格结束行
                object value = worksheet.Cells[(new ExcelAddress(range)).Start.Row, (new ExcelAddress(range)).Start.Column].Value;
                if (row >= srow && row <= erow && column >= scol && column <= ecol)
                {
                    if (value == null || value.ToString() == "")
                    {
                        MergeValue = "";
                    }
                    else
                    {
                        MergeValue = value.ToString();
                    }
                    break;
                }
            }
            return MergeValue;
        }

        protected string CStr(object o) { return o != null ? o.ToString() : ""; }

    }

    /// <summary>
    /// 免漆衣壁柜柜体数据导入SQL2018.6.27
    /// </summary>
    public class MianQiYiBiGuiListToSQL : MianQiYiBiGui_ToSQL
    {
        /// <summary>
        /// 判断合并单元格获取值
        /// </summary>
        /// <param name="worksheet"></param>
        /// <param name="row">单元格行</param>
        /// <param name="column">单元格列</param>
        /// <returns></returns>
        public static string GetMergeValue(ExcelWorksheet worksheet, int row, int column)
        {
            string MergeValue = "";
            ExcelWorksheet.MergeCellsCollection<string> MergeCells = worksheet.MergedCells;
            for (int i = 0; i < MergeCells.Count; i++)
            {
                string range = MergeCells[i];
                ExcelAddress add = new ExcelAddress(range);
                int srow = add.Start.Row;//合并单元格开始行
                int scol = add.Start.Column;//合并单元格开始列
                int erow = add.End.Row;//合并单元格结束行
                int ecol = add.End.Column;//合并单元格结束列
                object value = worksheet.Cells[(new ExcelAddress(range)).Start.Row, (new ExcelAddress(range)).Start.Column].Value;
                if (row >= srow && row <= erow && column >= scol && column <= ecol)
                {
                    if (value == null)
                    {
                        MergeValue = "";
                        break;
                    }
                    else
                    {
                        MergeValue = value.ToString();
                        break;
                    }
                }
            }
            return MergeValue;
        }
        protected string CStr(object o) { return o != null ? o.ToString() : ""; }

        public override void ReadMianQiYiBiGuiData(string Path, string ParentId)
        {
            //统计领料单物料号为空的物料条数
            int NullCount = 0;
            DataSet DS = new DataSet();
            try
            {
                FileStream FS = new FileStream(Path, FileMode.Open, FileAccess.Read);
                using (ExcelPackage pck = new ExcelPackage(FS))
                {
                    //柜体Sheet页
                    #region
                    try
                    {
                        ExcelWorksheet sheet = null;
                        sheet = pck.Workbook.Worksheets["柜体"];
                        if (sheet.Hidden.ToString() == "Visible")
                        {
                            string hidden = sheet.Hidden.ToString();
                            int maxColumnNum = sheet.Dimension.End.Column;//最大列
                            int minColumnNum = sheet.Dimension.Start.Column;//最小列
                            int minRowNum = sheet.Dimension.Start.Row;//最小行
                            int maxRowNum = sheet.Dimension.End.Row;//最大行
                            int sRowNum = 8;//开始行
                            int eRowNum = 0;//结束行
                            if (Convert.ToString(sheet.Hidden) != "Hidden")
                            {
                                for (int i = sRowNum; i < maxRowNum; i++)
                                {
                                    string EndRow = Convert.ToString(sheet.Cells[i, 1].Value);
                                    if (EndRow.Trim() == "下料")
                                    {
                                        eRowNum = i;
                                        break;
                                    }
                                }
                                //板件类型
                                string PlateType = Convert.ToString(sheet.Cells[1, 1].Value);
                                //款式名称
                                string Stytle = Convert.ToString(sheet.Cells[3, 5].Value);
                                //材质说明
                                string MaterialNote = Convert.ToString(sheet.Cells[5, 2].Value);
                                for (int i = sRowNum; i < eRowNum; i++)
                                {
                                    DataRow GuitiIssueMaterialBillsDataTableRow = MianQiYiBiGui_GuiTiDataTable.NewRow();
                                    GuitiIssueMaterialBillsDataTableRow["IssueMaterialBillsId"] = System.Guid.NewGuid().ToString().Substring(0, 12).ToUpper();
                                    GuitiIssueMaterialBillsDataTableRow["ProductOrderId"] = ParentId;

                                    GuitiIssueMaterialBillsDataTableRow["PlateType"] = PlateType.Substring(1, 4); ;//板件类型

                                    GuitiIssueMaterialBillsDataTableRow["Stytle"] = Stytle;//款式名称

                                    GuitiIssueMaterialBillsDataTableRow["MaterialNote"] = MaterialNote;//材质说明
                                    string Qty = Convert.ToString(sheet.Cells[i, 8].Value);
                                    if (Qty == "" || Qty == null)
                                    {
                                        continue;
                                    }
                                    else
                                    {
                                        if (System.Text.RegularExpressions.Regex.IsMatch(Qty, @"^[-+]?[0-9]*\.?[0-9]+$"))
                                        {
                                            if (Convert.ToSingle(Qty) > 0)
                                            {
                                                for (int j = 1; j < 11; j++)
                                                {
                                                    ExcelRange Rang = sheet.Cells[i, j];
                                                    object objectCellValue = sheet.GetValue(i, j);//单元格数据
                                                    string CellValue = objectCellValue != null ? objectCellValue.ToString().Trim() : "";
                                                    if (Rang.Merge)
                                                    {
                                                        CellValue = GetMergeValue(sheet, i, j);
                                                    }
                                                    switch (j)
                                                    {
                                                        case 1:
                                                            GuitiIssueMaterialBillsDataTableRow["CabinetNO"] = CellValue;
                                                            break;
                                                        case 2:
                                                            GuitiIssueMaterialBillsDataTableRow["PlateName"] = CellValue;
                                                            break;
                                                        case 3:
                                                            string ExcelValue4 = CStr(sheet.Cells[i, j].Value);
                                                            if (ExcelValue4 == "" || ExcelValue4 == null)
                                                            {
                                                                GuitiIssueMaterialBillsDataTableRow["FThick"] = "0";
                                                            }
                                                            else
                                                            {
                                                                GuitiIssueMaterialBillsDataTableRow["FThick"] = CellValue;
                                                            }
                                                            break;
                                                        case 4:
                                                            GuitiIssueMaterialBillsDataTableRow["CenterMaterials"] = CellValue;
                                                            break;
                                                        case 5:
                                                            GuitiIssueMaterialBillsDataTableRow["FaceConduct"] = CellValue;
                                                            break;
                                                        case 6:
                                                            string Wide = CStr(sheet.Cells[i, j].Value);
                                                            if (Wide == "" || Wide == null)
                                                            {
                                                                GuitiIssueMaterialBillsDataTableRow["CutWide"] = "0";
                                                            }
                                                            else
                                                            {
                                                                GuitiIssueMaterialBillsDataTableRow["CutWide"] = CellValue;
                                                            }
                                                            break;
                                                        case 7:
                                                            string High = CStr(sheet.Cells[i, j].Value);
                                                            if (High == "" || High == null)
                                                            {
                                                                GuitiIssueMaterialBillsDataTableRow["CutHigh"] = "0";
                                                            }
                                                            else
                                                            {
                                                                GuitiIssueMaterialBillsDataTableRow["CutHigh"] = CellValue;
                                                            }
                                                            break;
                                                        case 8:
                                                            GuitiIssueMaterialBillsDataTableRow["Qty"] = CellValue;
                                                            break;
                                                        case 9:
                                                            GuitiIssueMaterialBillsDataTableRow["SealingSide"] = CellValue;
                                                            break;
                                                        case 10:
                                                            GuitiIssueMaterialBillsDataTableRow["Remark"] = CellValue;
                                                            break;
                                                    }
                                                }
                                                MianQiYiBiGui_GuiTiDataTable.Rows.Add(GuitiIssueMaterialBillsDataTableRow);
                                            }
                                            else
                                            {
                                                continue;
                                            }
                                        }
                                    }
                                }
                                MianQiYiBiGui_GuiTiDataTable.TableName = "IssueMaterialBills1";
                                DS.Tables.Add(MianQiYiBiGui_GuiTiDataTable);
                                MianQiYiBiGui_GuiTiDataTable.Dispose();
                            }
                        }

                    }
                    catch (Exception ex)
                    {
                        throw ex;
                    }

                    #endregion

                    //吸料Sheet页
                    #region
                    try
                    {
                        ExcelWorksheet Sheet = null;//数据所在Sheet
                        Sheet = pck.Workbook.Worksheets["吸料"];
                        if (Sheet != null)
                        {
                            if (Sheet.Hidden.ToString() == "Visible")
                            {
                                int maxColumnNum = Sheet.Dimension.End.Column;//最大列
                                int minColumnNum = Sheet.Dimension.Start.Column;//最小列
                                int minRowNum = Sheet.Dimension.Start.Row;//最小行
                                int maxRowNum = Sheet.Dimension.End.Row;//最大行
                                int sRowNum = 5;//开始行
                                int eRowNum = 0;//结束行
                                int sAColNum = 1;//区域A的开始栏位

                                if (Convert.ToString(Sheet.Hidden) != "Hidden")
                                {
                                    for (int i = sRowNum; i <= maxRowNum; i++)
                                    {
                                        string EndValue = Convert.ToString(Sheet.Cells[i, 1].Value);
                                        if (EndValue.Trim() == "制单人")
                                        {
                                            eRowNum = i;
                                            break;
                                        }
                                    }
                                    DataTable MaterialTable = new DataTable();
                                    MaterialTable.Columns.Add(string.Format("MaterialDescription"), Type.GetType("System.String"));
                                    MaterialTable.Columns.Add(string.Format("ProductName"), Type.GetType("System.String"));
                                    DataRow MaterialTableRow = MaterialTable.NewRow();
                                    string MaterialDescription = null;
                                    //领料单读取
                                    for (int i = sRowNum; i <= eRowNum; i++)
                                    {
                                        MaterialDescription = CStr(Sheet.Cells[i, 3].Value);
                                        if (MaterialDescription == null || MaterialDescription == "" || MaterialDescription == "物料描述")
                                        {
                                            continue;
                                        }
                                        else
                                        {
                                            MaterialTableRow["MaterialDescription"] = MaterialDescription;
                                            MaterialTable.Rows.Add(MaterialTableRow.ItemArray);
                                        }
                                    }
                                    SqlCommand cmd = new SqlCommand();
                                    SqlConnection con = new SqlConnection("Data Source=192.168.124.72;Initial Catalog=OrBitXI;User ID=sa;PassWord=admin@2017");
                                    con.Open();
                                    cmd.CommandText = "Pro_GetproductName";
                                    cmd.Connection = con;
                                    cmd.CommandType = CommandType.StoredProcedure;
                                    SqlParameter parm = new SqlParameter("@Pro_GetproductName", SqlDbType.Structured)
                                    {
                                        Value = MaterialTable
                                    };
                                    cmd.Parameters.Add(parm);
                                    cmd.ExecuteNonQuery();
                                    DataTable GetMaterialBillsTable = new DataTable();
                                    cmd.Parameters.Add(new SqlParameter("@return", SqlDbType.Int));
                                    cmd.Parameters["@return"].Direction = ParameterDirection.ReturnValue;
                                    SqlDataReader Datereader = cmd.ExecuteReader();
                                    GetMaterialBillsTable.Load(Datereader);

                                    for (int i = sRowNum; i < eRowNum; i++)
                                    {
                                        DataRow GetMaterialBillsDataTableRow = XiLiao_DataTable.NewRow();
                                        GetMaterialBillsDataTableRow["GetMaterialBillsId"] = System.Guid.NewGuid().ToString().Substring(0, 12).ToUpper();
                                        GetMaterialBillsDataTableRow["ProductOrderId"] = ParentId;
                                        //string Name = Convert.ToString(Sheet.Cells[i, 2].Value);
                                        //float Num =Convert.ToSingle( Sheet.Cells[i, 6].Value);
                                        string Num1 = Convert.ToString(Sheet.Cells[i, 4].Value);
                                        if (Num1 == "" || Num1 == null)
                                        {
                                            continue;
                                        }
                                        if (System.Text.RegularExpressions.Regex.IsMatch(Num1, @"^[-+]?[0-9]*\.?[0-9]+$"))
                                        {
                                            for (int j = sAColNum; j < 7; j++)
                                            {
                                                ExcelRange range = Sheet.Cells[i, j];
                                                object objectCellValue = Sheet.GetValue(i, j);//单元格数据
                                                string CellValue = objectCellValue != null ? objectCellValue.ToString().Trim() : "";
                                                if (range.Merge)
                                                {
                                                    CellValue = GetMergeValue(Sheet, i, j);
                                                }
                                                switch (j)
                                                {
                                                    case 1:
                                                        GetMaterialBillsDataTableRow["MaterialType"] = CellValue;
                                                        break;
                                                    //case 2:
                                                    //    string GuiGe = Convert.ToString(Sheet.Cells[i, 5].Value);
                                                    //    GetMaterialBillsDataTableRow["NumericalOrder"] = CellValue + GuiGe;
                                                    //    break;
                                                    case 3:
                                                        //GetMaterialBillsDataTableRow["ProductDesCription"] = CellValue;
                                                        for (int q = 0; q < GetMaterialBillsTable.Rows.Count; q++)
                                                        {
                                                            string SQLproductDescription = GetMaterialBillsTable.Rows[q]["ProductDescription"].ToString();
                                                            string ProductName = GetMaterialBillsTable.Rows[q]["ProductName"].ToString();
                                                            if (SQLproductDescription == CellValue)
                                                            {
                                                                GetMaterialBillsDataTableRow["ProductName"] = ProductName;
                                                                GetMaterialBillsDataTableRow["ProductDes"] = SQLproductDescription;
                                                            }
                                                        }
                                                        break;

                                                    //case 5:
                                                    //    GetMaterialBillsDataTableRow["MaterialType"] = CellValue;
                                                    //    break;
                                                    case 4:
                                                        GetMaterialBillsDataTableRow["Qty"] = CellValue;
                                                        break;
                                                    case 5:
                                                        GetMaterialBillsDataTableRow["Unit"] = CellValue;
                                                        break;
                                                    case 6:
                                                        GetMaterialBillsDataTableRow["PackingConfirmed"] = CellValue;
                                                        break;
                                                }
                                            }
                                            XiLiao_DataTable.Rows.Add(GetMaterialBillsDataTableRow);
                                        }
                                    }
                                    XiLiao_DataTable.TableName = "GetMaterialBills1";
                                    DS.Tables.Add(XiLiao_DataTable);
                                    XiLiao_DataTable.Dispose();
                                    GetMaterialBillsTable.Dispose();
                                }
                            }
                        }

                    }
                    catch (Exception ex)
                    {
                        throw ex;
                    }

                    #endregion
                    //吸塑Sheet页
                    #region
                    try
                    {
                        try
                        {
                            ExcelWorksheet Sheet = null;//数据所在Sheet
                            Sheet = pck.Workbook.Worksheets["吸塑"];
                            if (Sheet != null)
                            {
                                if (Sheet.Hidden.ToString() == "Visible")
                                {
                                    int maxColumnNum = Sheet.Dimension.End.Column;//最大列
                                    int minColumnNum = Sheet.Dimension.Start.Column;//最小列
                                    int minRowNum = Sheet.Dimension.Start.Row;//最小行
                                    int maxRowNum = Sheet.Dimension.End.Row;//最大行
                                    int sRowNum = 7;//开始行
                                    int eRowNum = 0;//结束行
                                    string IsHidden = Convert.ToString(Sheet.Hidden);
                                    if (IsHidden != "Hidden")
                                    {
                                        for (int i = sRowNum; i < maxRowNum; i++)
                                        {
                                            string EndNum = Convert.ToString(Sheet.Cells[i, 1].Value);
                                            if (EndNum.Trim() == "下料")
                                            {
                                                eRowNum = i;
                                                break;
                                            }
                                        }
                                        for (int i = sRowNum; i < eRowNum; i++)
                                        {
                                            DataRow IssueMaterialBillsDataTableRow = XiSu_DataTable.NewRow();
                                            IssueMaterialBillsDataTableRow["IssueMaterialBillsId"] = System.Guid.NewGuid().ToString().Substring(0, 12).ToUpper();
                                            IssueMaterialBillsDataTableRow["ProductOrderId"] = ParentId;
                                            string Qty = Convert.ToString(Sheet.Cells[i, 8].Value);
                                            if (Qty == "" || Qty == null)
                                            {
                                                continue;
                                            }
                                            if (System.Text.RegularExpressions.Regex.IsMatch(Qty, @"^[-+]?[0-9]*\.?[0-9]+$"))
                                            {
                                                if (Convert.ToSingle(Qty) > 0)
                                                {
                                                    for (int j = 2; j < 11; j++)
                                                    {
                                                        ExcelRange range = Sheet.Cells[i, j];
                                                        object objectCellValue = Sheet.GetValue(i, j);//单元格数据
                                                        string CellValue = objectCellValue != null ? objectCellValue.ToString().Trim() : "";
                                                        if (range.Merge)
                                                        {
                                                            CellValue = GetMergeValue(Sheet, i, j);
                                                        }
                                                        switch (j)
                                                        {
                                                            case 2:
                                                                IssueMaterialBillsDataTableRow["PlateName"] = CellValue;
                                                                break;
                                                            case 3:
                                                                string Deth = CStr(Sheet.Cells[i, j].Value);
                                                                if (Deth == "" || Deth == null)
                                                                {
                                                                    IssueMaterialBillsDataTableRow["CutThick"] = "0";
                                                                }
                                                                else
                                                                {
                                                                    IssueMaterialBillsDataTableRow["CutThick"] = CellValue;
                                                                }
                                                                break;
                                                            case 4:
                                                                IssueMaterialBillsDataTableRow["CenterMaterials"] = CellValue;
                                                                break;
                                                            case 5:
                                                                IssueMaterialBillsDataTableRow["FaceConduct"] = CellValue;
                                                                break;
                                                            case 6:
                                                                string Wide = CStr(Sheet.Cells[i, j].Value);
                                                                if (Wide == "" || Wide == null)
                                                                {
                                                                    IssueMaterialBillsDataTableRow["CutWide"] = "0";
                                                                }
                                                                else
                                                                {
                                                                    IssueMaterialBillsDataTableRow["CutWide"] = CellValue;
                                                                }
                                                                //IssueMaterialBillsDataTableRow["Wide"] = CellValue;
                                                                break;
                                                            case 7:
                                                                string High = CStr(Sheet.Cells[i, j].Value);
                                                                if (High == "" || High == null)
                                                                {
                                                                    IssueMaterialBillsDataTableRow["CutHigh"] = "0";
                                                                }
                                                                else
                                                                {
                                                                    IssueMaterialBillsDataTableRow["CutHigh"] = CellValue;
                                                                }
                                                                //IssueMaterialBillsDataTableRow["High"] = CellValue;
                                                                break;
                                                            case 8:
                                                                IssueMaterialBillsDataTableRow["Qty"] = CellValue;
                                                                break;
                                                            //case 9:
                                                            //    IssueMaterialBillsDataTableRow["Side"] = CellValue;
                                                            //    break;
                                                            case 10:
                                                                IssueMaterialBillsDataTableRow["Remark"] = CellValue;
                                                                break;
                                                        }
                                                    }
                                                    XiSu_DataTable.Rows.Add(IssueMaterialBillsDataTableRow);
                                                }
                                            }
                                        }
                                        XiSu_DataTable.TableName = "IssueMaterialBills2";
                                        DS.Tables.Add(XiSu_DataTable);
                                        XiSu_DataTable.Dispose();
                                    }
                                }
                            }
                        }
                        catch (Exception ex)
                        {
                            throw ex;
                        }

                    }
                    catch (Exception ex)
                    {
                        throw ex;
                    }

                    #endregion

                    //附页Sheet页
                    #region
                    try
                    {
                        ExcelWorksheet Sheet = null;//数据所在Sheet
                        Sheet = pck.Workbook.Worksheets["附页"];
                        if (Sheet.Hidden.ToString() == "Visible")
                        {
                            int maxColumnNum = Sheet.Dimension.End.Column;//最大列
                            int minColumnNum = Sheet.Dimension.Start.Column;//最小列
                            int minRowNum = Sheet.Dimension.Start.Row;//最小行
                            int maxRowNum = Sheet.Dimension.End.Row;//最大行
                            int sRowNum = 8;//开始行
                            int eRowNum = 0;//结束行

                            if (Convert.ToString(Sheet.Hidden) != "Hidden")
                            {
                                for (int i = 8; i < maxRowNum; i++)
                                {
                                    string Col1 = Convert.ToString(Sheet.Cells[i, 1].Value);
                                    if (Col1.Trim() == "下料")
                                    {
                                        eRowNum = i;
                                        break;
                                    }
                                }
                                //板件类型
                                string PlateType = Convert.ToString(Sheet.Cells[1, 1].Value);
                                //款式名称
                                string Stytle = Convert.ToString(Sheet.Cells[3, 6].Value);
                                //材质说明
                                string MaterialNote = Convert.ToString(Sheet.Cells[5, 2].Value);
                                for (int i = sRowNum; i < eRowNum; i++)
                                {
                                    DataRow FuyeIssueMaterialBillsDataTableRow = MianQiYiBiGui_FuyeDataTable.NewRow();
                                    FuyeIssueMaterialBillsDataTableRow["IssueMaterialBillsId"] = System.Guid.NewGuid().ToString().Substring(0, 12).ToUpper();
                                    FuyeIssueMaterialBillsDataTableRow["ProductOrderId"] = ParentId;

                                    FuyeIssueMaterialBillsDataTableRow["PlateType"] = PlateType.Trim().Substring(1, 4); ;//板件类型

                                    FuyeIssueMaterialBillsDataTableRow["Stytle"] = Stytle;//款式名称

                                    FuyeIssueMaterialBillsDataTableRow["MaterialNote"] = MaterialNote;//材质说明
                                    string Name = Convert.ToString(Sheet.Cells[i, 8].Value);
                                    if (Name == "" || Name == null)
                                    {
                                        continue;
                                    }
                                    if (System.Text.RegularExpressions.Regex.IsMatch(Name, @"^[-+]?[0-9]*\.?[0-9]+$"))
                                    {
                                        if (Convert.ToSingle(Name) > 0)
                                        {
                                            for (int j = 1; j < 11; j++)
                                            {
                                                ExcelRange range = Sheet.Cells[i, j];
                                                object objectCellValue = Sheet.GetValue(i, j);//单元格数据
                                                string CellValue = objectCellValue != null ? objectCellValue.ToString().Trim() : "";
                                                if (range.Merge)
                                                {
                                                    CellValue = GetMergeValue(Sheet, i, j);
                                                }
                                                switch (j)
                                                {
                                                    case 1:
                                                        FuyeIssueMaterialBillsDataTableRow["CabinetNO"] = CellValue;
                                                        break;
                                                    case 2:
                                                        FuyeIssueMaterialBillsDataTableRow["PlateName"] = CellValue;
                                                        break;
                                                    case 3:
                                                        string Deth = CStr(Sheet.Cells[i, j].Value);
                                                        if (Deth == "" || Deth == null)
                                                        {
                                                            FuyeIssueMaterialBillsDataTableRow["CutThick"] = "0";
                                                        }
                                                        else
                                                        {
                                                            FuyeIssueMaterialBillsDataTableRow["CutThick"] = CellValue;
                                                        }
                                                        //FuyeIssueMaterialBillsDataTableRow["Deth"] = CellValue;
                                                        break;
                                                    case 4:
                                                        FuyeIssueMaterialBillsDataTableRow["CenterMaterials"] = CellValue;
                                                        break;
                                                    case 5:
                                                        FuyeIssueMaterialBillsDataTableRow["FaceConduct"] = CellValue;
                                                        break;
                                                    case 6:
                                                        string Wide = CStr(Sheet.Cells[i, j].Value);
                                                        if (Wide == "" || Wide == null)
                                                        {
                                                            FuyeIssueMaterialBillsDataTableRow["CutWide"] = "0";
                                                        }
                                                        else
                                                        {
                                                            FuyeIssueMaterialBillsDataTableRow["CutWide"] = CellValue;
                                                        }
                                                        //FuyeIssueMaterialBillsDataTableRow["Wide"] = CellValue;
                                                        break;
                                                    case 7:
                                                        string High = CStr(Sheet.Cells[i, j].Value);
                                                        if (High == "" || High == null)
                                                        {
                                                            FuyeIssueMaterialBillsDataTableRow["CutHigh"] = "0";
                                                        }
                                                        else
                                                        {
                                                            FuyeIssueMaterialBillsDataTableRow["CutHigh"] = CellValue;
                                                        }
                                                        //FuyeIssueMaterialBillsDataTableRow["High"] = CellValue;
                                                        break;
                                                    case 8:
                                                        FuyeIssueMaterialBillsDataTableRow["Qty"] = CellValue;
                                                        break;
                                                    case 9:
                                                        FuyeIssueMaterialBillsDataTableRow["SealingSide"] = CellValue;
                                                        break;
                                                    case 10:
                                                        FuyeIssueMaterialBillsDataTableRow["Remark"] = CellValue;
                                                        break;
                                                }
                                            }
                                            MianQiYiBiGui_FuyeDataTable.Rows.Add(FuyeIssueMaterialBillsDataTableRow);
                                        }
                                    }
                                }
                                MianQiYiBiGui_FuyeDataTable.TableName = "IssueMaterialBills3";
                                DS.Tables.Add(MianQiYiBiGui_FuyeDataTable);
                                MianQiYiBiGui_FuyeDataTable.Dispose();
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        throw ex;
                    }

                    #endregion
                    //A6包装Sheet页
                    #region
                    try
                    {
                        ExcelWorksheet Sheet = null;//数据所在Sheet
                        Sheet = pck.Workbook.Worksheets["A6包装"];
                        if (Sheet != null)
                        {
                            if (Sheet.Hidden.ToString() == "Visible")
                            {
                                int maxColumnNum = Sheet.Dimension.End.Column;//最大列
                                int minColumnNum = Sheet.Dimension.Start.Column;//最小列
                                int minRowNum = Sheet.Dimension.Start.Row;//最小行
                                int maxRowNum = Sheet.Dimension.End.Row;//最大行
                                int sRowNum = 4;//开始行
                                int eRowNum = 0;//结束行
                                //List<int> list = new List<int>();
                                int[] list = new int[maxRowNum + 1];
                                if (Convert.ToString(Sheet.Hidden) != "Hidden")
                                {
                                    for (int i = sRowNum; i < maxRowNum; i++)
                                    {
                                        ExcelRange range = Sheet.Cells[i, 1];
                                        object objectCellValue = Sheet.GetValue(i, 1);//单元格数据
                                        string EndNum = objectCellValue != null ? objectCellValue.ToString().Trim() : "";
                                        if (range.Merge)
                                        {
                                            EndNum = GetMergeValue(Sheet, i, 1);
                                        }
                                        //string EndNum = Convert.ToString(Sheet.Cells[i, 1].Value);
                                        if (EndNum.Trim() == "注：1.如遇个别非标产品不在上表尺寸内，则选择最相近的用量使用。")
                                        {
                                            eRowNum = i;
                                            break;
                                        }
                                        if (EndNum.Trim() == "衣帽间、壁柜、家具类侧板、顶底板、层板包装材料明细" || EndNum.Trim() == "背板、门板、装饰侧板、门厅柜单板、非标类板件包装材料" || EndNum.Trim() == "衣帽间板式类标准内胆柜包装材料明细" || EndNum.Trim() == "非标类内胆柜包装材料明细" || EndNum.Trim() == "罗马柱、顶线、图兰朵盖板" || EndNum.Trim() == "推拉门、玻璃门包装材料明细（所有玻璃产品需使用硬包装）" || EndNum.Trim() == "序号")
                                        {
                                            list[i] = i;
                                        }
                                    }
                                    int TheDeliveryCateGoryId = 0;
                                    int TheDeliveryCateGoryId1 = 0;
                                    int TheDeliveryCateGoryId2 = 0;
                                    int TheDeliveryCateGoryId3 = 0;
                                    int TheDeliveryCateGoryId4 = 0;
                                    int TheDeliveryCateGoryId5 = 0;
                                    string TheDeliveryCateGory = "";
                                    for (int q = 4; q < eRowNum; q++)
                                    {
                                        if (list[q] == 0 || CStr(Sheet.Cells[list[q], 1].Value).Trim() == "序号")
                                        {
                                            continue;
                                        }
                                        TheDeliveryCateGory = CStr(Sheet.Cells[list[q], 1].Value).Trim();
                                        if (TheDeliveryCateGory == "衣帽间、壁柜、家具类侧板、顶底板、层板包装材料明细")
                                        {
                                            TheDeliveryCateGoryId = q;
                                        }
                                        if (TheDeliveryCateGory == "背板、门板、装饰侧板、门厅柜单板、非标类板件包装材料")
                                        {
                                            TheDeliveryCateGoryId1 = q;
                                        }
                                        if (TheDeliveryCateGory == "衣帽间板式类标准内胆柜包装材料明细")
                                        {
                                            TheDeliveryCateGoryId2 = q;
                                        }
                                        if (TheDeliveryCateGory == "非标类内胆柜包装材料明细")
                                        {
                                            TheDeliveryCateGoryId3 = q;
                                        }
                                        if (TheDeliveryCateGory == "罗马柱、顶线、图兰朵盖板")
                                        {
                                            TheDeliveryCateGoryId4 = q;
                                        }
                                        if (TheDeliveryCateGory == "推拉门、玻璃门包装材料明细（所有玻璃产品需使用硬包装）")
                                        {
                                            TheDeliveryCateGoryId5 = q;
                                        }
                                    }
                                    for (int i = sRowNum; i < eRowNum; i++)
                                    {
                                        DataRow Li_PackingListTableRow = A6Li_PackingListTable.NewRow();
                                        Li_PackingListTableRow["ProductOrderId"] = ParentId;
                                        ExcelRange rangPackingNum = Sheet.Cells[i, 6];
                                        object objectPackingNum = Sheet.GetValue(i, 6);//单元格数据
                                        string PackingNum = objectPackingNum != null ? objectPackingNum.ToString().Trim() : "";
                                        if (rangPackingNum.Merge)
                                        {
                                            PackingNum = GetMergeValue(Sheet, i, 6);
                                        }
                                        //string PackingNum = Convert.ToString(Sheet.Cells[i, 6].Value);
                                        if (PackingNum == "" || PackingNum == null || PackingNum == "包数" || list.Contains(i))
                                        {
                                            continue;
                                        }
                                        for (int j = 1; j < 12; j++)
                                        {
                                            ExcelRange rang = Sheet.Cells[i, j];
                                            object objectCellValue = Sheet.GetValue(i, j);//单元格数据
                                            string CellValue = objectCellValue != null ? objectCellValue.ToString().Trim() : "";
                                            if (rang.Merge)
                                            {
                                                CellValue = GetMergeValue(Sheet, i, j);
                                            }
                                            switch (j)
                                            {
                                                case 1:
                                                    Li_PackingListTableRow["PackingNumber"] = CellValue;
                                                    break;
                                                case 2:
                                                    Li_PackingListTableRow["Wide"] = CellValue;
                                                    break;
                                                case 3:
                                                    Li_PackingListTableRow["High"] = CellValue;
                                                    break;
                                                case 4:
                                                    Li_PackingListTableRow["Depth"] = CellValue;
                                                    break;
                                                case 5:
                                                    if (System.Text.RegularExpressions.Regex.IsMatch(CellValue.ToString(), @"^[-+]?[0-9]*\.?[0-9]+$"))
                                                    {
                                                        Li_PackingListTableRow["Quantity"] = Convert.ToInt32(CellValue);
                                                    }
                                                    else
                                                    {
                                                        Li_PackingListTableRow["Quantity"] = 0;
                                                    }
                                                    break;
                                                case 6:
                                                    Li_PackingListTableRow["Cell"] = CellValue;
                                                    break;
                                                case 7:
                                                    Li_PackingListTableRow["CabinetType"] = CellValue;
                                                    break;
                                                case 8:
                                                    Li_PackingListTableRow["NameOfPackagingMaterials"] = CellValue;
                                                    break;
                                                case 9:
                                                    Li_PackingListTableRow["MaterialCode"] = CellValue;
                                                    break;
                                                case 10:
                                                    if (System.Text.RegularExpressions.Regex.IsMatch(CellValue.ToString(), @"^[-+]?[0-9]*\.?[0-9]+$"))
                                                    {
                                                        Li_PackingListTableRow["Qty"] = CellValue;
                                                    }
                                                    else
                                                    {
                                                        Li_PackingListTableRow["PackingQuantity"] = CellValue;
                                                    }
                                                    break;
                                                case 11:
                                                    Li_PackingListTableRow["Unit"] = Sheet.Cells[i, j].Value;
                                                    break;
                                            }
                                        }
                                        if (TheDeliveryCateGoryId1 > 0)
                                        {
                                            if (i >= TheDeliveryCateGoryId && i < TheDeliveryCateGoryId1)
                                            {
                                                Li_PackingListTableRow["TheDeliveryCateGory"] = CStr(Sheet.Cells[TheDeliveryCateGoryId, 1].Value).Trim();
                                            }
                                        }
                                        else if (TheDeliveryCateGoryId2 > 0)
                                        {
                                            if (i >= TheDeliveryCateGoryId1 && i < TheDeliveryCateGoryId2)
                                            {
                                                Li_PackingListTableRow["TheDeliveryCateGory"] = CStr(Sheet.Cells[TheDeliveryCateGoryId1, 1].Value).Trim();
                                            }
                                        }
                                        else if (TheDeliveryCateGoryId3 > 0)
                                        {
                                            if (i >= TheDeliveryCateGoryId2 && i < TheDeliveryCateGoryId3)
                                            {
                                                Li_PackingListTableRow["TheDeliveryCateGory"] = CStr(Sheet.Cells[TheDeliveryCateGoryId2, 1].Value).Trim();
                                            }
                                        }
                                        else if (TheDeliveryCateGoryId4 > 0)
                                        {
                                            if (i >= TheDeliveryCateGoryId3 && i < TheDeliveryCateGoryId4)
                                            {
                                                Li_PackingListTableRow["TheDeliveryCateGory"] = CStr(Sheet.Cells[TheDeliveryCateGoryId3, 1].Value).Trim();
                                            }
                                        }
                                        else if (TheDeliveryCateGoryId5 > 0)
                                        {
                                            if (i >= TheDeliveryCateGoryId4 && i < TheDeliveryCateGoryId5)
                                            {
                                                Li_PackingListTableRow["TheDeliveryCateGory"] = CStr(Sheet.Cells[TheDeliveryCateGoryId4, 1].Value).Trim();
                                            }
                                            else if (i >= TheDeliveryCateGoryId5)
                                            {
                                                Li_PackingListTableRow["TheDeliveryCateGory"] = CStr(Sheet.Cells[TheDeliveryCateGoryId5, 1].Value).Trim();
                                            }
                                        }
                                        else
                                        {
                                            Li_PackingListTableRow["TheDeliveryCateGory"] = CStr(Sheet.Cells[TheDeliveryCateGoryId, 1].Value).Trim();
                                        }


                                        //if (i >= TheDeliveryCateGoryId && i < TheDeliveryCateGoryId1)
                                        //{
                                        //    Li_PackingListTableRow["TheDeliveryCateGory"] = CStr(Sheet.Cells[TheDeliveryCateGoryId, 1].Value).Trim();
                                        //}
                                        //else if (i >= TheDeliveryCateGoryId1 && i < TheDeliveryCateGoryId2)
                                        //{
                                        //    Li_PackingListTableRow["TheDeliveryCateGory"] = CStr(Sheet.Cells[TheDeliveryCateGoryId1, 1].Value).Trim();
                                        //}
                                        //else if (i >= TheDeliveryCateGoryId2 && i < TheDeliveryCateGoryId3)
                                        //{
                                        //    Li_PackingListTableRow["TheDeliveryCateGory"] = CStr(Sheet.Cells[TheDeliveryCateGoryId2, 1].Value).Trim();
                                        //}
                                        //else if (i >= TheDeliveryCateGoryId3 && i < TheDeliveryCateGoryId4)
                                        //{
                                        //    Li_PackingListTableRow["TheDeliveryCateGory"] = CStr(Sheet.Cells[TheDeliveryCateGoryId3, 1].Value).Trim();
                                        //}
                                        //else if (i >= TheDeliveryCateGoryId4 && i < TheDeliveryCateGoryId5)
                                        //{
                                        //    Li_PackingListTableRow["TheDeliveryCateGory"] = CStr(Sheet.Cells[TheDeliveryCateGoryId4, 1].Value).Trim();
                                        //}
                                        //else if (i >= TheDeliveryCateGoryId5)
                                        //{
                                        //    Li_PackingListTableRow["TheDeliveryCateGory"] = CStr(Sheet.Cells[TheDeliveryCateGoryId5, 1].Value).Trim();
                                        //}
                                        A6Li_PackingListTable.Rows.Add(Li_PackingListTableRow);
                                    }
                                }
                                A6Li_PackingListTable.TableName = "A6Li_Packaging";
                                DS.Tables.Add(A6Li_PackingListTable);
                                Array.Clear(list, 0, list.Length);
                            }
                        }

                    }
                    catch (Exception ex)
                    {
                        throw ex;
                    }

                    #endregion


                    //料单Sheet页
                    #region
                    try
                    {
                        ExcelWorksheet Sheet = null;//数据所在Sheet
                        Sheet = pck.Workbook.Worksheets["料单"];
                        if (Sheet != null)
                        {
                            if (Sheet.Hidden.ToString() == "Visible")
                            {
                                int maxColumnNum = Sheet.Dimension.End.Column;//最大列
                                int minColumnNum = Sheet.Dimension.Start.Column;//最小列
                                int minRowNum = Sheet.Dimension.Start.Row;//最小行
                                int maxRowNum = Sheet.Dimension.End.Row;//最大行
                                int sRowNum = 5;//开始行
                                int eRowNum = 0;//结束行
                                int sAColNum = 1;//区域A的开始栏位

                                if (Convert.ToString(Sheet.Hidden) != "Hidden")
                                {
                                    for (int i = sRowNum; i <= maxRowNum; i++)
                                    {
                                        string EndValue = Convert.ToString(Sheet.Cells[i, 1].Value);
                                        if (EndValue.Trim() == "拆解员：")
                                        {
                                            eRowNum = i;
                                            break;
                                        }
                                    }
                                    DataTable MaterialTable = new DataTable();
                                    MaterialTable.Columns.Add(string.Format("MaterialDescription"), Type.GetType("System.String"));
                                    MaterialTable.Columns.Add(string.Format("ProductName"), Type.GetType("System.String"));
                                    DataRow MaterialTableRow = MaterialTable.NewRow();
                                    string MaterialDescription = null;
                                    //领料单读取
                                    for (int i = sRowNum; i <= eRowNum; i++)
                                    {
                                        MaterialDescription = CStr(Sheet.Cells[i, 3].Value);
                                        if (MaterialDescription == null || MaterialDescription == "" || MaterialDescription == "物料描述")
                                        {
                                            continue;
                                        }
                                        else
                                        {
                                            MaterialTableRow["MaterialDescription"] = MaterialDescription;
                                            MaterialTable.Rows.Add(MaterialTableRow.ItemArray);
                                        }
                                    }
                                    SqlCommand cmd = new SqlCommand();
                                    SqlConnection con = new SqlConnection("Data Source=192.168.124.72;Initial Catalog=OrBitXI;User ID=sa;PassWord=admin@2017");
                                    con.Open();
                                    cmd.CommandText = "Pro_GetproductName";
                                    cmd.Connection = con;
                                    cmd.CommandType = CommandType.StoredProcedure;
                                    SqlParameter parm = new SqlParameter("@Pro_GetproductName", SqlDbType.Structured)
                                    {
                                        Value = MaterialTable
                                    };
                                    cmd.Parameters.Add(parm);
                                    cmd.ExecuteNonQuery();
                                    DataTable GetMaterialBillsTable = new DataTable();
                                    cmd.Parameters.Add(new SqlParameter("@return", SqlDbType.Int));
                                    cmd.Parameters["@return"].Direction = ParameterDirection.ReturnValue;
                                    SqlDataReader Datereader = cmd.ExecuteReader();
                                    GetMaterialBillsTable.Load(Datereader);
                                    string Requisition_Type = CStr(Sheet.Cells[1, 1].Value);
                                    for (int i = sRowNum; i < eRowNum; i++)
                                    {
                                        DataRow GetMaterialBillsDataTableRow = MianQiYiBiGui_LiaoDanDataTable.NewRow();
                                        GetMaterialBillsDataTableRow["GetMaterialBillsId"] = System.Guid.NewGuid().ToString().Substring(0, 12).ToUpper();
                                        GetMaterialBillsDataTableRow["ProductOrderId"] = ParentId;
                                        GetMaterialBillsDataTableRow["Requisition_Type"] = Requisition_Type.Substring(0, 7);
                                        //string Name = Convert.ToString(Sheet.Cells[i, 2].Value);
                                        //float Num =Convert.ToSingle( Sheet.Cells[i, 6].Value);
                                        string Num1 = Convert.ToString(Sheet.Cells[i, 4].Value);
                                        if (Num1 == "" || Num1 == null)
                                        {
                                            continue;
                                        }
                                        if (System.Text.RegularExpressions.Regex.IsMatch(Num1, @"^[-+]?[0-9]*\.?[0-9]+$"))
                                        {
                                            for (int j = sAColNum; j < 7; j++)
                                            {
                                                ExcelRange range = Sheet.Cells[i, j];
                                                object objectCellValue = Sheet.GetValue(i, j);//单元格数据
                                                string CellValue = objectCellValue != null ? objectCellValue.ToString().Trim() : "";
                                                if (range.Merge)
                                                {
                                                    CellValue = GetMergeValue(Sheet, i, j);
                                                }
                                                switch (j)
                                                {
                                                    case 1:
                                                        GetMaterialBillsDataTableRow["MaterialType"] = CellValue;
                                                        break;
                                                    case 2:
                                                        //string GuiGe = Convert.ToString(Sheet.Cells[i, 5].Value);
                                                        GetMaterialBillsDataTableRow["NumericalOrder"] = CellValue;
                                                        break;
                                                    case 3:
                                                        //GetMaterialBillsDataTableRow["ProductDesCription"] = CellValue;
                                                        for (int q = 0; q < GetMaterialBillsTable.Rows.Count; q++)
                                                        {
                                                            string SQLproductDescription = GetMaterialBillsTable.Rows[q]["ProductDescription"].ToString();
                                                            string ProductName = GetMaterialBillsTable.Rows[q]["ProductName"].ToString();
                                                            if (SQLproductDescription == CellValue)
                                                            {
                                                                if (ProductName == null || ProductName == "")
                                                                {
                                                                    NullCount++;
                                                                }
                                                                GetMaterialBillsDataTableRow["ProductName"] = ProductName;
                                                                GetMaterialBillsDataTableRow["ProductDes"] = SQLproductDescription;
                                                                break;
                                                            }
                                                        }
                                                        break;

                                                    //case 5:
                                                    //    GetMaterialBillsDataTableRow["MaterialType"] = CellValue;
                                                    //    break;
                                                    case 4:
                                                        GetMaterialBillsDataTableRow["Qty"] = CellValue;
                                                        break;
                                                    case 5:
                                                        GetMaterialBillsDataTableRow["Unit"] = CellValue;
                                                        break;
                                                    case 6:
                                                        GetMaterialBillsDataTableRow["PackingConfirmed"] = CellValue;
                                                        break;
                                                }
                                            }
                                            MianQiYiBiGui_LiaoDanDataTable.Rows.Add(GetMaterialBillsDataTableRow);
                                        }
                                    }
                                    MianQiYiBiGui_LiaoDanDataTable.TableName = "GetMaterialBills3";
                                    DS.Tables.Add(MianQiYiBiGui_LiaoDanDataTable);
                                    MianQiYiBiGui_LiaoDanDataTable.Dispose();
                                    GetMaterialBillsTable.Dispose();
                                    con.Dispose();
                                    cmd.Dispose();
                                }
                            }
                        }

                    }
                    catch (Exception ex)
                    {
                        throw ex;
                    }

                    #endregion
                    //装箱清单Sheet页
                    #region
                    try
                    {
                        ExcelWorksheet Sheet = null;//数据所在Sheet
                        Sheet = pck.Workbook.Worksheets["装箱清单"];
                        if (Sheet != null)
                        {
                            if (Sheet.Hidden.ToString() == "Visible")
                            {
                                int maxColumnNum = Sheet.Dimension.End.Column;//最大列
                                int minColumnNum = Sheet.Dimension.Start.Column;//最小列
                                int minRowNum = Sheet.Dimension.Start.Row;//最小行
                                int maxRowNum = Sheet.Dimension.End.Row;//最大行
                                int sRowNum = 5;//开始行
                                int eRowNum = 0;//结束行
                                int sAColNum = 1;//区域A的开始栏位

                                if (Convert.ToString(Sheet.Hidden) != "Hidden")
                                {
                                    for (int i = sRowNum; i <= maxRowNum; i++)
                                    {
                                        string EndValue = Convert.ToString(Sheet.Cells[i, 1].Value);
                                        if (EndValue.Replace(" ", "") == "拆解员：装箱员：")
                                        {
                                            eRowNum = i;
                                            break;
                                        }
                                    }
                                    DataTable MaterialTable = new DataTable();
                                    MaterialTable.Columns.Add(string.Format("MaterialDescription"), Type.GetType("System.String"));
                                    MaterialTable.Columns.Add(string.Format("ProductName"), Type.GetType("System.String"));
                                    DataRow MaterialTableRow = MaterialTable.NewRow();
                                    string MaterialDescription = null;
                                    //领料单读取
                                    for (int i = sRowNum; i <= eRowNum; i++)
                                    {
                                        MaterialDescription = CStr(Sheet.Cells[i, 3].Value);
                                        if (MaterialDescription == null || MaterialDescription == "" || MaterialDescription == "物料描述")
                                        {
                                            continue;
                                        }
                                        else
                                        {
                                            MaterialTableRow["MaterialDescription"] = MaterialDescription;
                                            MaterialTable.Rows.Add(MaterialTableRow.ItemArray);
                                        }

                                    }
                                    SqlCommand cmd = new SqlCommand();
                                    SqlConnection con = new SqlConnection("Data Source=192.168.124.72;Initial Catalog=OrBitXI;User ID=sa;PassWord=admin@2017");
                                    con.Open();
                                    cmd.CommandText = "Pro_GetproductName";
                                    cmd.Connection = con;
                                    cmd.CommandType = CommandType.StoredProcedure;
                                    SqlParameter parm = new SqlParameter("@Pro_GetproductName", SqlDbType.Structured)
                                    {
                                        Value = MaterialTable
                                    };
                                    cmd.Parameters.Add(parm);
                                    cmd.ExecuteNonQuery();
                                    DataTable GetMaterialBillsTable = new DataTable();
                                    cmd.Parameters.Add(new SqlParameter("@return", SqlDbType.Int));
                                    cmd.Parameters["@return"].Direction = ParameterDirection.ReturnValue;
                                    SqlDataReader Datereader = cmd.ExecuteReader();
                                    GetMaterialBillsTable.Load(Datereader);
                                    string Requisition_Type = CStr(Sheet.Cells[1, 1].Value);
                                    for (int i = sRowNum; i < eRowNum; i++)
                                    {
                                        DataRow GetMaterialBillsDataTableRow = MianQiYiBiGui_ZhuangXiangQingDanDataTable.NewRow();
                                        GetMaterialBillsDataTableRow["GetMaterialBillsId"] = System.Guid.NewGuid().ToString().Substring(0, 12).ToUpper();
                                        GetMaterialBillsDataTableRow["ProductOrderId"] = ParentId;
                                        GetMaterialBillsDataTableRow["Requisition_Type"] = Requisition_Type.Substring(0, 4);
                                        //string Name = Convert.ToString(Sheet.Cells[i, 2].Value);
                                        //float Num =Convert.ToSingle( Sheet.Cells[i, 6].Value);
                                        string Num1 = Convert.ToString(Sheet.Cells[i, 4].Value);
                                        if (Num1 == "" || Num1 == null)
                                        {
                                            continue;
                                        }
                                        if (System.Text.RegularExpressions.Regex.IsMatch(Num1, @"^[-+]?[0-9]*\.?[0-9]+$"))
                                        {
                                            for (int j = sAColNum; j < 7; j++)
                                            {
                                                ExcelRange range = Sheet.Cells[i, j];
                                                object objectCellValue = Sheet.GetValue(i, j);//单元格数据
                                                string CellValue = objectCellValue != null ? objectCellValue.ToString().Trim() : "";
                                                if (range.Merge)
                                                {
                                                    CellValue = GetMergeValue(Sheet, i, j);
                                                }
                                                switch (j)
                                                {
                                                    case 1:
                                                        GetMaterialBillsDataTableRow["MaterialType"] = CellValue;
                                                        break;
                                                    case 2:
                                                        //string GuiGe = Convert.ToString(Sheet.Cells[i, 5].Value);
                                                        GetMaterialBillsDataTableRow["NumericalOrder"] = CellValue;
                                                        break;
                                                    case 3:
                                                        //GetMaterialBillsDataTableRow["ProductDesCription"] = CellValue;
                                                        for (int q = 0; q < GetMaterialBillsTable.Rows.Count; q++)
                                                        {
                                                            string SQLproductDescription = GetMaterialBillsTable.Rows[q]["ProductDescription"].ToString();
                                                            string ProductName = GetMaterialBillsTable.Rows[q]["ProductName"].ToString();
                                                            if (SQLproductDescription == CellValue)
                                                            {
                                                                GetMaterialBillsDataTableRow["ProductName"] = ProductName;
                                                                GetMaterialBillsDataTableRow["ProductDes"] = SQLproductDescription;
                                                            }
                                                        }
                                                        break;

                                                    //case 5:
                                                    //    GetMaterialBillsDataTableRow["MaterialType"] = CellValue;
                                                    //    break;
                                                    case 4:
                                                        GetMaterialBillsDataTableRow["Qty"] = CellValue;
                                                        break;
                                                    case 5:
                                                        GetMaterialBillsDataTableRow["Unit"] = CellValue;
                                                        break;
                                                    case 6:
                                                        GetMaterialBillsDataTableRow["PackingConfirmed"] = CellValue;
                                                        break;
                                                }
                                            }
                                            MianQiYiBiGui_ZhuangXiangQingDanDataTable.Rows.Add(GetMaterialBillsDataTableRow);
                                        }
                                    }
                                    MianQiYiBiGui_ZhuangXiangQingDanDataTable.TableName = "GetMaterialBills4";
                                    DS.Tables.Add(MianQiYiBiGui_ZhuangXiangQingDanDataTable);
                                    MianQiYiBiGui_ZhuangXiangQingDanDataTable.Dispose();
                                    GetMaterialBillsTable.Dispose();
                                    con.Dispose();
                                    cmd.Dispose();
                                }
                            }
                        }

                    }
                    catch (Exception ex)
                    {
                        throw ex;
                    }
                    #endregion
                    //速美包装Sheet页
                    #region
                    try
                    {
                        ExcelWorksheet Sheet = null;//数据所在Sheet
                        Sheet = pck.Workbook.Worksheets["速美包装"];
                        if (Sheet != null)
                        {
                            if (Sheet.Hidden.ToString() == "Visible")
                            {
                                int maxColumnNum = Sheet.Dimension.End.Column;//最大列
                                int minColumnNum = Sheet.Dimension.Start.Column;//最小列
                                int minRowNum = Sheet.Dimension.Start.Row;//最小行
                                int maxRowNum = Sheet.Dimension.End.Row;//最大行
                                int sRowNum = 4;//开始行
                                int eRowNum = 0;//结束行
                                //List<int> list = new List<int>();
                                int[] list = new int[maxRowNum + 1];
                                if (Convert.ToString(Sheet.Hidden) != "Hidden")
                                {
                                    for (int i = sRowNum; i < maxRowNum; i++)
                                    {
                                        ExcelRange range = Sheet.Cells[i, 1];
                                        object objectCellValue = Sheet.GetValue(i, 1);//单元格数据
                                        string EndNum = objectCellValue != null ? objectCellValue.ToString().Trim() : "";
                                        if (range.Merge)
                                        {
                                            EndNum = GetMergeValue(Sheet, i, 1);
                                        }
                                        //string EndNum = Convert.ToString(Sheet.Cells[i, 1].Value);
                                        if (EndNum.Trim() == "注：1.如遇个别非标产品不在上表尺寸内，则选择最相近的用量使用。")
                                        {
                                            eRowNum = i;
                                            break;
                                        }
                                        if (EndNum.Trim() == "衣帽间、壁柜、家具类侧板、顶底板、层板包装材料明细" || EndNum.Trim() == "背板、门板、装饰侧板、门厅柜单板、非标类板件包装材料" || EndNum.Trim() == "衣帽间板式类标准内胆柜包装材料明细" || EndNum.Trim() == "非标类内胆柜包装材料明细" || EndNum.Trim() == "罗马柱、顶线、图兰朵盖板" || EndNum.Trim() == "推拉门、玻璃门包装材料明细（所有玻璃产品需使用硬包装）" || EndNum.Trim() == "序号")
                                        {
                                            list[i] = i;
                                        }
                                    }
                                    int TheDeliveryCateGoryId = 0;
                                    int TheDeliveryCateGoryId1 = 0;
                                    int TheDeliveryCateGoryId2 = 0;
                                    int TheDeliveryCateGoryId3 = 0;
                                    int TheDeliveryCateGoryId4 = 0;
                                    int TheDeliveryCateGoryId5 = 0;
                                    string TheDeliveryCateGory = "";
                                    for (int q = 4; q < eRowNum; q++)
                                    {
                                        if (list[q] == 0 || CStr(Sheet.Cells[list[q], 1].Value).Trim() == "序号")
                                        {
                                            continue;
                                        }
                                        TheDeliveryCateGory = CStr(Sheet.Cells[list[q], 1].Value).Trim();
                                        if (TheDeliveryCateGory == "衣帽间、壁柜、家具类侧板、顶底板、层板包装材料明细")
                                        {
                                            TheDeliveryCateGoryId = q;
                                        }
                                        if (TheDeliveryCateGory == "背板、门板、装饰侧板、门厅柜单板、非标类板件包装材料")
                                        {
                                            TheDeliveryCateGoryId1 = q;
                                        }
                                        if (TheDeliveryCateGory == "衣帽间板式类标准内胆柜包装材料明细")
                                        {
                                            TheDeliveryCateGoryId2 = q;
                                        }
                                        if (TheDeliveryCateGory == "非标类内胆柜包装材料明细")
                                        {
                                            TheDeliveryCateGoryId3 = q;
                                        }
                                        if (TheDeliveryCateGory == "罗马柱、顶线、图兰朵盖板")
                                        {
                                            TheDeliveryCateGoryId4 = q;
                                        }
                                        if (TheDeliveryCateGory == "推拉门、玻璃门包装材料明细（所有玻璃产品需使用硬包装）")
                                        {
                                            TheDeliveryCateGoryId5 = q;
                                        }
                                    }
                                    for (int i = sRowNum; i < eRowNum; i++)
                                    {
                                        DataRow Li_PackingListTableRow = SuMeiPackingListTable.NewRow();
                                        Li_PackingListTableRow["ProductOrderId"] = ParentId;
                                        string PackingNum = Convert.ToString(Sheet.Cells[i, 6].Value);
                                        if (PackingNum == "" || PackingNum == null || PackingNum == "包数")
                                        {
                                            continue;
                                        }
                                        for (int j = 1; j < 12; j++)
                                        {
                                            ExcelRange rang = Sheet.Cells[i, j];
                                            object objectCellValue = Sheet.GetValue(i, j);//单元格数据
                                            string CellValue = objectCellValue != null ? objectCellValue.ToString().Trim() : "";
                                            if (rang.Merge)
                                            {
                                                CellValue = GetMergeValue(Sheet, i, j);
                                            }
                                            switch (j)
                                            {
                                                case 1:
                                                    Li_PackingListTableRow["PackingNumber"] = CellValue;
                                                    break;
                                                case 2:
                                                    Li_PackingListTableRow["Wide"] = CellValue;
                                                    break;
                                                case 3:
                                                    Li_PackingListTableRow["High"] = CellValue;
                                                    break;
                                                case 4:
                                                    Li_PackingListTableRow["Depth"] = CellValue;
                                                    break;
                                                case 5:
                                                    if (System.Text.RegularExpressions.Regex.IsMatch(CellValue.ToString(), @"^[-+]?[0-9]*\.?[0-9]+$"))
                                                    {
                                                        Li_PackingListTableRow["Quantity"] = Convert.ToInt32(CellValue);
                                                    }
                                                    else
                                                    {
                                                        Li_PackingListTableRow["Quantity"] = 0;
                                                    }
                                                    break;
                                                case 6:
                                                    Li_PackingListTableRow["Cell"] = CellValue;
                                                    break;
                                                case 7:
                                                    Li_PackingListTableRow["CabinetType"] = CellValue;
                                                    break;
                                                case 8:
                                                    Li_PackingListTableRow["NameOfPackagingMaterials"] = CellValue;
                                                    break;
                                                case 9:
                                                    Li_PackingListTableRow["MaterialCode"] = CellValue;
                                                    break;
                                                case 10:
                                                    if (System.Text.RegularExpressions.Regex.IsMatch(CellValue.ToString(), @"^[-+]?[0-9]*\.?[0-9]+$"))
                                                    {
                                                        Li_PackingListTableRow["Qty"] = CellValue;
                                                    }
                                                    else
                                                    {
                                                        Li_PackingListTableRow["PackingQuantity"] = CellValue;
                                                    }
                                                    break;
                                                case 11:
                                                    Li_PackingListTableRow["Unit"] = Sheet.Cells[i, j].Value;
                                                    break;
                                            }
                                        }
                                        if (i >= TheDeliveryCateGoryId && i < TheDeliveryCateGoryId1)
                                        {
                                            Li_PackingListTableRow["TheDeliveryCateGory"] = CStr(Sheet.Cells[TheDeliveryCateGoryId, 1].Value).Trim();
                                        }
                                        else if (i >= TheDeliveryCateGoryId1 && i < TheDeliveryCateGoryId2)
                                        {
                                            Li_PackingListTableRow["TheDeliveryCateGory"] = CStr(Sheet.Cells[TheDeliveryCateGoryId1, 1].Value).Trim();
                                        }
                                        else if (i >= TheDeliveryCateGoryId2 && i < TheDeliveryCateGoryId3)
                                        {
                                            Li_PackingListTableRow["TheDeliveryCateGory"] = CStr(Sheet.Cells[TheDeliveryCateGoryId2, 1].Value).Trim();
                                        }
                                        else if (i >= TheDeliveryCateGoryId3 && i < TheDeliveryCateGoryId4)
                                        {
                                            Li_PackingListTableRow["TheDeliveryCateGory"] = CStr(Sheet.Cells[TheDeliveryCateGoryId3, 1].Value).Trim();
                                        }
                                        else if (i >= TheDeliveryCateGoryId4 && i < TheDeliveryCateGoryId5)
                                        {
                                            Li_PackingListTableRow["TheDeliveryCateGory"] = CStr(Sheet.Cells[TheDeliveryCateGoryId4, 1].Value).Trim();
                                        }
                                        else if (i >= TheDeliveryCateGoryId5)
                                        {
                                            Li_PackingListTableRow["TheDeliveryCateGory"] = CStr(Sheet.Cells[TheDeliveryCateGoryId5, 1].Value).Trim();
                                        }
                                        SuMeiPackingListTable.Rows.Add(Li_PackingListTableRow);
                                    }
                                }
                                SuMeiPackingListTable.TableName = "SuMeiLi_Packaging";
                                DS.Tables.Add(SuMeiPackingListTable);
                                SuMeiPackingListTable.Dispose();
                                Array.Clear(list, 0, list.Length);
                            }
                        }

                    }
                    catch (Exception ex)
                    {
                        throw ex;
                    }
                    #endregion


                }

                FS.Dispose();
                DialogResult ResultYes = MessageBox.Show("是否推送？", "提示", MessageBoxButtons.OKCancel, MessageBoxIcon.Question);
                if (ResultYes == DialogResult.OK)
                {
                    //实例化通用方法类
                    DataToSQL data1 = new DataToSQL();
                    //调用导入数据库通用方法
                    data1.DataToSQLobj(DS);
                    //上传Excel到服务器上
                    data1.UpLoadExcel(Path);
                    //修改订单推送状态
                    data1.UpdProductOrderCurrentStatus(ParentId);
                    MessageBox.Show("推送成功，领料单物料号为空的记录有" + NullCount + "条");
                }
            }
            catch (Exception ex)
            {

                MessageBox.Show(ex.Message, "提示消息", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }
    }


    /// <summary>
    /// 免漆厨浴柜体数据导入SQL2018.7.3
    /// </summary>
    public class MianQiGuiTi : MianqiCabinetToSQL
    {
        public override void ReadMianqiCabinetData(string Path, string ParentId)
        {
            //统计物料号为空的物料
            int NullCount = 0;
            bool IsNull = false;
            string ThisSheetName = null;
            //存储数据流
            FileStream Fs = new FileStream(Path, FileMode.Open, FileAccess.Read);

            //读取Excel
            using (ExcelPackage pck = new ExcelPackage(Fs))
            {
                //ExcelWorksheet SheetName = pck.Workbook.Worksheets[1];
                //string Sheet_Name = SheetName.ToString();
                //int Sheet_Count = pck.Workbook.Worksheets.Count;
                ////MessageBox.Show(Sheet_Count.ToString());
                ////MessageBox.Show(Sheet_Name);
                bool IsMath = true;
                DataSet DS = new DataSet();
                //声明变量保存产品系列信息
                string MaterialParentType = "";
                //声明变量保存材质信息
                string Texture = "";
                //声明dataset保存纹理表信息（免漆厨浴柜）
                DataSet VeinDs = new DataSet();
                SqlConnection Veincon = new SqlConnection("Data Source=192.168.124.72;Initial Catalog=OrBitXI;User ID=sa;PassWord=admin@2017");
                Veincon.Open();
                string VeinSQL = "select * from Excel_Vein;select * from No_Vein";
                //string VeinSQL = "select * from No_Vein";
                SqlDataAdapter VeinAdapter = new SqlDataAdapter(VeinSQL, Veincon);
                VeinAdapter.Fill(VeinDs);
                VeinDs.Tables[0].TableName = "Excel_Vein";
                VeinDs.Tables[1].TableName = "No_Vein";
                // goto aa;
                //下料单
                #region
                try
                {
                    //数据所在Sheet
                    ExcelWorksheet Sheet = null;
                    //打开的Sheet名
                    Sheet = pck.Workbook.Worksheets["下料单"];
                    if (Sheet != null)
                    {
                        if (Sheet.Hidden.ToString() == "Visible")
                        {
                            //最大列
                            int maxColumnNum = Sheet.Dimension.End.Column;
                            //最小列
                            int minColumnNum = Sheet.Dimension.Start.Column;
                            //最小行
                            int minRowNum = Sheet.Dimension.Start.Row;
                            //最大行
                            int maxRowNum = Sheet.Dimension.End.Row;
                            //开始行
                            int sRowNum = 5;
                            //结束行
                            int eRowNum = 0;
                            //区域A的开始栏位
                            int sAColNum = 1;
                            //区域A的结束栏位
                            int eAColNum = 5;
                            //区域B的开始栏位
                            int sBColNum = 6;
                            //区域B的结束栏位
                            int eBColNum = 40;
                            //合计所在行
                            int hJRowNum = 0;
                            //读取Excel内容
                            //修改开始行
                            sRowNum = 4;
                            //修改结束行
                            eRowNum = 23;
                            //标题行
                            int ExcelTitle1 = 0;
                            int ExcelTitle2 = 0;
                            int ExcelTitle = 0;
                            //DateTime time1 = DateTime.Now;
                            //获取结束行
                            for (int d = 1; d < maxRowNum; d++)
                            {
                                if ((CStr(Sheet.Cells[d, 1].Value)).Trim() == "总合计：")
                                {
                                    eRowNum = d - 2;
                                    break;
                                }
                            }
                            //DateTime time2 = DateTime.Now;
                            //TimeSpan time3 = time2 - time1;
                            //MessageBox.Show(time3.ToString());
                            for (int d = 1; d < eRowNum; d++)
                            {
                                if ((CStr(Sheet.Cells[d, 1].Value)).Trim() == "吊柜")
                                {
                                    ExcelTitle2 = d;
                                    break;
                                }
                            }
                            for (int i = 1; i < eRowNum; i++)
                            {
                                if ((CStr(Sheet.Cells[i, 1].Value)).Trim() == "地柜")
                                {
                                    ExcelTitle1 = i;
                                    break;
                                }
                            }
                            for (int i = 1; i < eRowNum; i++)
                            {
                                if ((CStr(Sheet.Cells[i, 1].Value)).Trim() == "抽屉、备用条等")
                                {
                                    ExcelTitle = i;
                                    break;
                                }
                            }
                            string MaterialNote = "";
                            for (int i = 13; i < 16; i++)
                            {
                                MaterialNote = CStr(Sheet.Cells[2, i].Value);
                                if (MaterialNote.Length == 0)
                                {
                                    continue;
                                }
                                else
                                {
                                    break;
                                }
                            }
                            if (IsMath == true)
                            {
                                //sRowNum
                                string OrderDetailId = "";
                                //循环遍历每一行
                                for (int i = sRowNum; i <= eRowNum; i++)
                                {
                                    string HeJi = CStr(Sheet.Cells[i, 1].Value);
                                    if (i == ExcelTitle2 || i == ExcelTitle1 || i == ExcelTitle || HeJi == "合计:")
                                    {
                                        continue;
                                    }
                                    string excelValue1 = null;
                                    //string excelValue2 = null;
                                    //string excelValue3 = null;

                                    //读取A区域内容
                                    DataRow newARow = null;
                                    DataRow newBRow = Xialiaodan_Table.NewRow(); ;
                                    newARow = GuiTi_Table.NewRow();
                                    //newBRow = DtB.NewRow();
                                    int ABlankRow = 0;//A区域全白行
                                    int AColumnsCount = GuiTi_Table.Columns.Count;//A区域栏位数



                                    int b = 0;
                                    string PlateNum = "";
                                    for (int a = 5; a < 41; a++)
                                    {
                                        PlateNum = CStr(Sheet.Cells[i, a].Value);
                                        if (PlateNum == null || PlateNum == "")
                                        {
                                            b++;
                                        }
                                        else
                                        {
                                            if (System.Text.RegularExpressions.Regex.IsMatch(PlateNum, @"^[-+]?[0-9]*\.?[0-9]+$"))
                                            {
                                                if (Convert.ToSingle(PlateNum) <= 0)
                                                {
                                                    b++;
                                                }
                                            }
                                        }
                                        a = a + 4;
                                    }
                                    if (b == 8)
                                    {
                                        ABlankRow++;
                                        continue;
                                    }
                                    else
                                    {
                                        //CenterMaterials芯材
                                        string PlateType = CStr(Sheet.Cells[1, 1].Value);
                                        newBRow["PlateType"] = PlateType.Substring(3, 2);
                                        newBRow["FaceConduct"] = PlateType.Substring(1, 2);
                                        string PlateNum1 = CStr(Sheet.Cells[i, 5].Value);
                                        if (PlateNum1 == null || PlateNum1 == "")
                                        {

                                            int Detail = 1;//明细分割位

                                            int BColumnsCount = Xialiaodan_Table.Columns.Count;//B区域栏位数

                                            for (int z = sBColNum; z <= eBColNum; z++)
                                            {
                                                if (i > ExcelTitle)
                                                {
                                                    OrderDetailId = null;
                                                }
                                                if (Detail == 1)
                                                {
                                                    string IssueMaterialBillsId = System.Guid.NewGuid().ToString().Substring(0, 12).ToUpper();
                                                    newBRow[string.Format("IssueMaterialBillsId")] = IssueMaterialBillsId;
                                                    if (OrderDetailId == "" || OrderDetailId == null)
                                                    {
                                                        newBRow[string.Format("OrderDetailId")] = OrderDetailId;
                                                    }
                                                    else
                                                    {
                                                        newBRow[string.Format("OrderDetailId")] = OrderDetailId.ToUpper();
                                                    }
                                                    newBRow[string.Format("ProductOrderId")] = ParentId;

                                                    object PlateQty = Sheet.Cells[i, z + 4].Value;
                                                    if (PlateQty == null || PlateQty.ToString() == "0")
                                                    {
                                                        PlateQty = "";
                                                    }
                                                    //else
                                                    //{
                                                    //    PlateQty = Sheet.Cells[i, z + 4].Value.ToString();
                                                    //}
                                                    if (PlateQty == null || PlateQty.ToString() == "")
                                                    {
                                                        z = z + 4;
                                                        continue;
                                                    }
                                                    else
                                                    {
                                                        object PlateName1 = Sheet.Cells[i, z].Value;
                                                        newBRow[string.Format("PlateName")] = PlateName1;
                                                        object MaterialNote1 = Sheet.Cells[2, 13].Value;
                                                        Texture = MaterialNote1.ToString();
                                                        newBRow[string.Format("MaterialNote")] = MaterialNote1;//材质
                                                        //Vein纹理
                                                        //将dataset的表填充到datatable
                                                        DataTable TB_No_Vein = VeinDs.Tables["No_Vein"];
                                                        //指定的字符串变量，根据这个变量查询table是否包含这条数据
                                                        //String BWART1 = VeinDs.Tables["No_Vein"].Rows[0][1].ToString();
                                                        //给dataview绑定数据
                                                        DataView Dv_No_Vein = TB_No_Vein.DefaultView;
                                                        //dataview的筛选属性，等于号后面是条件（示例为查看table里面BWART列像BWART1的行）
                                                        Dv_No_Vein.RowFilter = "PlateType = '" + MaterialNote1 + "'";
                                                        //查询到的行（>0为有一到多条数据，=0没有查询到数据）
                                                        if (Dv_No_Vein.Count > 0)//如果材质表中包含这个材质说明此材质无纹理
                                                        {
                                                            newBRow[string.Format("Vein")] = "0";//无纹理
                                                        }
                                                        else
                                                        {
                                                            ////将dataset的表填充到datatable
                                                            //DataTable TB_Excel_Vein = VeinDs.Tables["Excel_Vein"];
                                                            ////指定的字符串变量，根据这个变量查询table是否包含这条数据
                                                            ////String BWART1 = VeinDs.Tables["No_Vein"].Rows[0][1].ToString();
                                                            ////给dataview绑定数据
                                                            //DataView Dv_Excel_Vein = TB_Excel_Vein.DefaultView;
                                                            ////dataview的筛选属性，等于号后面是条件（示例为查看table里面BWART列像BWART1的行）
                                                            //Dv_Excel_Vein.RowFilter = "PlateName = '" + PlateName1 + "'";
                                                            ////查询到的行（>0为有一到多条数据，=0没有查询到数据）
                                                            //if (Dv_Excel_Vein.Count > 0)//横纹板件表中如果有这个板件说明该板件纹理为横纹
                                                            //{
                                                            //    newBRow[string.Format("Vein")] = "2";//横纹
                                                            //}
                                                            //else
                                                            //{
                                                            //    newBRow[string.Format("Vein")] = "1";//竖纹
                                                            //}
                                                            newBRow[string.Format("Vein")] = "1";//竖纹
                                                        }
                                                        Detail++;
                                                    }
                                                }
                                                else if (Detail == 2)
                                                {
                                                    if (Sheet.Cells[i, z].Value != null)
                                                    {
                                                        string Value = null;
                                                        Value = Sheet.Cells[i, z].Value.ToString();
                                                        if (System.Text.RegularExpressions.Regex.IsMatch(Value, @"^[-+]?[0-9]*\.?[0-9]+$"))
                                                        {
                                                            newBRow[string.Format("CutThick")] = Value;
                                                        }
                                                        else
                                                        {
                                                            MessageBox.Show("请检查" + Sheet.Name + "工作表第" + i + "行第" + z + "列数据是否正确");
                                                            IsMath = false;
                                                        }
                                                        //newBRow[string.Format("CutThick")] = Sheet.Cells[i, z].Value;
                                                        Detail++;
                                                    }
                                                    else
                                                    {
                                                        newBRow[string.Format("CutThick")] = Sheet.Cells[i, z].Value;
                                                        Detail++;
                                                    }

                                                }
                                                else if (Detail == 3)
                                                {
                                                    if (Sheet.Cells[i, z].Value != null)
                                                    {
                                                        string Value = null;
                                                        Value = Sheet.Cells[i, z].Value.ToString();
                                                        if (System.Text.RegularExpressions.Regex.IsMatch(Value, @"^[-+]?[0-9]*\.?[0-9]+$"))
                                                        {
                                                            newBRow[string.Format("CutLong")] = Value;
                                                        }
                                                        else
                                                        {
                                                            MessageBox.Show("请检查" + Sheet.Name + "工作表第" + i + "行第" + z + "列数据是否正确");
                                                            IsMath = false;
                                                        }
                                                        //newBRow[string.Format("CutThick")] = Sheet.Cells[i, z].Value;
                                                        Detail++;
                                                    }
                                                    else
                                                    {
                                                        newBRow[string.Format("CutLong")] = Sheet.Cells[i, z].Value;
                                                        Detail++;
                                                    }
                                                    //newBRow[string.Format("CutLong")] = Sheet.Cells[i, z].Value;

                                                    //Detail++;
                                                }
                                                else if (Detail == 4)
                                                {
                                                    if (Sheet.Cells[i, z].Value != null)
                                                    {
                                                        string Value = null;
                                                        Value = Sheet.Cells[i, z].Value.ToString();
                                                        if (System.Text.RegularExpressions.Regex.IsMatch(Value, @"^[-+]?[0-9]*\.?[0-9]+$"))
                                                        {
                                                            newBRow[string.Format("CutWide")] = Value;
                                                        }
                                                        else
                                                        {
                                                            MessageBox.Show("请检查" + Sheet.Name + "工作表第" + i + "行第" + z + "列数据是否正确");
                                                            IsMath = false;
                                                        }
                                                        //newBRow[string.Format("CutThick")] = Sheet.Cells[i, z].Value;
                                                        Detail++;
                                                    }
                                                    else
                                                    {
                                                        newBRow[string.Format("CutWide")] = Sheet.Cells[i, z].Value;
                                                        newBRow[string.Format("Remark")] = Sheet.Cells[i, 41].Value;

                                                        Detail++;
                                                    }
                                                    //newBRow[string.Format("CutWide")] = Sheet.Cells[i, z].Value;
                                                    //Detail++;
                                                }
                                                else
                                                {
                                                    //newBRow[string.Format("CenterMaterials")] = MaterialNote;//芯材
                                                    newBRow[string.Format("CutQty")] = Sheet.Cells[i, z].Value;//下料数量
                                                    newBRow[string.Format("Qty")] = Sheet.Cells[i, z].Value;//成型数量
                                                    //表头
                                                    object Title = Sheet.Cells[1, 1].Value;
                                                    int TheIndex = Title.ToString().LastIndexOf("(");
                                                    Title = Title.ToString().Substring(TheIndex);
                                                    newBRow[string.Format("SealingSide")] = Title;//封边信息
                                                    Detail = 1;
                                                    Xialiaodan_Table.Rows.Add(newBRow.ItemArray);

                                                }
                                                if (IsMath == false)
                                                {
                                                    break;
                                                }
                                            }
                                            Xialiaodan_Table.TableName = "IssueMaterialBills";
                                        }
                                        else if (System.Text.RegularExpressions.Regex.IsMatch(PlateNum1, @"^[-+]?[0-9]*\.?[0-9]+$"))
                                        {
                                            OrderDetailId = Guid.NewGuid().ToString().Substring(0, 12);
                                            newARow[string.Format("OrderDetailId")] = OrderDetailId;

                                            //循环遍历每一列
                                            for (int j = sAColNum; j <= eAColNum; j++)
                                            {
                                                hJRowNum = ExcelTitle2 - 1;
                                                //去除标题行和合计行
                                                if (i == ExcelTitle2 || i == ExcelTitle1 || i == hJRowNum || i == ExcelTitle - 1)
                                                {
                                                    continue;
                                                }
                                                //表头不读了但是要把第一列替换成表头第一列的值
                                                if (j == sAColNum)
                                                {
                                                    //地柜
                                                    if (i < hJRowNum)
                                                    {
                                                        excelValue1 = CStr(Sheet.Cells[sRowNum, sAColNum].Value + CStr(Sheet.Cells[i, j].Value));
                                                    }
                                                    //吊柜
                                                    else if (i > hJRowNum && i < ExcelTitle)
                                                    {
                                                        excelValue1 = CStr(Sheet.Cells[hJRowNum + 1, sAColNum].Value + CStr(Sheet.Cells[i, j].Value));
                                                    }
                                                    else if (i > ExcelTitle)//抽屉、备用条等
                                                    {
                                                        excelValue1 = CStr(Sheet.Cells[ExcelTitle, 1].Value + CStr(Sheet.Cells[i, j].Value));
                                                    }
                                                }
                                                switch (j)
                                                {
                                                    case 1: newARow[string.Format("ProductName")] = excelValue1; break;
                                                    case 2:
                                                        string Wide = CStr(Sheet.Cells[i, j].Value);
                                                        if (System.Text.RegularExpressions.Regex.IsMatch(Wide, @"^[-+]?[0-9]*\.?[0-9]+$"))
                                                        {
                                                            newARow[string.Format("Wide")] = Wide;
                                                        }
                                                        else
                                                        {
                                                            MessageBox.Show("请检查" + Sheet.Name + "工作表第" + i + "行第" + j + "列数据是否正确");
                                                            IsMath = false;
                                                            break;
                                                        }
                                                        break;
                                                    case 3:
                                                        string Deth = CStr(Sheet.Cells[i, j].Value);
                                                        if (System.Text.RegularExpressions.Regex.IsMatch(Deth, @"^[-+]?[0-9]*\.?[0-9]+$"))
                                                        {
                                                            newARow[string.Format("Deth")] = Deth;
                                                        }
                                                        else
                                                        {
                                                            MessageBox.Show("请检查" + Sheet.Name + "工作表第" + i + "行第" + j + "列数据是否正确");
                                                            IsMath = false;
                                                            break;
                                                        }
                                                        break;
                                                    case 4:
                                                        string High = CStr(Sheet.Cells[i, j].Value);
                                                        if (System.Text.RegularExpressions.Regex.IsMatch(High, @"^[-+]?[0-9]*\.?[0-9]+$"))
                                                        {
                                                            newARow[string.Format("High")] = High;
                                                        }
                                                        else
                                                        {
                                                            MessageBox.Show("请检查" + Sheet.Name + "工作表第" + i + "行第" + j + "列数据是否正确");
                                                            IsMath = false;
                                                            break;
                                                        }
                                                        break;
                                                    case 5:
                                                        newARow[string.Format("Qty")] = CStr(Sheet.Cells[i, 5].Value);
                                                        break;
                                                }
                                                newARow[string.Format("ProductOrderId")] = ParentId;
                                                if (IsMath == false)
                                                {
                                                    break;
                                                }
                                            }
                                            //空白行和表头不添加到datatable中
                                            //if (i == ExcelTitle2 || i == ExcelTitle1 || i == hJRowNum || ABlankRow != AColumnsCount)
                                            //{
                                            //    if (excelValue1 == "" || excelValue1 == null && excelValue2 == "" || excelValue2 == null && excelValue3 == "" || excelValue3 == null)
                                            //    {
                                            //        continue;
                                            //    }

                                            //}
                                            GuiTi_Table.Rows.Add(newARow);
                                            GuiTi_Table.TableName = "OrderDetail";
                                            int Detail = 1;//明细分割位

                                            int BColumnsCount = Xialiaodan_Table.Columns.Count;//B区域栏位数

                                            for (int z = sBColNum; z <= eBColNum; z++)
                                            {
                                                if (Detail == 1)
                                                {
                                                    //newBRow = Xialiaodan_Table.NewRow();
                                                    string IssueMaterialBillsId = System.Guid.NewGuid().ToString().Substring(0, 12).ToUpper();
                                                    newBRow[string.Format("IssueMaterialBillsId")] = IssueMaterialBillsId;
                                                    if (OrderDetailId == "" || OrderDetailId == null)
                                                    {
                                                        newBRow[string.Format("OrderDetailId")] = OrderDetailId;
                                                    }
                                                    else
                                                    {
                                                        newBRow[string.Format("OrderDetailId")] = OrderDetailId.ToUpper();
                                                    }
                                                    newBRow[string.Format("ProductOrderId")] = ParentId;

                                                    object PlateQty = Sheet.Cells[i, z + 4].Value;
                                                    if (PlateQty == null || PlateQty.ToString() == "0")
                                                    {
                                                        PlateQty = "";
                                                    }
                                                    //else
                                                    //{
                                                    //    PlateQty = Sheet.Cells[i, z + 4].Value.ToString();
                                                    //}
                                                    if (PlateQty == null || PlateQty.ToString() == "")
                                                    {
                                                        z = z + 4;
                                                        continue;
                                                    }
                                                    else
                                                    {
                                                        object PlateName1 = Sheet.Cells[i, z].Value;
                                                        newBRow[string.Format("PlateName")] = PlateName1;
                                                        object MaterialNote1 = Sheet.Cells[2, 13].Value;
                                                        Texture = MaterialNote1.ToString();
                                                        newBRow[string.Format("MaterialNote")] = MaterialNote1;//材质
                                                        //Vein纹理
                                                        //将dataset的表填充到datatable
                                                        DataTable TB_No_Vein = VeinDs.Tables["No_Vein"];
                                                        //指定的字符串变量，根据这个变量查询table是否包含这条数据
                                                        //String BWART1 = VeinDs.Tables["No_Vein"].Rows[0][1].ToString();
                                                        //给dataview绑定数据
                                                        DataView Dv_No_Vein = TB_No_Vein.DefaultView;
                                                        //dataview的筛选属性，等于号后面是条件（示例为查看table里面BWART列像BWART1的行）
                                                        Dv_No_Vein.RowFilter = "PlateType = '" + MaterialNote1 + "'";
                                                        //查询到的行（>0为有一到多条数据，=0没有查询到数据）
                                                        if (Dv_No_Vein.Count > 0)//如果材质表中包含这个材质说明此材质无纹理
                                                        {
                                                            newBRow[string.Format("Vein")] = "0";//无纹理
                                                        }
                                                        else
                                                        {
                                                            ////将dataset的表填充到datatable
                                                            //DataTable TB_Excel_Vein = VeinDs.Tables["Excel_Vein"];
                                                            ////指定的字符串变量，根据这个变量查询table是否包含这条数据
                                                            ////String BWART1 = VeinDs.Tables["No_Vein"].Rows[0][1].ToString();
                                                            ////给dataview绑定数据
                                                            //DataView Dv_Excel_Vein = TB_Excel_Vein.DefaultView;
                                                            ////dataview的筛选属性，等于号后面是条件（示例为查看table里面BWART列像BWART1的行）
                                                            //Dv_Excel_Vein.RowFilter = "PlateName = '" + PlateName1 + "'";
                                                            ////查询到的行（>0为有一到多条数据，=0没有查询到数据）
                                                            //if (Dv_Excel_Vein.Count > 0)//横纹板件表中如果有这个板件说明该板件纹理为横纹
                                                            //{
                                                            //    newBRow[string.Format("Vein")] = "2";//横纹
                                                            //}
                                                            //else
                                                            //{
                                                            //    newBRow[string.Format("Vein")] = "1";//竖纹
                                                            //}
                                                            newBRow[string.Format("Vein")] = "1";//竖纹
                                                        }
                                                        Detail++;
                                                    }
                                                }
                                                else if (Detail == 2)
                                                {
                                                    if (Sheet.Cells[i, z].Value != null)
                                                    {
                                                        string Value = null;
                                                        Value = Sheet.Cells[i, z].Value.ToString();
                                                        if (System.Text.RegularExpressions.Regex.IsMatch(Value, @"^[-+]?[0-9]*\.?[0-9]+$"))
                                                        {
                                                            newBRow[string.Format("CutThick")] = Value;
                                                        }
                                                        else
                                                        {
                                                            MessageBox.Show("请检查" + Sheet.Name + "工作表第" + i + "行第" + z + "列数据是否正确");
                                                            IsMath = false;
                                                        }
                                                        //newBRow[string.Format("CutThick")] = Sheet.Cells[i, z].Value;
                                                        Detail++;
                                                    }
                                                    else
                                                    {
                                                        newBRow[string.Format("CutThick")] = Sheet.Cells[i, z].Value;
                                                        Detail++;
                                                    }

                                                }
                                                else if (Detail == 3)
                                                {
                                                    if (Sheet.Cells[i, z].Value != null)
                                                    {
                                                        string Value = null;
                                                        Value = Sheet.Cells[i, z].Value.ToString();
                                                        if (System.Text.RegularExpressions.Regex.IsMatch(Value, @"^[-+]?[0-9]*\.?[0-9]+$"))
                                                        {
                                                            newBRow[string.Format("CutLong")] = Value;
                                                        }
                                                        else
                                                        {
                                                            MessageBox.Show("请检查" + Sheet.Name + "工作表第" + i + "行第" + z + "列数据是否正确");
                                                            IsMath = false;
                                                        }
                                                        //newBRow[string.Format("CutThick")] = Sheet.Cells[i, z].Value;
                                                        Detail++;
                                                    }
                                                    else
                                                    {
                                                        newBRow[string.Format("CutLong")] = Sheet.Cells[i, z].Value;
                                                        Detail++;
                                                    }
                                                    //newBRow[string.Format("CutLong")] = Sheet.Cells[i, z].Value;

                                                    //Detail++;
                                                }
                                                else if (Detail == 4)
                                                {
                                                    if (Sheet.Cells[i, z].Value != null)
                                                    {
                                                        string Value = null;
                                                        Value = Sheet.Cells[i, z].Value.ToString();
                                                        if (System.Text.RegularExpressions.Regex.IsMatch(Value, @"^[-+]?[0-9]*\.?[0-9]+$"))
                                                        {
                                                            newBRow[string.Format("CutWide")] = Value;
                                                        }
                                                        else
                                                        {
                                                            MessageBox.Show("请检查" + Sheet.Name + "工作表第" + i + "行第" + z + "列数据是否正确");
                                                            IsMath = false;
                                                        }
                                                        //newBRow[string.Format("CutThick")] = Sheet.Cells[i, z].Value;
                                                        Detail++;
                                                    }
                                                    else
                                                    {
                                                        newBRow[string.Format("CutWide")] = Sheet.Cells[i, z].Value;
                                                        newBRow[string.Format("Remark")] = Sheet.Cells[i, 41].Value;

                                                        Detail++;
                                                    }
                                                    //newBRow[string.Format("CutWide")] = Sheet.Cells[i, z].Value;
                                                    //Detail++;
                                                }
                                                else
                                                {
                                                    //newBRow[string.Format("CenterMaterials")] = MaterialNote;//芯材
                                                    newBRow[string.Format("CutQty")] = Sheet.Cells[i, z].Value;//下料数量
                                                    newBRow[string.Format("Qty")] = Sheet.Cells[i, z].Value;//成型数量
                                                    //表头
                                                    object Title = Sheet.Cells[1, 1].Value;
                                                    int TheIndex = Title.ToString().LastIndexOf("(");
                                                    Title = Title.ToString().Substring(TheIndex);
                                                    newBRow[string.Format("SealingSide")] = Title;//封边信息
                                                    Detail = 1;
                                                    Xialiaodan_Table.Rows.Add(newBRow.ItemArray);

                                                }
                                                if (IsMath == false)
                                                {
                                                    break;
                                                }
                                            }
                                            //Xialiaodan_Table.TableName = "IssueMaterialBills";
                                        }
                                    }
                                    //excelValue1 = CStr(Sheet.Cells[i, 5].Value);
                                    //excelValue2 = CStr(Sheet.Cells[i, 3].Value);
                                    //excelValue3 = CStr(Sheet.Cells[i, 4].Value);
                                    //if (excelValue1 == "" || excelValue1 == null && excelValue2 == "" || excelValue2 == null && excelValue3 == "" || excelValue3 == null)
                                    //{

                                    //}
                                }
                                Xialiaodan_Table.TableName = "IssueMaterialBills2";
                                if (GuiTi_Table.Rows.Count > 0)
                                {
                                    DS.Tables.Add(GuiTi_Table);
                                }
                                if (Xialiaodan_Table.Rows.Count > 0)
                                {
                                    DS.Tables.Add(Xialiaodan_Table);
                                }
                            }
                        }
                        //GuiTi_Table.Clear();
                        GuiTi_Table.Dispose();
                        //Xialiaodan_Table.Clear();
                        Xialiaodan_Table.Dispose();
                    }
                }
                catch (Exception ex)
                {
                    throw ex;
                }
                #endregion
                //铝材玻璃单
                #region
                //铝材玻璃单读取
                ExcelWorksheet Sheet2 = null;//数据所在Sheet
                Sheet2 = pck.Workbook.Worksheets["铝材玻璃单"];
                if (Sheet2 != null)
                {
                    if (Sheet2.Hidden.ToString() == "Visible")
                    {
                        if (Sheet2.Name == "铝材玻璃单")
                        {
                            int maxColumnNum2 = Sheet2.Dimension.End.Column;//最大列
                            int minColumnNum2 = Sheet2.Dimension.Start.Column;//最小列
                            int minRowNum2 = Sheet2.Dimension.Start.Row;//最小行
                            int maxRowNum2 = Sheet2.Dimension.End.Row;//最大行
                            int sRowNum2 = 5;//开始行
                            int eRowNum2 = 0;//结束行
                            int sAColNum2 = 1;//区域A的开始栏位
                            int eAColNum2 = 7;//区域A的结束栏位
                            int sBColNum2 = 8;//区域B的开始栏位
                            int eBColNum2 = 12;//区域B的结束栏位

                            string ExcelNameValue = "";
                            //获取结束行
                            for (int d = sRowNum2; d < maxRowNum2; d++)
                            {
                                if ((CStr(Sheet2.Cells[d, 1].Value)).Trim() == "对应序号")
                                {
                                    eRowNum2 = d - 1;
                                    break;
                                }
                            }
                            //铝材玻璃单左侧读取
                            for (int i = sRowNum2; i < eRowNum2; i++)
                            {
                                string GlassIssueMaterialBillsId = Guid.NewGuid().ToString().Substring(0, 12);
                                DataRow newARow = LvcaiBoli_Table.NewRow();
                                ExcelNameValue = CStr(Sheet2.Cells[i, 5].Value);
                                if ((ExcelNameValue == "") || (ExcelNameValue == null))
                                {
                                    continue;
                                }
                                for (int j = sAColNum2; j <= eAColNum2; j++)
                                {
                                    newARow["GlassIssueMaterialBillsId"] = GlassIssueMaterialBillsId;
                                    newARow["ProductOrderId"] = ParentId;

                                    ExcelRange Rang = Sheet2.Cells[i, j];
                                    object objectCellValue = Sheet2.GetValue(i, j);//单元格数据
                                    string CellValue = objectCellValue != null ? objectCellValue.ToString().Trim() : "";
                                    if (Rang.Merge)
                                    {
                                        CellValue = GetMergeValue(Sheet2, i, j);

                                    }
                                    switch (j)
                                    {
                                        case 2: newARow["MaterialName"] = CellValue; break;
                                        case 3:
                                            ExcelRange Rang2 = Sheet2.Cells[i, j];
                                            if (Rang2.Merge)
                                            {
                                                newARow["StandardsName"] = CellValue;
                                            }
                                            else
                                            {
                                                object LeftString = Sheet2.GetValue(i, j);
                                                object RightString = Sheet2.GetValue(i, j + 1);
                                                if (RightString == null && LeftString != null)
                                                {
                                                    newARow["StandardsName"] = LeftString.ToString();
                                                }
                                                else
                                                {
                                                    newARow["StandardsName"] = LeftString.ToString() + "*" + RightString.ToString();
                                                }
                                            }
                                            break;
                                        case 5:
                                            if (CellValue == "" || CellValue == null)
                                            {
                                                newARow["Qty"] = 0;
                                            }
                                            else
                                            {
                                                newARow["Qty"] = CellValue;
                                            }
                                            break;
                                        case 6: newARow["Unit"] = CellValue; break;
                                        case 7: newARow["Remark"] = CellValue; break;
                                    }
                                }
                                LvcaiBoli_Table.Rows.Add(newARow);
                            }
                            //将铝材玻璃单左侧部分放到DS中
                            LvcaiBoli_Table.TableName = "GlassIssueMaterialBills";
                            //DS.Tables.Add(LvcaiBoli_Table);

                            //铝材玻璃单右侧读取
                            for (int i = sRowNum2; i <= eRowNum2; i++)
                            {
                                string GlassIssueMaterialBillsId = Guid.NewGuid().ToString().Substring(0, 12);
                                DataRow newARow = LvcaiBoli_Table.NewRow();
                                ExcelNameValue = CStr(Sheet2.Cells[i, 11].Value);

                                //string ExcelValue1 = Sheet.GetValue(i, 3).ToString();
                                if ((ExcelNameValue == "") || (ExcelNameValue == null))
                                {
                                    continue;
                                }
                                for (int j = sBColNum2; j <= eBColNum2; j++)
                                {
                                    newARow["GlassIssueMaterialBillsId"] = GlassIssueMaterialBillsId;
                                    newARow["ProductOrderId"] = ParentId;

                                    ExcelRange Rang = Sheet2.Cells[i, j];
                                    object objectCellValue = Sheet2.GetValue(i, j);//单元格数据
                                    string CellValue = objectCellValue != null ? objectCellValue.ToString().Trim() : "";
                                    if (Rang.Merge)
                                    {
                                        CellValue = GetMergeValue(Sheet2, i, j);

                                    }
                                    switch (j)
                                    {
                                        case 9: newARow["MaterialName"] = CellValue; break;
                                        case 10: newARow["StandardsName"] = CellValue; break;
                                        case 11:
                                            if (CellValue == "" || CellValue == null)
                                            {
                                                CellValue = "0";
                                                Convert.ToSingle(CellValue);
                                                newARow["Qty"] = CellValue;
                                            }
                                            else
                                            {
                                                if (System.Text.RegularExpressions.Regex.IsMatch(CellValue, @"^[-+]?[0-9]*\.?[0-9]+$"))
                                                {
                                                    newARow["Qty"] = CellValue;
                                                }
                                                else
                                                {
                                                    MessageBox.Show("请检查" + Sheet2.Name + "工作表第" + i + "行第" + j + "列数据是否正确");
                                                    IsMath = false;
                                                }
                                            }
                                            break;
                                        case 12: newARow["Unit"] = CellValue; break;
                                    }
                                }
                                if (IsMath == false)
                                {
                                    break;
                                }
                                LvcaiBoli_Table.Rows.Add(newARow);
                            }
                            //将铝材玻璃单右侧部分数据放到DS中
                        }
                        if (LvcaiBoli_Table.Rows.Count > 0)
                        {
                            DS.Tables.Add(LvcaiBoli_Table);
                        }
                        //LvcaiBoli_Table.Clear();
                        LvcaiBoli_Table.Dispose();
                    }
                }

                #endregion
                //领料单
                #region
                ExcelWorksheet Sheet1 = null;//数据所在Sheet
                Sheet1 = pck.Workbook.Worksheets["领料单"];
                try
                {
                    if (Sheet1 != null)
                    {
                        if (Sheet1.Hidden.ToString() == "Visible")
                        {
                            if (Sheet1.Name == "领料单")
                            {
                                int maxColumnNum1 = Sheet1.Dimension.End.Column;//最大列
                                int minColumnNum1 = Sheet1.Dimension.Start.Column;//最小列
                                int minRowNum1 = Sheet1.Dimension.Start.Row;//最小行
                                int maxRowNum1 = Sheet1.Dimension.End.Row;//最大行
                                int sRowNum1 = 5;//开始行
                                int eRowNum1 = 0;//结束行
                                int sAColNum1 = 1;//区域A的开始栏位
                                int eAColNum1 = 6;//区域A的结束栏位
                                int ZhuangXiangEndId = 0;//装箱清单结束行
                                bool IsNumber = true;
                                string ExcelValue2 = "";

                                //获取领料单结束行
                                for (int d = sRowNum1; d < maxRowNum1; d++)
                                {
                                    string Identifier = CStr(Sheet1.Cells[d, 1].Value);
                                    if (Identifier.Trim() == "拆解员：")
                                    {
                                        eRowNum1 = d - 1;
                                        break;
                                    }
                                }
                                //获取装箱单结束行
                                //for (int d = eRowNum1 + 7; d < maxRowNum1; d++)
                                //{
                                //    if (CStr(Sheet1.Cells[d, 1].Value) == "1个UN30+尼龙胀塞8*60 1个+3.5*12自攻钉 3个")
                                //    {
                                //        ZhuangXiangEndId = d - 2;
                                //        break;
                                //    }
                                //}
                                #region
                                ////装箱单数据读取
                                //if (IsNumber == true)
                                //{
                                //    //DateTime time1 = DateTime.Now;
                                //    DataTable PackingListDateTable = new DataTable();
                                //    PackingListDateTable.Columns.Add(string.Format("MaterialDescription"), Type.GetType("System.String"));
                                //    PackingListDateTable.Columns.Add(string.Format("ProductName"), Type.GetType("System.String"));
                                //    DataRow PackingListRow = PackingListDateTable.NewRow();
                                //    for (int i = (eRowNum1 + 7); i <= ZhuangXiangEndId; i++)
                                //    {
                                //        string MaterialDescription = CStr(Sheet1.Cells[i, 3].Value);
                                //        if (MaterialDescription == null || MaterialDescription == "" || MaterialDescription == "物料描述")
                                //        {
                                //            continue;
                                //        }
                                //        else
                                //        {
                                //            PackingListRow["MaterialDescription"] = MaterialDescription;
                                //            PackingListDateTable.Rows.Add(PackingListRow.ItemArray);
                                //        }

                                //    }
                                //    SqlConnection con = new SqlConnection("Data Source=192.168.124.72;Initial Catalog=OrBitXI;User ID=sa;Password=admin@2017");

                                //    SqlCommand com = new SqlCommand();
                                //    con.Open();
                                //    com.CommandText = "Pro_GetproductName";
                                //    com.Connection = con;
                                //    com.CommandType = CommandType.StoredProcedure;
                                //    SqlParameter paremeter = new SqlParameter("@Pro_GetproductName", SqlDbType.Structured)
                                //    {
                                //        Value = PackingListDateTable
                                //    };
                                //    com.Parameters.Add(paremeter);
                                //    com.ExecuteNonQuery();
                                //    DataTable GetProductName = new DataTable();
                                //    com.Parameters.Add(new SqlParameter("@return", SqlDbType.Int));
                                //    com.Parameters["@return"].Direction = ParameterDirection.ReturnValue;
                                //    SqlDataReader reader = com.ExecuteReader();
                                //    GetProductName.Load(reader);
                                //    con.Close();
                                //    //DateTime time2 = DateTime.Now;
                                //    //TimeSpan time3 = time2 - time1;
                                //    //MessageBox.Show(time3.ToString());
                                //    string Requisition_Type = CStr(Sheet1.Cells[eRowNum1 + 2, 1].Value);
                                //    for (int i = (eRowNum1 + 7); i < ZhuangXiangEndId; i++)
                                //    {
                                //        DataRow newARow = Lingliaodan_Table.NewRow();
                                //        string MaterialDescription = CStr(Sheet1.Cells[i, 3].Value);
                                //        newARow["GetMaterialbillsId"] = System.Guid.NewGuid().ToString().Substring(0, 12).ToUpper();

                                //        ExcelValue2 = CStr(Sheet1.Cells[i, 4].Value);

                                //        //string ExcelValue1 = Sheet.GetValue(i, 3).ToString();
                                //        if ((ExcelValue2 == "") || (ExcelValue2 == null))
                                //        {
                                //            continue;
                                //        }
                                //        else
                                //        {
                                //            if (System.Text.RegularExpressions.Regex.IsMatch(ExcelValue2, @"^[-+]?[0-9]*\.?[0-9]+$"))
                                //            {
                                //                for (int j = sAColNum1; j <= eAColNum1; j++)
                                //                {
                                //                    newARow["ProductOrderId"] = ParentId;
                                //                    newARow["Requisition_Type"] = Requisition_Type.Substring(0, 4);
                                //                    ExcelRange Rang = Sheet1.Cells[i, j];
                                //                    object objectCellValue = Sheet1.GetValue(i, j);//单元格数据
                                //                    string CellValue = objectCellValue != null ? objectCellValue.ToString().Trim() : "";
                                //                    if (Rang.Merge)
                                //                    {
                                //                        CellValue = GetMergeValue(Sheet1, i, j);

                                //                    }
                                //                    switch (j)
                                //                    {
                                //                        case 1: newARow["CateGory"] = CellValue; break;
                                //                        case 2:
                                //                            if (System.Text.RegularExpressions.Regex.IsMatch(CellValue, @"^[-+]?[0-9]*\.?[0-9]+$"))
                                //                            {
                                //                                continue;
                                //                            }
                                //                            else
                                //                            {
                                //                                newARow["MaterialType"] = CellValue;
                                //                            }
                                //                            break;
                                //                        case 3:
                                //                            for (int q = 0; q < GetProductName.Rows.Count; q++)
                                //                            {
                                //                                string MaterialDescriptionSQL = GetProductName.Rows[q]["ProductDescription"].ToString();
                                //                                string ProductName = GetProductName.Rows[q]["ProductName"].ToString();
                                //                                if (MaterialDescriptionSQL == MaterialDescription)
                                //                                {
                                //                                    if (ProductName == null || ProductName == "")
                                //                                    {
                                //                                        NullCount++;
                                //                                    }
                                //                                    newARow["ProductName"] = ProductName;
                                //                                    newARow["ProductDes"] = MaterialDescriptionSQL;
                                //                                    break;
                                //                                }
                                //                            }
                                //                            break;
                                //                        case 4:
                                //                            if (CellValue == "" || CellValue == null)
                                //                            {
                                //                                CellValue = "0";
                                //                                Convert.ToSingle(CellValue);
                                //                                newARow["Qty"] = CellValue;
                                //                            }
                                //                            else
                                //                            {
                                //                                if (System.Text.RegularExpressions.Regex.IsMatch(CellValue, @"^[-+]?[0-9]*\.?[0-9]+$"))
                                //                                {
                                //                                    Decimal Qty = Math.Round(decimal.Parse(CellValue), 3, MidpointRounding.AwayFromZero);
                                //                                    newARow["Qty"] = Qty;
                                //                                }
                                //                                else
                                //                                {
                                //                                    MessageBox.Show("请检查" + Sheet1.Name + "工作表第" + i + "行第" + j + "列数据是否正确！！！");
                                //                                    IsNumber = false;
                                //                                }
                                //                            }
                                //                            break;
                                //                        case 5: newARow["Unit"] = CellValue; break;
                                //                        case 6: newARow["PackingConfirmed"] = CellValue; break;
                                //                    }
                                //                }
                                //                if (IsNumber == false)
                                //                {
                                //                    break;
                                //                }
                                //                Lingliaodan_Table.Rows.Add(newARow);
                                //            }
                                //        }
                                //    }
                                //    Lingliaodan_Table.TableName = "GetMaterialBills";
                                //    //DS.Tables.Add(Lingliaodan_Table);
                                #endregion

                                SqlConnection con = new SqlConnection("Data Source=192.168.124.72;Initial Catalog=OrBitXI;User ID=sa;Password=admin@2017");
                                DataTable MaterialTable = new DataTable();
                                MaterialTable.Columns.Add(string.Format("MaterialDescription"), Type.GetType("System.String"));
                                MaterialTable.Columns.Add(string.Format("ProductName"), Type.GetType("System.String"));
                                DataRow MaterialTableRow = MaterialTable.NewRow();
                                //领料单读取
                                for (int i = sRowNum1; i <= eRowNum1; i++)
                                {
                                    string Qty = CStr(Sheet1.Cells[i, 4].Value);
                                    if (Qty == null || Qty == "" || Convert.ToSingle(Qty) <= 0)
                                    {
                                        continue;
                                    }
                                    else
                                    {
                                        string MaterialDescription = CStr(Sheet1.Cells[i, 3].Value);
                                        MaterialTableRow["MaterialDescription"] = MaterialDescription;
                                        MaterialTable.Rows.Add(MaterialTableRow.ItemArray);
                                    }
                                }
                                SqlCommand cmd = new SqlCommand();
                                con.Open();
                                cmd.CommandText = "Pro_GetproductName";
                                cmd.Connection = con;
                                cmd.CommandType = CommandType.StoredProcedure;
                                SqlParameter parm = new SqlParameter("@Pro_GetproductName", SqlDbType.Structured)
                                {
                                    Value = MaterialTable
                                };
                                cmd.Parameters.Add(parm);
                                cmd.ExecuteNonQuery();
                                DataTable GetMaterialBillsTable = new DataTable();
                                cmd.Parameters.Add(new SqlParameter("@return", SqlDbType.Int));
                                cmd.Parameters["@return"].Direction = ParameterDirection.ReturnValue;
                                SqlDataReader Datereader = cmd.ExecuteReader();
                                GetMaterialBillsTable.Load(Datereader);
                                string Requisition_Type1 = CStr(Sheet1.Cells[1, 1].Value);
                                MaterialParentType = Requisition_Type1.Substring(11);
                                //领料单数据读取sRowNum
                                for (int i = sRowNum1; i <= eRowNum1; i++)
                                {
                                    DataRow newARow = Lingliaodan_Table.NewRow();
                                    string MaterialDescription = CStr(Sheet1.Cells[i, 3].Value);
                                    newARow["GetMaterialbillsId"] = System.Guid.NewGuid().ToString().Substring(0, 12).ToUpper();
                                    string ProductDescription = CStr(Sheet1.Cells[i, 3].Value);
                                    ExcelValue2 = CStr(Sheet1.Cells[i, 4].Value);
                                    //string ExcelValue1 = Sheet.GetValue(i, 3).ToString();
                                    if ((ExcelValue2 == "") || (ExcelValue2 == null))
                                    {
                                        continue;
                                    }
                                    else
                                    {
                                        if (System.Text.RegularExpressions.Regex.IsMatch(ExcelValue2, @"^[-+]?[0-9]*\.?[0-9]+$"))
                                        {
                                            if (Convert.ToSingle(ExcelValue2) > 0)
                                            {
                                                for (int j = sAColNum1; j <= eAColNum1; j++)
                                                {
                                                    newARow["ProductOrderId"] = ParentId;
                                                    newARow["Requisition_Type"] = Requisition_Type1.Substring(0, 9);
                                                    newARow["CateGory"] = Requisition_Type1.Substring(3, 2);
                                                    newARow["FaceConduct"] = Requisition_Type1.Substring(1, 2);
                                                    newARow["Texture"] = Texture;//材质
                                                    ExcelRange Rang = Sheet1.Cells[i, j];
                                                    object objectCellValue = Sheet1.GetValue(i, j);//单元格数据
                                                    string CellValue = objectCellValue != null ? objectCellValue.ToString().Trim() : "";
                                                    if (Rang.Merge)
                                                    {
                                                        CellValue = GetMergeValue(Sheet1, i, j);

                                                    } 
                                                    switch (j)
                                                    {
                                                        case 1: newARow["MaterialType"] = CellValue; break;
                                                        //case 2:
                                                        //    if (System.Text.RegularExpressions.Regex.IsMatch(CellValue, @"^[-+]?[0-9]*\.?[0-9]+$"))
                                                        //    {
                                                        //        continue;
                                                        //    }
                                                        //    else
                                                        //    {
                                                        //        newARow["MaterialType"] = CellValue;
                                                        //    }
                                                        //    break;
                                                        case 3:
                                                            for (int q = 0; q < GetMaterialBillsTable.Rows.Count; q++)
                                                            {
                                                                string SQLproductDescription = GetMaterialBillsTable.Rows[q]["ProductDescription"].ToString();
                                                                string ProductName = GetMaterialBillsTable.Rows[q]["ProductName"].ToString();
                                                                if (SQLproductDescription == ProductDescription)
                                                                {
                                                                    if (ProductName == null || ProductName == "")
                                                                    {
                                                                        NullCount++;
                                                                    }
                                                                    newARow["ProductName"] = ProductName;
                                                                    newARow["ProductDes"] = SQLproductDescription;
                                                                    break;
                                                                }
                                                            }
                                                            break;
                                                        case 4:
                                                            if (CellValue == "" || CellValue == null)
                                                            {
                                                                CellValue = "0";
                                                                Convert.ToSingle(CellValue);
                                                                newARow["Qty"] = CellValue;
                                                            }
                                                            else
                                                            {
                                                                if (System.Text.RegularExpressions.Regex.IsMatch(CellValue, @"^[-+]?[0-9]*\.?[0-9]+$"))
                                                                {
                                                                    newARow["Qty"] = CellValue;
                                                                }
                                                                else
                                                                {
                                                                    MessageBox.Show("请检查第" + i + "行第" + j + "列数据是否正确！！！");
                                                                    IsNumber = false;
                                                                }
                                                            }
                                                            break;
                                                        case 5: newARow["Unit"] = CellValue; break;
                                                        case 6: newARow["PackingConfirmed"] = CellValue; break;
                                                    }
                                                }
                                                if (IsNumber == false)
                                                {
                                                    break;
                                                }
                                                Lingliaodan_Table.Rows.Add(newARow);
                                            }
                                        }

                                    }
                                }
                                Lingliaodan_Table.TableName = "GetMaterialBills8";
                                if (Lingliaodan_Table.Rows.Count > 0)
                                {
                                    DS.Tables.Add(Lingliaodan_Table);
                                }
                                //GetProductName.Dispose();
                                GetMaterialBillsTable.Clear();
                                GetMaterialBillsTable.Dispose();
                                //Lingliaodan_Table.Clear();
                                Lingliaodan_Table.Dispose();
                                Texture = "";
                                MaterialTable.Clear();
                                MaterialTable.Dispose();
                                //}
                            }
                        }
                    }
                }
                catch (Exception ex)
                {
                    throw ex;
                }
                #endregion
                //速美包装
                #region
                ExcelWorksheet Sheet5 = null;//数据所在Sheet
                Sheet5 = pck.Workbook.Worksheets["速美包装"];
                if (Sheet5 != null)
                {
                    if (Sheet5.Hidden.ToString() == "Visible")
                    {
                        int maxColumnNum = Sheet5.Dimension.End.Column;//最大列
                        int minColumnNum = Sheet5.Dimension.Start.Column;//最小列
                        int minRowNum = Sheet5.Dimension.Start.Row;//最小行
                        int maxRowNum = Sheet5.Dimension.End.Row;//最大行
                        int sRowNum = 5;//开始行
                        int eRowNum = 0;//结束行
                        int sAColNum = 1;//区域A的开始栏位
                        int eAColNum = 11;//区域A的结束栏位

                        string ExcelValue2 = "";
                        int[] list = new int[maxRowNum + 1];
                        for (int d = 5; d <= maxRowNum; d++)
                        {
                            string Num1Value = CStr(Sheet5.Cells[d, 1].Value);
                            if (Num1Value.Trim() == "拆解人" || Num1Value.Trim() == "序号" || Num1Value.Trim() == "三、整件发货部分（功能柜）" || Num1Value.Trim() == "1.整件包装---可使用对口箱的柜体（抽屉柜、拉篮柜）（备注：所有速美整柜包装需增加蜂窝纸板及配一根同柜体材质拉带）" || Num1Value.Trim() == "2.整件包装--所有无法使用对口箱的所有柜体（备注：所有速美整柜包装需增加蜂窝纸板及配一根同柜体材质拉带）" || Num1Value.Trim() == "散件包装的柜体---可使用一片成型包装箱的明细" || Num1Value.Trim() == "注：以上包装箱适用地柜560深、720高散件柜体；吊柜300深、720高柜体；高柜560深2160高的散件柜体（除特定两种柜形外），外地所有玻璃层板单独包装" || Num1Value.Trim() == "散件包装的柜体--所有无法使用一片成型包装箱的柜体散件（玻璃层板单独包装）" || Num1Value.Trim() == "散件包装柜体的背板" || Num1Value.Trim() == "二、散件门板部分" || Num1Value.Trim() == "1.散件包装的门板---可使用一片成型包装箱的明细" || Num1Value.Trim() == "2.散件包装的门板--所有无法使用一片成型包装箱的门板散件" || Num1Value.Trim() == "四、装饰部件部分（本地、外地通用）")
                            {
                                eRowNum = maxRowNum;
                                //list[d] = d;
                                if (Num1Value == "序号" || Num1Value.Trim() == "三、整件发货部分（功能柜）" || Num1Value.Trim() == "1.整件包装---可使用对口箱的柜体（抽屉柜、拉篮柜）（备注：所有速美整柜包装需增加蜂窝纸板及配一根同柜体材质拉带）" || Num1Value.Trim() == "2.整件包装--所有无法使用对口箱的所有柜体（备注：所有速美整柜包装需增加蜂窝纸板及配一根同柜体材质拉带）" || Num1Value.Trim() == "散件包装的柜体---可使用一片成型包装箱的明细" || Num1Value.Trim() == "注：以上包装箱适用地柜560深、720高散件柜体；吊柜300深、720高柜体；高柜560深2160高的散件柜体（除特定两种柜形外），外地所有玻璃层板单独包装" || Num1Value.Trim() == "散件包装的柜体--所有无法使用一片成型包装箱的柜体散件（玻璃层板单独包装）" || Num1Value.Trim() == "散件包装柜体的背板" || Num1Value.Trim() == "二、散件门板部分" || Num1Value.Trim() == "1.散件包装的门板---可使用一片成型包装箱的明细" || Num1Value.Trim() == "2.散件包装的门板--所有无法使用一片成型包装箱的门板散件" || Num1Value.Trim() == "四、装饰部件部分（本地、外地通用）")
                                {
                                    list[d] = d;
                                }
                                continue;
                            }
                        }
                        //ExcelValue2 = CStr(Sheet.Cells[11, 9].Value);
                        //DataTable Packing_ListTable = Packing_List();
                        //A6包装数据读取
                        for (int i = sRowNum; i <= eRowNum; i++)
                        {
                            DataRow newARow = SuMei_Table.NewRow();
                            ExcelValue2 = CStr(Sheet5.Cells[i, 9].Value);

                            ExcelRange Range = Sheet5.Cells[i, 5];
                            object objectCellNumber = Sheet5.GetValue(i, 5);//单元格数据
                            string CellNumber = objectCellNumber != null ? objectCellNumber.ToString().Trim() : "";
                            if (Range.Merge)
                            {
                                CellNumber = GetMergeValue(Sheet5, i, 5);
                            }

                            if (CellNumber == "" || CellNumber == null)
                            {
                                continue;
                            }
                            if (System.Text.RegularExpressions.Regex.IsMatch(ExcelValue2.ToString(), @"^[-+]?[0-9]*\.?[0-9]+$") || ExcelValue2.Trim() == "车间调配")
                            {
                                decimal Value = 0;
                                int Value2 = 0;
                                if (ExcelValue2 == "车间调配")
                                {

                                }
                                else
                                {
                                    Value = decimal.Parse(ExcelValue2);
                                    Value2 = Convert.ToInt32(Value);
                                }
                                if (Value > 0 || ExcelValue2 == "车间调配")
                                {
                                    for (int j = sAColNum; j <= eAColNum; j++)
                                    {
                                        string PackagingId = System.Guid.NewGuid().ToString().Substring(0, 12).ToUpper();
                                        newARow["PackagingId"] = PackagingId;
                                        newARow["ProductOrderId"] = ParentId;
                                        //string TheDeliveryCateGory = CStr(Sheet.Cells[i, 1].Value).Trim();
                                        ExcelRange Rang = Sheet5.Cells[i, j];
                                        object objectCellValue = Sheet5.GetValue(i, j);//单元格数据
                                        string CellValue = objectCellValue != null ? objectCellValue.ToString().Trim() : "";
                                        if (Rang.Merge)
                                        {
                                            CellValue = GetMergeValue(Sheet5, i, j);
                                        }


                                        switch (j)
                                        {
                                            case 1: newARow["PackingNumber"] = CellValue; break;
                                            case 2:

                                                newARow["Wide"] = CellValue;
                                                break;
                                            case 3:

                                                newARow["High"] = CellValue;
                                                break;
                                            case 4:

                                                newARow["Depth"] = CellValue;
                                                break;
                                            case 5: newARow["Cell"] = CellValue; break;
                                            case 6: newARow["CabinetType"] = CellValue; break;
                                            case 7: newARow["NameOfPackagingMaterials"] = CellValue; break;
                                            case 8:
                                                if (CellValue == "" || CellValue == null)
                                                {
                                                    newARow["MaterialCode"] = "null";
                                                }
                                                else
                                                {
                                                    newARow["MaterialCode"] = CellValue;
                                                }
                                                break;

                                            case 9:
                                                if (System.Text.RegularExpressions.Regex.IsMatch(CellValue, @"^[-+]?[0-9]*\.?[0-9]+$"))
                                                {
                                                    decimal QtyValue = Convert.ToDecimal(CellValue);
                                                    Math.Round(QtyValue, 3, MidpointRounding.AwayFromZero);
                                                    newARow["Qty"] = QtyValue;
                                                }
                                                else
                                                {
                                                    newARow["PackingQuantity"] = CellValue;
                                                }
                                                break;
                                            case 10:
                                                if (CellValue == "车间调配")
                                                {
                                                    newARow["Unit"] = null;
                                                }
                                                else
                                                {
                                                    newARow["Unit"] = CellValue;
                                                }
                                                break;
                                            case 11: newARow["Remark"] = CellValue; break;
                                        }
                                        int TheDeliveryCateGoryId = 0;
                                        int TheDeliveryCateGoryId1 = 0;
                                        int TheDeliveryCateGoryId2 = 0;
                                        string TheDeliveryCateGory = "";
                                        string PackingGroup = "";
                                        for (int q = 5; q <= eRowNum; q++)
                                        {
                                            if (list[q] == 0 || CStr(Sheet5.Cells[list[q], 1].Value).Trim() == "序号" || CStr(Sheet5.Cells[list[q], 1].Value).Trim() == "注：以上包装箱适用地柜560深、720高散件柜体；吊柜300深、720高柜体；高柜560深2160高的散件柜体（除特定两种柜形外），外地所有玻璃层板单独包装")
                                            {
                                                continue;
                                            }
                                            string Cells = "";
                                            ExcelRange Rang2 = Sheet5.Cells[q, 5];
                                            if (Rang2.Merge)
                                            {
                                                Cells = GetMergeValue(Sheet5, q, 5);
                                            }
                                            if (Cells == "" || Cells == null)
                                            {
                                                continue;
                                            }
                                            TheDeliveryCateGory = CStr(Sheet5.Cells[list[q], 1].Value).Trim();
                                            if (TheDeliveryCateGory == "三、整件发货部分（功能柜）")
                                            {
                                                TheDeliveryCateGoryId = q;
                                            }
                                            if (TheDeliveryCateGory == "二、散件门板部分")
                                            {
                                                TheDeliveryCateGoryId1 = q;
                                            }
                                            if (TheDeliveryCateGory == "四、装饰部件部分（本地、外地通用）")
                                            {
                                                TheDeliveryCateGoryId2 = q;
                                            }
                                        }
                                        int PackingGroupId = 0;
                                        int PackingGroupId1 = 0;
                                        int PackingGroupId2 = 0;
                                        int PackingGroupId3 = 0;
                                        int PackingGroupId4 = 0;
                                        int PackingGroupId5 = 0;
                                        int PackingGroupId6 = 0;

                                        for (int q = 6; q < eRowNum; q++)
                                        {
                                            if (list[q] == 0 || CStr(Sheet5.Cells[list[q], 1].Value).Trim() == "序号" || CStr(Sheet5.Cells[list[q], 1].Value).Trim() == "注：以上包装箱适用地柜560深、720高散件柜体；吊柜300深、720高柜体；高柜560深2160高的散件柜体（除特定两种柜形外），外地所有玻璃层板单独包装")
                                            {
                                                continue;
                                            }
                                            PackingGroup = CStr(Sheet5.Cells[list[q], 1].Value).Trim();
                                            if (PackingGroup == "1.整件包装---可使用对口箱的柜体（抽屉柜、拉篮柜）（备注：所有速美整柜包装需增加蜂窝纸板及配一根同柜体材质拉带）")
                                            {
                                                PackingGroupId = q;
                                            }
                                            if (PackingGroup == "2.整件包装--所有无法使用对口箱的所有柜体（备注：所有速美整柜包装需增加蜂窝纸板及配一根同柜体材质拉带）")
                                            {
                                                PackingGroupId1 = q;
                                            }
                                            if (PackingGroup == "散件包装的柜体---可使用一片成型包装箱的明细")
                                            {
                                                PackingGroupId2 = q;
                                            }
                                            if (PackingGroup == "散件包装的柜体--所有无法使用一片成型包装箱的柜体散件（玻璃层板单独包装）")
                                            {
                                                PackingGroupId3 = q;
                                            }
                                            if (PackingGroup == "散件包装柜体的背板")
                                            {
                                                PackingGroupId4 = q;
                                            }
                                            if (PackingGroup == "1.散件包装的门板---可使用一片成型包装箱的明细")
                                            {
                                                PackingGroupId5 = q;
                                            }
                                            if (PackingGroup == "2.散件包装的门板--所有无法使用一片成型包装箱的门板散件")
                                            {
                                                PackingGroupId6 = q;
                                            }
                                        }


                                        if (i >= TheDeliveryCateGoryId && i < TheDeliveryCateGoryId1)
                                        {
                                            newARow["TheDeliveryCateGory"] = CStr(Sheet5.Cells[TheDeliveryCateGoryId, 1].Value).Trim();
                                        }
                                        else if (i >= TheDeliveryCateGoryId1 && i < TheDeliveryCateGoryId2)
                                        {
                                            newARow["TheDeliveryCateGory"] = CStr(Sheet5.Cells[TheDeliveryCateGoryId1, 1].Value).Trim();
                                        }
                                        else if (i >= TheDeliveryCateGoryId2)
                                        {
                                            newARow["TheDeliveryCateGory"] = CStr(Sheet5.Cells[TheDeliveryCateGoryId2, 1].Value).Trim();
                                        }

                                        if (i >= PackingGroupId && i < PackingGroupId1)
                                        {
                                            newARow["PackingGroup"] = CStr(Sheet5.Cells[PackingGroupId, 1].Value).Trim();
                                        }
                                        if (i >= PackingGroupId1 && i < PackingGroupId2)
                                        {
                                            newARow["PackingGroup"] = CStr(Sheet5.Cells[PackingGroupId1, 1].Value).Trim();
                                        }
                                        if (i >= PackingGroupId2 && i < PackingGroupId3)
                                        {
                                            newARow["PackingGroup"] = CStr(Sheet5.Cells[PackingGroupId2, 1].Value).Trim();
                                        }
                                        if (i >= PackingGroupId3 && i < PackingGroupId4)
                                        {
                                            newARow["PackingGroup"] = CStr(Sheet5.Cells[PackingGroupId3, 1].Value).Trim();
                                        }
                                        if (i >= PackingGroupId4 && i < PackingGroupId5)
                                        {
                                            newARow["PackingGroup"] = CStr(Sheet5.Cells[PackingGroupId4, 1].Value).Trim();
                                        }
                                        if (i >= PackingGroupId5 && i < PackingGroupId6)
                                        {
                                            newARow["PackingGroup"] = CStr(Sheet5.Cells[PackingGroupId5, 1].Value).Trim();
                                        }
                                        if (i >= PackingGroupId6 && i <= TheDeliveryCateGoryId2)
                                        {
                                            newARow["PackingGroup"] = CStr(Sheet5.Cells[PackingGroupId6, 1].Value).Trim();
                                        }
                                        if (i >= TheDeliveryCateGoryId2)
                                        {
                                            newARow["PackingGroup"] = null;
                                        }
                                    }
                                }
                                else
                                {
                                    continue;
                                }

                            }

                            if ((ExcelValue2 == "") || (ExcelValue2 == null) || (ExcelValue2 == "数量"))
                            {
                                continue;
                            }
                            SuMei_Table.Rows.Add(newARow);

                        }
                        SuMei_Table.TableName = "SuMeiLi_Packaging";
                        if (SuMei_Table.Rows.Count > 0)
                        {
                            DS.Tables.Add(SuMei_Table);
                        }
                        //SuMei_Table.Clear();
                        SuMei_Table.Dispose();
                    }

                }
                #endregion
                //A6包装
                #region
                //装箱单读取
                //ExcelWorksheet Sheet1 = null;//数据所在Sheet
                //Sheet1 = pck.Workbook.Worksheets["A6包装"];
                ExcelWorksheet Sheet4 = null;//数据所在Sheet
                Sheet4 = pck.Workbook.Worksheets["A6包装"];
                if (Sheet4 != null)
                {
                    if (Sheet4.Hidden.ToString() == "Visible")
                    {
                        int maxColumnNum = Sheet4.Dimension.End.Column;//最大列
                        int minColumnNum = Sheet4.Dimension.Start.Column;//最小列
                        int minRowNum = Sheet4.Dimension.Start.Row;//最小行
                        int maxRowNum = Sheet4.Dimension.End.Row;//最大行
                        int sRowNum = 5;//开始行
                        int eRowNum = 0;//结束行
                        int sAColNum = 1;//区域A的开始栏位
                        int eAColNum = 11;//区域A的结束栏位

                        string ExcelValue2 = "";
                        int[] list = new int[maxRowNum + 1];
                        for (int d = 5; d <= maxRowNum; d++)
                        {
                            string Num1Value = CStr(Sheet4.Cells[d, 1].Value);
                            if (Num1Value.Trim() == "备注：灯箱底板、拉篮、含玻璃镜子的板件都需要打硬包装" || Num1Value.Trim() == "序号" || Num1Value.Trim() == "三、整件发货部分（功能柜）" || Num1Value.Trim() == "1.整件包装---可使用对口箱的柜体（抽屉柜、拉篮柜）（备注：所有整柜包装需增加蜂窝纸板)" || Num1Value.Trim() == "2.整件包装--所有无法使用对口箱的所有柜体（备注：所有整柜包装需增加蜂窝纸板)" || Num1Value.Trim() == "散件包装的柜体---可使用一片成型包装箱的明细" || Num1Value.Trim() == "注：以上包装箱适用地柜560深、720高散件柜体；吊柜300深、720高柜体；高柜560深2160高的散件柜体（除特定两种柜形外），外地所有玻璃层板单独包装" || Num1Value.Trim() == "散件包装的柜体--所有无法使用一片成型包装箱的柜体散件（玻璃层板单独包装）" || Num1Value.Trim() == "散件包装柜体的背板" || Num1Value.Trim() == "二、散件门板部分" || Num1Value.Trim() == "1.散件包装的门板---可使用一片成型包装箱的明细" || Num1Value.Trim() == "2.散件包装的门板--所有无法使用一片成型包装箱的门板散件" || Num1Value.Trim() == "四、装饰部件部分（本地、外地通用）")
                            {
                                eRowNum = d;
                                //list[d] = d;
                                if (Num1Value == "序号" || Num1Value.Trim() == "三、整件发货部分（功能柜）" || Num1Value.Trim() == "1.整件包装---可使用对口箱的柜体（抽屉柜、拉篮柜）（备注：所有整柜包装需增加蜂窝纸板)" || Num1Value.Trim() == "2.整件包装--所有无法使用对口箱的所有柜体（备注：所有整柜包装需增加蜂窝纸板)" || Num1Value.Trim() == "散件包装的柜体---可使用一片成型包装箱的明细" || Num1Value.Trim() == "注：以上包装箱适用地柜560深、720高散件柜体；吊柜300深、720高柜体；高柜560深2160高的散件柜体（除特定两种柜形外），外地所有玻璃层板单独包装" || Num1Value.Trim() == "散件包装的柜体--所有无法使用一片成型包装箱的柜体散件（玻璃层板单独包装）" || Num1Value.Trim() == "散件包装柜体的背板" || Num1Value.Trim() == "二、散件门板部分" || Num1Value.Trim() == "1.散件包装的门板---可使用一片成型包装箱的明细" || Num1Value.Trim() == "2.散件包装的门板--所有无法使用一片成型包装箱的门板散件" || Num1Value.Trim() == "四、装饰部件部分（本地、外地通用）")
                                {
                                    list[d] = d;
                                }
                                continue;
                            }
                        }
                        //ExcelValue2 = CStr(Sheet.Cells[11, 9].Value);
                        //DataTable Packing_ListTable = Packing_List();
                        //A6包装数据读取
                        for (int i = sRowNum; i <= eRowNum; i++)
                        {
                            DataRow newARow = A6BaoZhuang_Table.NewRow();
                            ExcelValue2 = CStr(Sheet4.Cells[i, 9].Value);

                            ExcelRange Range = Sheet4.Cells[i, 5];
                            object objectCellNumber = Sheet4.GetValue(i, 5);//单元格数据
                            string CellNumber = objectCellNumber != null ? objectCellNumber.ToString().Trim() : "";
                            if (Range.Merge)
                            {
                                CellNumber = GetMergeValue(Sheet4, i, 5);
                            }

                            if (CellNumber == "" || CellNumber == null)
                            {
                                continue;
                            }
                            if (System.Text.RegularExpressions.Regex.IsMatch(ExcelValue2.ToString(), @"^[-+]?[0-9]*\.?[0-9]+$") || ExcelValue2.Trim() == "车间调配")
                            {
                                decimal Value = 0;
                                int Value2 = 0;
                                if (ExcelValue2 == "车间调配")
                                {

                                }
                                else
                                {
                                    Value = decimal.Parse(ExcelValue2);
                                    Value2 = Convert.ToInt32(Value);
                                }
                                if (Value > 0 || ExcelValue2 == "车间调配")
                                {
                                    for (int j = sAColNum; j <= eAColNum; j++)
                                    {
                                        string PackagingId = System.Guid.NewGuid().ToString().Substring(0, 12).ToUpper();
                                        newARow["PackagingId"] = PackagingId;
                                        newARow["ProductOrderId"] = ParentId;
                                        //string TheDeliveryCateGory = CStr(Sheet.Cells[i, 1].Value).Trim();
                                        ExcelRange Rang = Sheet4.Cells[i, j];
                                        object objectCellValue = Sheet4.GetValue(i, j);//单元格数据
                                        string CellValue = objectCellValue != null ? objectCellValue.ToString().Trim() : "";
                                        if (Rang.Merge)
                                        {
                                            CellValue = GetMergeValue(Sheet4, i, j);
                                        }


                                        switch (j)
                                        {
                                            case 1: newARow["PackingNumber"] = CellValue; break;
                                            case 2:

                                                newARow["Wide"] = CellValue;
                                                break;
                                            case 3:

                                                newARow["High"] = CellValue;
                                                break;
                                            case 4:
                                                string ExcelValue4 = CStr(Sheet4.Cells[i, j].Value);


                                                if (ExcelValue4 == "" || ExcelValue4 == null)
                                                {
                                                    newARow["Depth"] = "0";
                                                }
                                                else
                                                {
                                                    newARow["Depth"] = CellValue;
                                                }

                                                break;
                                            case 5: newARow["Cell"] = CellValue; break;
                                            case 6: newARow["CabinetType"] = CellValue; break;
                                            case 7: newARow["NameOfPackagingMaterials"] = CellValue; break;
                                            case 8: newARow["MaterialCode"] = CellValue; break;

                                            case 9:
                                                if (System.Text.RegularExpressions.Regex.IsMatch(CellValue, @"^[-+]?[0-9]*\.?[0-9]+$"))
                                                {
                                                    Decimal Qty = Math.Round(decimal.Parse(CellValue), 3, MidpointRounding.AwayFromZero);
                                                    newARow["Qty"] = Qty;
                                                }
                                                else
                                                {
                                                    newARow["PackingQuantity"] = CellValue;
                                                }
                                                break;
                                            case 10:
                                                if (CellValue == "车间调配")
                                                {
                                                    newARow["Unit"] = null;
                                                }
                                                else
                                                {
                                                    newARow["Unit"] = CellValue;
                                                }
                                                break;
                                            case 11: newARow["Remark"] = CellValue; break;
                                        }
                                        int TheDeliveryCateGoryId = 0;
                                        int TheDeliveryCateGoryId1 = 0;
                                        int TheDeliveryCateGoryId2 = 0;
                                        string TheDeliveryCateGory = "";
                                        string PackingGroup = "";
                                        for (int q = 5; q < eRowNum; q++)
                                        {
                                            if (list[q] == 0 || CStr(Sheet4.Cells[list[q], 1].Value).Trim() == "序号" || CStr(Sheet4.Cells[list[q], 1].Value).Trim() == "注：以上包装箱适用地柜560深、720高散件柜体；吊柜300深、720高柜体；高柜560深2160高的散件柜体（除特定两种柜形外），外地所有玻璃层板单独包装")
                                            {
                                                continue;
                                            }
                                            TheDeliveryCateGory = CStr(Sheet4.Cells[list[q], 1].Value).Trim();
                                            if (TheDeliveryCateGory == "三、整件发货部分（功能柜）")
                                            {
                                                TheDeliveryCateGoryId = q;
                                            }
                                            if (TheDeliveryCateGory == "二、散件门板部分")
                                            {
                                                TheDeliveryCateGoryId1 = q;
                                            }
                                            if (TheDeliveryCateGory == "四、装饰部件部分（本地、外地通用）")
                                            {
                                                TheDeliveryCateGoryId2 = q;
                                            }
                                        }
                                        int PackingGroupId = 0;
                                        int PackingGroupId1 = 0;
                                        int PackingGroupId2 = 0;
                                        int PackingGroupId3 = 0;
                                        int PackingGroupId4 = 0;
                                        int PackingGroupId5 = 0;
                                        int PackingGroupId6 = 0;

                                        for (int q = 6; q < eRowNum; q++)
                                        {
                                            if (list[q] == 0 || CStr(Sheet4.Cells[list[q], 1].Value).Trim() == "序号" || CStr(Sheet4.Cells[list[q], 1].Value).Trim() == "注：以上包装箱适用地柜560深、720高散件柜体；吊柜300深、720高柜体；高柜560深2160高的散件柜体（除特定两种柜形外），外地所有玻璃层板单独包装")
                                            {
                                                continue;
                                            }
                                            PackingGroup = CStr(Sheet4.Cells[list[q], 1].Value).Trim();
                                            if (PackingGroup == "1.整件包装---可使用对口箱的柜体（抽屉柜、拉篮柜）（备注：所有整柜包装需增加蜂窝纸板)")
                                            {
                                                PackingGroupId = q;
                                            }
                                            if (PackingGroup == "2.整件包装--所有无法使用对口箱的所有柜体（备注：所有整柜包装需增加蜂窝纸板)")
                                            {
                                                PackingGroupId1 = q;
                                            }
                                            if (PackingGroup == "散件包装的柜体---可使用一片成型包装箱的明细")
                                            {
                                                PackingGroupId2 = q;
                                            }
                                            if (PackingGroup == "散件包装的柜体--所有无法使用一片成型包装箱的柜体散件（玻璃层板单独包装）")
                                            {
                                                PackingGroupId3 = q;
                                            }
                                            if (PackingGroup == "散件包装柜体的背板")
                                            {
                                                PackingGroupId4 = q;
                                            }
                                            if (PackingGroup == "1.散件包装的门板---可使用一片成型包装箱的明细")
                                            {
                                                PackingGroupId5 = q;
                                            }
                                            if (PackingGroup == "2.散件包装的门板--所有无法使用一片成型包装箱的门板散件")
                                            {
                                                PackingGroupId6 = q;
                                            }
                                        }


                                        if (i >= TheDeliveryCateGoryId && i < TheDeliveryCateGoryId1)
                                        {
                                            newARow["TheDeliveryCateGory"] = CStr(Sheet4.Cells[TheDeliveryCateGoryId, 1].Value).Trim();
                                        }
                                        else if (i >= TheDeliveryCateGoryId1 && i < TheDeliveryCateGoryId2)
                                        {
                                            newARow["TheDeliveryCateGory"] = CStr(Sheet4.Cells[TheDeliveryCateGoryId1, 1].Value).Trim();
                                        }
                                        else if (i >= TheDeliveryCateGoryId2)
                                        {
                                            newARow["TheDeliveryCateGory"] = CStr(Sheet4.Cells[TheDeliveryCateGoryId2, 1].Value).Trim();
                                        }

                                        if (i >= PackingGroupId && i < PackingGroupId1)
                                        {
                                            newARow["PackingGroup"] = CStr(Sheet4.Cells[PackingGroupId, 1].Value).Trim();
                                        }
                                        if (i >= PackingGroupId1 && i < PackingGroupId2)
                                        {
                                            newARow["PackingGroup"] = CStr(Sheet4.Cells[PackingGroupId1, 1].Value).Trim();
                                        }
                                        if (i >= PackingGroupId2 && i < PackingGroupId3)
                                        {
                                            newARow["PackingGroup"] = CStr(Sheet4.Cells[PackingGroupId2, 1].Value).Trim();
                                        }
                                        if (i >= PackingGroupId3 && i < PackingGroupId4)
                                        {
                                            newARow["PackingGroup"] = CStr(Sheet4.Cells[PackingGroupId3, 1].Value).Trim();
                                        }
                                        if (i >= PackingGroupId4 && i < PackingGroupId5)
                                        {
                                            newARow["PackingGroup"] = CStr(Sheet4.Cells[PackingGroupId4, 1].Value).Trim();
                                        }
                                        if (i >= PackingGroupId5 && i < PackingGroupId6)
                                        {
                                            newARow["PackingGroup"] = CStr(Sheet4.Cells[PackingGroupId5, 1].Value).Trim();
                                        }
                                        if (i >= PackingGroupId6 && i < TheDeliveryCateGoryId2)
                                        {
                                            newARow["PackingGroup"] = CStr(Sheet4.Cells[PackingGroupId6, 1].Value).Trim();
                                        }
                                        if (i >= TheDeliveryCateGoryId2)
                                        {
                                            newARow["PackingGroup"] = null;
                                        }
                                    }
                                }
                                else
                                {
                                    continue;
                                }

                            }

                            if ((ExcelValue2 == "") || (ExcelValue2 == null) || (ExcelValue2 == "数量"))
                            {
                                continue;
                            }
                            A6BaoZhuang_Table.Rows.Add(newARow);

                        }
                        A6BaoZhuang_Table.TableName = "A6Li_Packaging";
                        if (A6BaoZhuang_Table.Rows.Count > 0)
                        {
                            DS.Tables.Add(A6BaoZhuang_Table);
                        }
                        //A6BaoZhuang_Table.Clear();
                        A6BaoZhuang_Table.Dispose();
                    }

                }
                #endregion
                //A6免漆下料单
                #region
                ExcelWorksheet A6WenqiBlankingSheet = null;
                A6WenqiBlankingSheet = pck.Workbook.Worksheets["A6免漆下料单"];
                if (A6WenqiBlankingSheet != null)
                {
                    if (A6WenqiBlankingSheet.Hidden.ToString() == "Visible")
                    {
                        try
                        {
                            //工作表开始行
                            int A6WenqiBlankingSheetSRow = A6WenqiBlankingSheet.Dimension.Start.Row;
                            //工作表结束行
                            int A6WenqiBlankingSheetERow = A6WenqiBlankingSheet.Dimension.End.Row;
                            //工作表开始列
                            int A6WenqiBlankingSheetSColum = A6WenqiBlankingSheet.Dimension.Start.Column;
                            //工作表结束列
                            int A6WenqiBlankingSheetEColum = A6WenqiBlankingSheet.Dimension.End.Column;
                            //工作表内容开始行
                            int A6WenqiBlankingSheetStartRow = 7;
                            //工作表内容结束行
                            int A6WenqiBlankingSheetEndRow = 0;
                            //工作表内容开始列
                            int A6WenqiBlankingSheetStartColum = 1;
                            //工作表内容结束列
                            int A6WenqiBlankingSheetEndColum = 14;
                            //获取结束行
                            for (int i = A6WenqiBlankingSheetStartRow; i < A6WenqiBlankingSheetERow; i++)
                            {
                                if (A6WenqiBlankingSheet.Cells[i, 1].Value == null)
                                {
                                    continue;
                                }
                                if (A6WenqiBlankingSheet.Cells[i, 1].Value.ToString() == "如有材质、颜色、尺寸不明请和工艺组联系并确认！")
                                {
                                    A6WenqiBlankingSheetEndRow = i - 2;
                                    break;
                                }
                            }
                            //string Requisition_Type = CStr(A6WenqiBlankingSheet.Cells[1, 1].Value);
                            //读取Excel内容
                            for (int i = A6WenqiBlankingSheetStartRow; i < A6WenqiBlankingSheetEndRow; i++)
                            {
                                DataRow A6WenqiBlankingSheetTableRow = A6MianQiXialiaodan_Table.NewRow();
                                object Qty = A6WenqiBlankingSheet.Cells[i, 9].Value;
                                if (Qty == null || Convert.ToSingle(Qty) <= 0)
                                {
                                    continue;
                                }
                                string IssueMaterialBillsId = Guid.NewGuid().ToString().Substring(0, 12);
                                A6WenqiBlankingSheetTableRow["IssueMaterialBillsId"] = IssueMaterialBillsId.ToUpper();
                                A6WenqiBlankingSheetTableRow["ProductOrderId"] = ParentId;
                                //A6WenqiBlankingSheetTableRow["Requisition_Type"] = Requisition_Type.Trim().Substring(0,);
                                A6WenqiBlankingSheetTableRow["PlateType"] = A6WenqiBlankingSheet.Cells[1, 1].Value.ToString().Substring(3, 2);//板件类型
                                A6WenqiBlankingSheetTableRow["HandType"] = A6WenqiBlankingSheet.Cells[3, 2].Value;//拉手类型

                                Texture = A6WenqiBlankingSheet.Cells[4, 2].Value.ToString();//材质

                                A6WenqiBlankingSheetTableRow["FaceConduct"] = A6WenqiBlankingSheet.Cells[3, 4].Value;//饰面

                                A6WenqiBlankingSheetTableRow["Stytle"] = A6WenqiBlankingSheet.Cells[3, 7].Value;//款式
                                A6WenqiBlankingSheetTableRow["SealingSide"] = A6WenqiBlankingSheet.Cells[2, 9].Value;//门板封边
                                for (int j = A6WenqiBlankingSheetStartColum; j < A6WenqiBlankingSheetEndColum; j++)
                                {
                                    switch (j)
                                    {
                                        case 1:
                                            A6WenqiBlankingSheetTableRow["OrderDetailId"] = A6WenqiBlankingSheet.Cells[i, j].Value;
                                            break;
                                        case 2:
                                            A6WenqiBlankingSheetTableRow["FLong"] = A6WenqiBlankingSheet.Cells[i, j].Value;
                                            break;
                                        case 3:
                                            A6WenqiBlankingSheetTableRow["FWide"] = A6WenqiBlankingSheet.Cells[i, j].Value;
                                            break;
                                        case 4:
                                            A6WenqiBlankingSheetTableRow["Qty"] = A6WenqiBlankingSheet.Cells[i, j].Value;
                                            break;
                                        case 5:
                                            //object IsNullOrEmpty = A6WenqiBlankingSheet.Cells[i, j].Value;
                                            //if (IsNullOrEmpty == null || IsNullOrEmpty.ToString() == "")
                                            //{
                                            //    IsNull = true;
                                            //    ThisSheetName = A6WenqiBlankingSheet.Name.ToString();
                                            //}
                                            A6WenqiBlankingSheetTableRow["PlateName"] = A6WenqiBlankingSheet.Cells[1, 1].Value.ToString().Substring(1, 4);
                                            break;
                                        case 6:
                                            Object CutThick = A6WenqiBlankingSheet.Cells[i, j].Value;
                                            if (CutThick == null || CutThick.ToString() == "")
                                            {
                                                IsNull = true;
                                                ThisSheetName = A6WenqiBlankingSheet.Name.ToString();
                                            }
                                            A6WenqiBlankingSheetTableRow["CutThick"] = CutThick;
                                            break;
                                        case 7:
                                            A6WenqiBlankingSheetTableRow["CutLong"] = A6WenqiBlankingSheet.Cells[i, j].Value;
                                            break;
                                        case 8:
                                            A6WenqiBlankingSheetTableRow["CutWide"] = A6WenqiBlankingSheet.Cells[i, j].Value;
                                            break;
                                        case 9:
                                            A6WenqiBlankingSheetTableRow["CutQty"] = A6WenqiBlankingSheet.Cells[i, j].Value;
                                            break;
                                        case 10:
                                            A6WenqiBlankingSheetTableRow["Remark"] = A6WenqiBlankingSheet.Cells[i, j].Value;
                                            break;
                                        case 11:
                                            object MaterialNote = A6WenqiBlankingSheet.Cells[i, j].Value;
                                            A6WenqiBlankingSheetTableRow["MaterialNote"] = MaterialNote;
                                            A6WenqiBlankingSheetTableRow["Vein"] = "1";//门板纹理
                                            //if (MaterialNote != null || MaterialNote.ToString() != "")
                                            //{
                                            //    if (MaterialNote.ToString().Contains("("))
                                            //    {
                                            //        A6WenqiBlankingSheetTableRow["Vein"] = MaterialNote.ToString().Substring(MaterialNote.ToString().LastIndexOf("(") + 1, 2);//门板纹理
                                            //    }
                                            //    else
                                            //    {
                                            //        A6WenqiBlankingSheetTableRow["Vein"] = "0";//门板纹理
                                            //    }
                                            //}
                                            ////将dataset的表填充到datatable
                                            //DataTable TB_No_Vein = VeinDs.Tables["No_Vein"];
                                            ////指定的字符串变量，根据这个变量查询table是否包含这条数据
                                            ////String BWART1 = VeinDs.Tables["No_Vein"].Rows[0][1].ToString();
                                            ////给dataview绑定数据
                                            //DataView Dv_No_Vein = TB_No_Vein.DefaultView;
                                            ////dataview的筛选属性，等于号后面是条件（示例为查看table里面BWART列像BWART1的行）
                                            //Dv_No_Vein.RowFilter = "PlateType = '" + MaterialNote + "'";
                                            ////查询到的行（>0为有一到多条数据，=0没有查询到数据）
                                            //if (Dv_No_Vein.Count > 0)//如果材质表中包含这个材质说明此材质无纹理
                                            //{
                                            //    A6WenqiBlankingSheetTableRow["Vein"] = "0";//无纹理
                                            //}
                                            //else
                                            //{
                                            //    //将dataset的表填充到datatable
                                            //    DataTable TB_Excel_Vein = VeinDs.Tables["Excel_Vein"];
                                            //    //指定的字符串变量，根据这个变量查询table是否包含这条数据
                                            //    //String BWART1 = VeinDs.Tables["No_Vein"].Rows[0][1].ToString();
                                            //    //给dataview绑定数据
                                            //    DataView Dv_Excel_Vein = TB_Excel_Vein.DefaultView;
                                            //    //dataview的筛选属性，等于号后面是条件（示例为查看table里面BWART列像BWART1的行）
                                            //    Dv_Excel_Vein.RowFilter = "PlateName = '" + MaterialNote + "'";
                                            //    //查询到的行（>0为有一到多条数据，=0没有查询到数据）
                                            //    if (Dv_Excel_Vein.Count > 0)//横纹板件表中如果有这个板件说明该板件纹理为横纹
                                            //    {
                                            //        A6WenqiBlankingSheetTableRow["Vein"] = "2";//横纹
                                            //    }
                                            //    else
                                            //    {
                                            //        A6WenqiBlankingSheetTableRow["Vein"] = "1";//竖纹
                                            //    }
                                            //}
                                            //A6WenqiBlankingSheetTableRow["Vein"] = A6WenqiBlankingSheet.Cells[3, 5].Value;//门板纹理

                                            break;
                                        case 12:
                                            A6WenqiBlankingSheetTableRow["DisplayMaterialSummary"] = A6WenqiBlankingSheet.Cells[i, j].Value;
                                            break;
                                        case 13:
                                            A6WenqiBlankingSheetTableRow["AreaOfContour"] = A6WenqiBlankingSheet.Cells[i, j].Value;
                                            break;
                                    }
                                }
                                A6MianQiXialiaodan_Table.Rows.Add(A6WenqiBlankingSheetTableRow);
                            }
                            A6MianQiXialiaodan_Table.TableName = "IssueMaterialBills1";
                            if (A6MianQiXialiaodan_Table.Rows.Count > 0)
                            {
                                DS.Tables.Add(A6MianQiXialiaodan_Table);
                            }
                            //A6MianQiXialiaodan_Table.Clear();
                            A6MianQiXialiaodan_Table.Dispose();
                            //A6MianQiLingliaodan_Table.Clear();
                            //A6MianQiLingliaodan_Table.Dispose();
                        }
                        catch (Exception ex)
                        {
                            MessageBox.Show(ex.Message);
                        }
                    }
                }

                #endregion

                //if (IsNull == false)
                //{
                    //A6免漆领料单
                    #region
                    ExcelWorksheet A6NoPaintSheet = null;
                    A6NoPaintSheet = pck.Workbook.Worksheets["A6免漆领料单"];
                    if (A6NoPaintSheet != null)
                    {
                        if (A6NoPaintSheet.Hidden.ToString() == "Visible")
                        {
                            try
                            {
                                //获取Excel表单最大列
                                int MaxColum = A6NoPaintSheet.Dimension.End.Column;
                                //获取Excel表单开始列
                                //int StartColum = A6NoPaintSheet.Dimension.Start.Column;
                                //获取Excel表单最大行
                                int MaxRow = A6NoPaintSheet.Dimension.End.Row;
                                //获取Excel表单开始行
                                //int StartRow = A6NoPaintSheet.Dimension.Start.Row;
                                int SRow = 5;
                                int MRow = 0;
                                int SColum = 1;
                                int MColum = 6;
                                //获取表单数据区结束行
                                for (int i = SRow; i < MaxRow; i++)
                                {
                                    if (A6NoPaintSheet.Cells[i, 1].Value == null)
                                    {
                                        continue;
                                    }
                                    if (A6NoPaintSheet.Cells[i, 1].Value.ToString().Trim() == "制单人：")
                                    {
                                        MRow = i - 3;
                                        break;
                                    }
                                }

                                //为领料单创建一个datatable
                                DataTable PickingTable = new DataTable();
                                PickingTable.Columns.Add(string.Format("ProductDescription"), Type.GetType("System.String"));//物料描述
                                PickingTable.Columns.Add(string.Format("ProductName"), Type.GetType("System.String"));
                                DataRow Pickingrows = PickingTable.NewRow();
                                //读取物料描述信息存放在datatable中
                                for (int i = SRow; i < MRow; i++)
                                {
                                    string Qty = CStr(A6NoPaintSheet.Cells[i, 4].Value);
                                    if (Qty == null || Qty == "" || Convert.ToSingle(Qty) <= 0)
                                    {
                                        continue;
                                    }
                                    //string Qty = CStr(A6NoPaintSheet.Cells[i, 4].Value);
                                    //if (Qty == "" || Qty == null)
                                    //{
                                    //    Qty = "0";
                                    //}
                                    //decimal QTY = Convert.ToDecimal(Qty);
                                    //int Qty1 = Convert.ToInt32(QTY * 100);
                                    //if (ProductDescription == "" || ProductDescription == null || Qty1 == 0 || Qty1 < 0)
                                    //{
                                    //    continue;
                                    //}
                                    object ProductDescription = CStr(A6NoPaintSheet.Cells[i, 3].Value);
                                    Pickingrows["ProductDescription"] = ProductDescription.ToString();
                                    PickingTable.Rows.Add(Pickingrows.ItemArray);

                                }
                                SqlConnection con = new SqlConnection("Data Source=192.168.124.72;Initial Catalog=OrBitXI;User ID=sa;PassWord=admin@2017");
                                con.Open();
                                //调用存储过程根据物料描述获取到物料编号存放在另一个datatable中
                                SqlCommand Pickingcmd = new SqlCommand();
                                Pickingcmd.CommandText = "Pro_GetProductName";
                                Pickingcmd.Connection = con;
                                Pickingcmd.CommandType = CommandType.StoredProcedure;
                                SqlParameter parameter =
                                new SqlParameter("@Pro_GetProductName", SqlDbType.Structured)
                                {
                                    Value = PickingTable
                                };

                                Pickingcmd.Parameters.Add(parameter);
                                Pickingcmd.ExecuteNonQuery();
                                Pickingcmd.Parameters.Add(new SqlParameter("@return", SqlDbType.Int));
                                Pickingcmd.Parameters["@return"].Direction = ParameterDirection.ReturnValue;
                                SqlDataReader readerPicking = Pickingcmd.ExecuteReader();
                                DataTable Pickingdt = new DataTable();
                                Pickingdt.Load(readerPicking);
                                con.Close();
                                string CateGory = A6NoPaintSheet.Cells[1, 1].Value.ToString();
                                string Requisition_Type = CStr(A6NoPaintSheet.Cells[1, 1].Value);
                                //读取Excel数据
                                for (int i = SRow; i < MRow; i++)
                                {
                                    object ProductQty = A6NoPaintSheet.Cells[i, 4].Value;
                                    //string Qty = A6NoPaintSheet.Cells[i, 4].Value.ToString();
                                    //float Qty1 = Convert.ToSingle(Qty);
                                    if (ProductQty == null || ProductQty.ToString() == "")
                                    {
                                        continue;
                                    }
                                    else
                                    {
                                        object ProductDescription = A6NoPaintSheet.Cells[i, 3].Value;
                                        string Qty = ProductQty.ToString();
                                        if (System.Text.RegularExpressions.Regex.IsMatch(Qty, @"^[-+]?[0-9]*\.?[0-9]+$"))
                                        {
                                            if (Convert.ToSingle(Qty) > 0)
                                            {
                                                DataRow A6NoPaintSheetTableRow = A6MianQiLingliaodan_Table.NewRow();

                                                A6NoPaintSheetTableRow["CateGory"] = CateGory.Trim().Substring(3, 2);
                                                A6NoPaintSheetTableRow["ProductOrderId"] = ParentId;
                                                A6NoPaintSheetTableRow["Requisition_Type"] = Requisition_Type.Trim().Substring(0, 8);
                                                string GetMaterialBillsId = Guid.NewGuid().ToString().Substring(0, 12);
                                                A6NoPaintSheetTableRow["GetMaterialBillsId"] = GetMaterialBillsId.ToUpper();

                                                A6NoPaintSheetTableRow["FaceConduct"] = CateGory.Trim().Substring(1, 2);

                                                A6NoPaintSheetTableRow["Texture"] = Texture;

                                                for (int j = SColum; j < MColum; j++)
                                                {
                                                    switch (j)
                                                    {
                                                        case 1:
                                                            A6NoPaintSheetTableRow["MaterialType"] = A6NoPaintSheet.Cells[i, j].Value;
                                                            break;
                                                        case 3:
                                                            //string ProductDes = A6NoPaintSheet.Cells[i, j].Value.ToString();
                                                            for (int a = 0; a < Pickingdt.Rows.Count; a++)
                                                            {
                                                                string ProductDes = Pickingdt.Rows[a]["ProductDescription"].ToString();
                                                                if (ProductDes == ProductDescription.ToString())
                                                                {
                                                                    string ProductName = Pickingdt.Rows[a]["ProductName"].ToString();
                                                                    if (ProductName == null || ProductName == "")
                                                                    {
                                                                        NullCount++;
                                                                        A6NoPaintSheetTableRow["ProductName"] = ProductName;
                                                                        A6NoPaintSheetTableRow["ProductDes"] = ProductDes;
                                                                        break;
                                                                    }
                                                                    else
                                                                    {
                                                                        A6NoPaintSheetTableRow["ProductName"] = ProductName;
                                                                        A6NoPaintSheetTableRow["ProductDes"] = ProductDes;
                                                                        break;
                                                                    }
                                                                }
                                                            }
                                                            break;
                                                        case 4:
                                                            //string Qty=A6NoPaintSheet.Cells[i, j].Value.ToString();
                                                            //float Qty1=Convert.ToSingle( Qty);
                                                            A6NoPaintSheetTableRow["Qty"] = A6NoPaintSheet.Cells[i, j].Value;
                                                            break;
                                                        case 5:
                                                            A6NoPaintSheetTableRow["Unit"] = A6NoPaintSheet.Cells[i, j].Value;
                                                            break;
                                                        case 6:
                                                            A6NoPaintSheetTableRow["PackingConfirmed"] = A6NoPaintSheet.Cells[i, j].Value;
                                                            break;
                                                    }
                                                }
                                                A6MianQiLingliaodan_Table.Rows.Add(A6NoPaintSheetTableRow);
                                            }
                                        }
                                    }
                                }
                                A6MianQiLingliaodan_Table.TableName = "GetMaterialBills1";
                                if (A6MianQiLingliaodan_Table.Rows.Count > 0)
                                {
                                    DS.Tables.Add(A6MianQiLingliaodan_Table);
                                }
                                //A6MianQiLingliaodan_Table.Clear();
                                A6MianQiLingliaodan_Table.Dispose();
                                //释放资源
                                readerPicking.Close();
                                readerPicking.Dispose();
                                Pickingdt.Clear();
                                Pickingdt.Dispose();
                                PickingTable.Clear();
                                PickingTable.Dispose();
                                Texture = "";
                            }
                            catch (Exception ex)
                            {
                                MessageBox.Show(ex.Message);
                            }
                        }
                    }

                    #endregion

                    //A6免漆下料单（2）
                    #region
                    ExcelWorksheet A6WenqiBlankingSheet2 = null;
                    A6WenqiBlankingSheet2 = pck.Workbook.Worksheets["A6免漆下料单 (2)"];
                    if (A6WenqiBlankingSheet2 != null)
                    {
                        if (A6WenqiBlankingSheet2.Hidden.ToString() == "Visible")
                        {
                            try
                            {
                                //工作表开始行
                                int A6WenqiBlankingSheetSRow = A6WenqiBlankingSheet2.Dimension.Start.Row;
                                //工作表结束行
                                int A6WenqiBlankingSheetERow = A6WenqiBlankingSheet2.Dimension.End.Row;
                                //工作表开始列
                                int A6WenqiBlankingSheetSColum = A6WenqiBlankingSheet2.Dimension.Start.Column;
                                //工作表结束列
                                int A6WenqiBlankingSheetEColum = A6WenqiBlankingSheet2.Dimension.End.Column;
                                //工作表内容开始行
                                int A6WenqiBlankingSheetStartRow = 7;
                                //工作表内容结束行
                                int A6WenqiBlankingSheetEndRow = 0;
                                //工作表内容开始列
                                int A6WenqiBlankingSheetStartColum = 1;
                                //工作表内容结束列
                                int A6WenqiBlankingSheetEndColum = 14;
                                //获取结束行
                                for (int i = A6WenqiBlankingSheetStartRow; i < A6WenqiBlankingSheetERow; i++)
                                {
                                    if (A6WenqiBlankingSheet2.Cells[i, 1].Value == null)
                                    {
                                        continue;
                                    }
                                    if (A6WenqiBlankingSheet2.Cells[i, 1].Value.ToString() == "如有材质、颜色、尺寸不明请和工艺组联系并确认！")
                                    {
                                        A6WenqiBlankingSheetEndRow = i - 2;
                                        break;
                                    }
                                }
                                //string Requisition_Type = CStr(A6WenqiBlankingSheet.Cells[1, 1].Value);
                                //读取Excel内容
                                for (int i = A6WenqiBlankingSheetStartRow; i < A6WenqiBlankingSheetEndRow; i++)
                                {
                                    DataRow A6WenqiBlankingSheetTableRow = A6MianQiXialiaodan_Table2.NewRow();
                                    object Qty = A6WenqiBlankingSheet2.Cells[i, 9].Value;
                                    if (Qty == null || Convert.ToSingle(Qty) <= 0)
                                    {
                                        continue;
                                    }
                                    string IssueMaterialBillsId = Guid.NewGuid().ToString().Substring(0, 12);
                                    A6WenqiBlankingSheetTableRow["IssueMaterialBillsId"] = IssueMaterialBillsId.ToUpper();
                                    A6WenqiBlankingSheetTableRow["ProductOrderId"] = ParentId;
                                    //A6WenqiBlankingSheetTableRow["Requisition_Type"] = Requisition_Type.Trim().Substring(0,);
                                    A6WenqiBlankingSheetTableRow["PlateType"] = A6WenqiBlankingSheet2.Cells[1, 1].Value.ToString().Substring(3, 2);//板件类型
                                    A6WenqiBlankingSheetTableRow["HandType"] = A6WenqiBlankingSheet2.Cells[3, 2].Value;//拉手类型

                                    Texture = A6WenqiBlankingSheet.Cells[4, 2].Value.ToString();//材质

                                    A6WenqiBlankingSheetTableRow["FaceConduct"] = A6WenqiBlankingSheet2.Cells[3, 4].Value;//饰面

                                    A6WenqiBlankingSheetTableRow["Stytle"] = A6WenqiBlankingSheet2.Cells[3, 7].Value;//款式
                                    A6WenqiBlankingSheetTableRow["SealingSide"] = A6WenqiBlankingSheet2.Cells[2, 9].Value;//门板封边
                                    for (int j = A6WenqiBlankingSheetStartColum; j < A6WenqiBlankingSheetEndColum; j++)
                                    {
                                        switch (j)
                                        {
                                            case 1:
                                                A6WenqiBlankingSheetTableRow["OrderDetailId"] = A6WenqiBlankingSheet2.Cells[i, j].Value;
                                                break;
                                            case 2:
                                                A6WenqiBlankingSheetTableRow["FLong"] = A6WenqiBlankingSheet2.Cells[i, j].Value;
                                                break;
                                            case 3:
                                                A6WenqiBlankingSheetTableRow["FWide"] = A6WenqiBlankingSheet2.Cells[i, j].Value;
                                                break;
                                            case 4:
                                                A6WenqiBlankingSheetTableRow["Qty"] = A6WenqiBlankingSheet2.Cells[i, j].Value;
                                                break;
                                            case 5:
                                                //object ThisPlateName = A6WenqiBlankingSheet2.Cells[i, j].Value;
                                                //if (ThisPlateName == null || ThisPlateName.ToString() == "")
                                                //{
                                                //    IsNull = true;
                                                //    ThisSheetName = A6WenqiBlankingSheet2.Name.ToString();
                                                //}
                                                A6WenqiBlankingSheetTableRow["PlateName"] = A6WenqiBlankingSheet2.Cells[1, 1].Value.ToString().Substring(1, 4);
                                                break;
                                            case 6:
                                                Object CutThick = A6WenqiBlankingSheet2.Cells[i, j].Value;
                                                if (CutThick == null || CutThick.ToString() == "")
                                                {
                                                    IsNull = true;
                                                    ThisSheetName = A6WenqiBlankingSheet2.Name.ToString();
                                                }
                                                A6WenqiBlankingSheetTableRow["CutThick"] = CutThick;
                                                break;
                                            case 7:
                                                A6WenqiBlankingSheetTableRow["CutLong"] = A6WenqiBlankingSheet2.Cells[i, j].Value;
                                                break;
                                            case 8:
                                                A6WenqiBlankingSheetTableRow["CutWide"] = A6WenqiBlankingSheet2.Cells[i, j].Value;
                                                break;
                                            case 9:
                                                A6WenqiBlankingSheetTableRow["CutQty"] = A6WenqiBlankingSheet2.Cells[i, j].Value;
                                                break;
                                            case 10:
                                                A6WenqiBlankingSheetTableRow["Remark"] = A6WenqiBlankingSheet2.Cells[i, j].Value;
                                                break;
                                            case 11:
                                                object MaterialNote = A6WenqiBlankingSheet2.Cells[i, j].Value;
                                                A6WenqiBlankingSheetTableRow["MaterialNote"] = MaterialNote;
                                                
                                                A6WenqiBlankingSheetTableRow["Vein"] = "1";
                                                //if (MaterialNote != null || MaterialNote.ToString() != "")
                                                //{
                                                //    if (MaterialNote.ToString().Contains("("))
                                                //    {
                                                //        string Vein = MaterialNote.ToString().Substring(MaterialNote.ToString().LastIndexOf("(") + 1, 2);//门板纹理
                                                //        if (Vein == "横纹")
                                                //        {
                                                //            A6WenqiBlankingSheetTableRow["Vein"] = "2";
                                                //        }
                                                //        else
                                                //        {
                                                //            A6WenqiBlankingSheetTableRow["Vein"] = "1";
                                                //        }
                                                //    }
                                                //    else
                                                //    {
                                                //        A6WenqiBlankingSheetTableRow["Vein"] = "0";//门板纹理
                                                //    }
                                                //}
                                                break;
                                            case 12:
                                                A6WenqiBlankingSheetTableRow["DisplayMaterialSummary"] = A6WenqiBlankingSheet2.Cells[i, j].Value;
                                                break;
                                            case 13:
                                                A6WenqiBlankingSheetTableRow["AreaOfContour"] = A6WenqiBlankingSheet2.Cells[i, j].Value;
                                                break;
                                        }
                                    }
                                    A6MianQiXialiaodan_Table2.Rows.Add(A6WenqiBlankingSheetTableRow);
                                }
                                A6MianQiXialiaodan_Table2.TableName = "IssueMaterialBills3";
                                if (A6MianQiXialiaodan_Table2.Rows.Count > 0)
                                {
                                    DS.Tables.Add(A6MianQiXialiaodan_Table2);
                                }
                                A6MianQiLingliaodan_Table.Dispose();
                            }
                            catch (Exception ex)
                            {
                                MessageBox.Show(ex.Message);
                            }
                        }
                    }

                    #endregion
                    //if (IsNull == false)
                    //{
                        //A6免漆领料单（2）
                        #region
                        ExcelWorksheet A6NoPaintSheet2 = null;
                        A6NoPaintSheet2 = pck.Workbook.Worksheets["A6免漆领料单 (2)"];
                        if (A6NoPaintSheet2 != null)
                        {
                            if (A6NoPaintSheet2.Hidden.ToString() == "Visible")
                            {
                                try
                                {
                                    //获取Excel表单最大列
                                    int MaxColum = A6NoPaintSheet2.Dimension.End.Column;
                                    //获取Excel表单开始列
                                    //int StartColum = A6NoPaintSheet.Dimension.Start.Column;
                                    //获取Excel表单最大行
                                    int MaxRow = A6NoPaintSheet2.Dimension.End.Row;
                                    //获取Excel表单开始行
                                    //int StartRow = A6NoPaintSheet.Dimension.Start.Row;
                                    int SRow = 5;
                                    int MRow = 0;
                                    int SColum = 1;
                                    int MColum = 6;
                                    //获取表单数据区结束行
                                    for (int i = SRow; i < MaxRow; i++)
                                    {
                                        if (A6NoPaintSheet2.Cells[i, 1].Value == null)
                                        {
                                            continue;
                                        }
                                        if (A6NoPaintSheet2.Cells[i, 1].Value.ToString().Trim() == "制单人：")
                                        {
                                            MRow = i - 3;
                                            break;
                                        }
                                    }

                                    //为领料单创建一个datatable
                                    DataTable PickingTable = new DataTable();
                                    PickingTable.Columns.Add(string.Format("ProductDescription"), Type.GetType("System.String"));//物料描述
                                    PickingTable.Columns.Add(string.Format("ProductName"), Type.GetType("System.String"));
                                    DataRow Pickingrows = PickingTable.NewRow();
                                    //读取物料描述信息存放在datatable中
                                    for (int i = SRow; i < MRow; i++)
                                    {
                                        string Qty = CStr(A6NoPaintSheet2.Cells[i, 4].Value);
                                        if (Qty == null || Qty == "" || Convert.ToSingle(Qty) <= 0)
                                        {
                                            continue;
                                        }
                                        //string Qty = CStr(A6NoPaintSheet.Cells[i, 4].Value);
                                        //if (Qty == "" || Qty == null)
                                        //{
                                        //    Qty = "0";
                                        //}
                                        //decimal QTY = Convert.ToDecimal(Qty);
                                        //int Qty1 = Convert.ToInt32(QTY * 100);
                                        //if (ProductDescription == "" || ProductDescription == null || Qty1 == 0 || Qty1 < 0)
                                        //{
                                        //    continue;
                                        //}
                                        object ProductDescription = CStr(A6NoPaintSheet2.Cells[i, 3].Value);
                                        Pickingrows["ProductDescription"] = ProductDescription.ToString();
                                        PickingTable.Rows.Add(Pickingrows.ItemArray);

                                    }
                                    SqlConnection con = new SqlConnection("Data Source=192.168.124.72;Initial Catalog=OrBitXI;User ID=sa;PassWord=admin@2017");
                                    con.Open();
                                    //调用存储过程根据物料描述获取到物料编号存放在另一个datatable中
                                    SqlCommand Pickingcmd = new SqlCommand();
                                    Pickingcmd.CommandText = "Pro_GetProductName";
                                    Pickingcmd.Connection = con;
                                    Pickingcmd.CommandType = CommandType.StoredProcedure;
                                    SqlParameter parameter =
                                    new SqlParameter("@Pro_GetProductName", SqlDbType.Structured)
                                    {
                                        Value = PickingTable
                                    };

                                    Pickingcmd.Parameters.Add(parameter);
                                    Pickingcmd.ExecuteNonQuery();
                                    Pickingcmd.Parameters.Add(new SqlParameter("@return", SqlDbType.Int));
                                    Pickingcmd.Parameters["@return"].Direction = ParameterDirection.ReturnValue;
                                    SqlDataReader readerPicking = Pickingcmd.ExecuteReader();
                                    DataTable Pickingdt = new DataTable();
                                    Pickingdt.Load(readerPicking);
                                    con.Close();
                                    string CateGory = A6NoPaintSheet2.Cells[1, 1].Value.ToString();
                                    string Requisition_Type = CStr(A6NoPaintSheet2.Cells[1, 1].Value);
                                    //读取Excel数据
                                    for (int i = SRow; i < MRow; i++)
                                    {
                                        object ProductQty = A6NoPaintSheet2.Cells[i, 4].Value;
                                        //string Qty = A6NoPaintSheet.Cells[i, 4].Value.ToString();
                                        //float Qty1 = Convert.ToSingle(Qty);
                                        if (ProductQty == null || ProductQty.ToString() == "")
                                        {
                                            continue;
                                        }
                                        else
                                        {
                                            object ProductDescription = A6NoPaintSheet2.Cells[i, 3].Value;
                                            string Qty = ProductQty.ToString();
                                            if (System.Text.RegularExpressions.Regex.IsMatch(Qty, @"^[-+]?[0-9]*\.?[0-9]+$"))
                                            {
                                                if (Convert.ToSingle(Qty) > 0)
                                                {
                                                    DataRow A6NoPaintSheetTableRow = A6MianQiLingliaodan_Table2.NewRow();

                                                    A6NoPaintSheetTableRow["CateGory"] = CateGory.Trim().Substring(3, 2);
                                                    A6NoPaintSheetTableRow["ProductOrderId"] = ParentId;
                                                    A6NoPaintSheetTableRow["Requisition_Type"] = Requisition_Type.Trim().Substring(0, 8);
                                                    string GetMaterialBillsId = Guid.NewGuid().ToString().Substring(0, 12);
                                                    A6NoPaintSheetTableRow["GetMaterialBillsId"] = GetMaterialBillsId.ToUpper();

                                                    A6NoPaintSheetTableRow["FaceConduct"] = CateGory.Trim().Substring(1, 2);

                                                    A6NoPaintSheetTableRow["Texture"] = Texture;
                                                    for (int j = SColum; j < MColum; j++)
                                                    {
                                                        switch (j)
                                                        {
                                                            case 1:
                                                                A6NoPaintSheetTableRow["MaterialType"] = A6NoPaintSheet2.Cells[i, j].Value;
                                                                break;
                                                            case 3:
                                                                //string ProductDes = A6NoPaintSheet.Cells[i, j].Value.ToString();
                                                                for (int a = 0; a < Pickingdt.Rows.Count; a++)
                                                                {
                                                                    string ProductDes = Pickingdt.Rows[a]["ProductDescription"].ToString();
                                                                    if (ProductDes == ProductDescription.ToString())
                                                                    {
                                                                        string ProductName = Pickingdt.Rows[a]["ProductName"].ToString();
                                                                        if (ProductName == null || ProductName == "")
                                                                        {
                                                                            NullCount++;
                                                                            A6NoPaintSheetTableRow["ProductName"] = ProductName;
                                                                            A6NoPaintSheetTableRow["ProductDes"] = ProductDes;
                                                                            break;
                                                                        }
                                                                        else
                                                                        {
                                                                            A6NoPaintSheetTableRow["ProductName"] = ProductName;
                                                                            A6NoPaintSheetTableRow["ProductDes"] = ProductDes;
                                                                            break;
                                                                        }
                                                                    }
                                                                }
                                                                break;
                                                            case 4:
                                                                //string Qty=A6NoPaintSheet.Cells[i, j].Value.ToString();
                                                                //float Qty1=Convert.ToSingle( Qty);
                                                                A6NoPaintSheetTableRow["Qty"] = A6NoPaintSheet2.Cells[i, j].Value;
                                                                break;
                                                            case 5:
                                                                A6NoPaintSheetTableRow["Unit"] = A6NoPaintSheet2.Cells[i, j].Value;
                                                                break;
                                                            case 6:
                                                                A6NoPaintSheetTableRow["PackingConfirmed"] = A6NoPaintSheet2.Cells[i, j].Value;
                                                                break;
                                                        }
                                                    }
                                                    A6MianQiLingliaodan_Table2.Rows.Add(A6NoPaintSheetTableRow);
                                                }
                                            }
                                        }
                                    }
                                    A6MianQiLingliaodan_Table2.TableName = "GetMaterialBills3";
                                    if (A6MianQiLingliaodan_Table2.Rows.Count > 0)
                                    {
                                        DS.Tables.Add(A6MianQiLingliaodan_Table2);
                                    }
                                    //A6MianQiLingliaodan_Table2.Clear();
                                    A6MianQiLingliaodan_Table2.Dispose();
                                    //释放资源
                                    readerPicking.Close();
                                    readerPicking.Dispose();
                                    Pickingdt.Clear();
                                    Pickingdt.Dispose();
                                    PickingTable.Clear();
                                    PickingTable.Dispose();
                                    Texture = "";
                                }
                                catch (Exception ex)
                                {
                                    MessageBox.Show(ex.Message);
                                }
                            }
                        }

                        #endregion

                        //速美免漆下料单
                        #region
                        ExcelWorksheet MeiWenqiBlankingSheet = null;
                        MeiWenqiBlankingSheet = pck.Workbook.Worksheets["速美免漆下料单"];
                        if (MeiWenqiBlankingSheet != null)
                        {
                            if (MeiWenqiBlankingSheet.Hidden.ToString() == "Visible")
                            {
                                try
                                {
                                    //int MeiWenqiBlankingSheetSRow = MeiWenqiBlankingSheet.Dimension.Start.Row;
                                    int MeiWenqiBlankingSheetERow = MeiWenqiBlankingSheet.Dimension.End.Row;
                                    int MeiWenqiBlankingSheetSColum = MeiWenqiBlankingSheet.Dimension.Start.Column;
                                    //int MeiWenqiBlankingSheetEcolum = MeiWenqiBlankingSheet.Dimension.End.Column;

                                    int MeiWenqiBlankingSheetStartRow = 7;
                                    int MeiWenqiBlankingSheetEendRow = 0;
                                    int MeiWenqiBlankingSheetStartColum = 1;
                                    int MeiWenqiBlankingSheetEndColum = 12;

                                    for (int i = 65; i < MeiWenqiBlankingSheetERow; i++)
                                    {
                                        if (MeiWenqiBlankingSheet.Cells[i, 1].Value.ToString().Trim().Replace("\n", "") == "注：所有下料纹理方向均为高度方向如有材质、颜色、尺寸不明请和工艺组联系并确认！")
                                        {
                                            MeiWenqiBlankingSheetEendRow = i;
                                            break;
                                        }
                                    }

                                    for (int i = MeiWenqiBlankingSheetStartRow; i < MeiWenqiBlankingSheetEendRow; i++)
                                    {
                                        if (MeiWenqiBlankingSheet.Cells[i, 5].Value == null || MeiWenqiBlankingSheet.Cells[i, 5].Value.ToString() == "" || !System.Text.RegularExpressions.Regex.IsMatch(MeiWenqiBlankingSheet.Cells[i, 1].Value.ToString(), @"^[-+]?[0-9]*\.?[0-9]+$"))
                                        {
                                            continue;
                                        }
                                        DataRow MeiWenqiBlankingSheetTableRow = SuMeiMianqiXialiaodan_Table.NewRow();
                                        MeiWenqiBlankingSheetTableRow["ProductOrderId"] = ParentId;
                                        string IssueMaterialBillsId = Guid.NewGuid().ToString().Substring(0, 12);
                                        MeiWenqiBlankingSheetTableRow["IssueMaterialBillsId"] = IssueMaterialBillsId.ToUpper();
                                        MeiWenqiBlankingSheetTableRow["HandType"] = MeiWenqiBlankingSheet.Cells[3, 2].Value;
                                        MeiWenqiBlankingSheetTableRow["FaceConduct"] = MeiWenqiBlankingSheet.Cells[3, 4].Value;
                                        string PlateType = MeiWenqiBlankingSheet.Cells[1, 1].Value.ToString();
                                        MeiWenqiBlankingSheetTableRow["PlateType"] = PlateType.Substring(5, 2);//板件类型
                                        MeiWenqiBlankingSheetTableRow["Remark"] = MeiWenqiBlankingSheet.Cells[5, 11].Value;

                                        MeiWenqiBlankingSheetTableRow["Stytle"] = MeiWenqiBlankingSheet.Cells[3, 7].Value;//款式
                                        MeiWenqiBlankingSheetTableRow["SealingSide"] = MeiWenqiBlankingSheet.Cells[2, 9].Value;//门板封边
                                        Texture = MeiWenqiBlankingSheet.Cells[4, 2].Value.ToString();//材质
                                        for (int j = MeiWenqiBlankingSheetStartColum; j < MeiWenqiBlankingSheetEndColum; j++)
                                        {
                                            switch (j)
                                            {
                                                case 1:
                                                    MeiWenqiBlankingSheetTableRow["OrderDetailId"] = MeiWenqiBlankingSheet.Cells[i, j].Value;
                                                    break;
                                                case 2:
                                                    MeiWenqiBlankingSheetTableRow["FLong"] = MeiWenqiBlankingSheet.Cells[i, j].Value;
                                                    break;
                                                case 3:
                                                    MeiWenqiBlankingSheetTableRow["FWide"] = MeiWenqiBlankingSheet.Cells[i, j].Value;
                                                    break;
                                                case 4:
                                                    MeiWenqiBlankingSheetTableRow["Qty"] = MeiWenqiBlankingSheet.Cells[i, j].Value;
                                                    break;
                                                case 5:
                                                    //object ThisPlateName = MeiWenqiBlankingSheet.Cells[i, j].Value;
                                                    //if (ThisPlateName == null || ThisPlateName.ToString() == "")
                                                    //{
                                                    //    IsNull = true;
                                                    //    ThisSheetName = MeiWenqiBlankingSheet.Name.ToString();
                                                    //}
                                                    MeiWenqiBlankingSheetTableRow["PlateName"] = PlateType.Substring(1, 5);
                                                    break;
                                                case 6:
                                                    object ThisCutThick = MeiWenqiBlankingSheet.Cells[i, j].Value;
                                                    if (ThisCutThick == null || ThisCutThick.ToString() == "")
                                                    {
                                                        IsNull = true;
                                                        ThisSheetName = MeiWenqiBlankingSheet.Name.ToString();
                                                    }
                                                    MeiWenqiBlankingSheetTableRow["CutThick"] = ThisCutThick;
                                                    break;
                                                case 7:
                                                    MeiWenqiBlankingSheetTableRow["CutLong"] = MeiWenqiBlankingSheet.Cells[i, j].Value;
                                                    break;
                                                case 8:
                                                    MeiWenqiBlankingSheetTableRow["CutWide"] = MeiWenqiBlankingSheet.Cells[i, j].Value;
                                                    break;
                                                case 9:
                                                    MeiWenqiBlankingSheetTableRow["CutQty"] = MeiWenqiBlankingSheet.Cells[i, j].Value;
                                                    break;
                                                case 10:
                                                    MeiWenqiBlankingSheetTableRow["Remark"] = MeiWenqiBlankingSheet.Cells[i, j].Value;
                                                    break;
                                                case 11:
                                                    object MaterialNote = MeiWenqiBlankingSheet.Cells[i, j].Value;//材质备注
                                                    MeiWenqiBlankingSheetTableRow["MaterialNote"] = MaterialNote;
                                                    //将dataset的表填充到datatable
                                                    DataTable TB_No_Vein = VeinDs.Tables["No_Vein"];
                                                    //指定的字符串变量，根据这个变量查询table是否包含这条数据
                                                    //String BWART1 = VeinDs.Tables["No_Vein"].Rows[0][1].ToString();
                                                    //给dataview绑定数据
                                                    DataView Dv_No_Vein = TB_No_Vein.DefaultView;
                                                    //dataview的筛选属性，等于号后面是条件（示例为查看table里面BWART列像BWART1的行）
                                                    Dv_No_Vein.RowFilter = "PlateType = '" + MaterialNote + "'";
                                                    //查询到的行（>0为有一到多条数据，=0没有查询到数据）
                                                    if (Dv_No_Vein.Count > 0)//如果材质表中包含这个材质说明此材质无纹理
                                                    {
                                                        MeiWenqiBlankingSheetTableRow["Vein"] = "0";//无纹理
                                                    }
                                                    else
                                                    {
                                                        ////将dataset的表填充到datatable
                                                        //DataTable TB_Excel_Vein = VeinDs.Tables["Excel_Vein"];
                                                        ////指定的字符串变量，根据这个变量查询table是否包含这条数据
                                                        ////String BWART1 = VeinDs.Tables["No_Vein"].Rows[0][1].ToString();
                                                        ////给dataview绑定数据
                                                        //DataView Dv_Excel_Vein = TB_Excel_Vein.DefaultView;
                                                        ////dataview的筛选属性，等于号后面是条件（示例为查看table里面BWART列像BWART1的行）
                                                        //Dv_Excel_Vein.RowFilter = "PlateName = '" + MaterialNote + "'";
                                                        ////查询到的行（>0为有一到多条数据，=0没有查询到数据）
                                                        //if (Dv_Excel_Vein.Count > 0)//横纹板件表中如果有这个板件说明该板件纹理为横纹
                                                        //{
                                                        //    MeiWenqiBlankingSheetTableRow["Vein"] = "2";//横纹
                                                        //}
                                                        //else
                                                        //{
                                                        //    MeiWenqiBlankingSheetTableRow["Vein"] = "1";//竖纹
                                                        //}
                                                        MeiWenqiBlankingSheetTableRow["Vein"] = "1";//竖纹
                                                    }
                                                    // MeiWenqiBlankingSheetTableRow["Vein"] = MeiWenqiBlankingSheet.Cells[3, 5].Value;//门板纹理
                                                    break;
                                                //case 12:
                                                //    MeiWenqiBlankingSheetTableRow["DisplayMaterialSummary"] = MeiWenqiBlankingSheet.Cells[i, j].Value;
                                                //    break;
                                                //case 13:
                                                //    MeiWenqiBlankingSheetTableRow["AreaOfContour"] = MeiWenqiBlankingSheet.Cells[i, j].Value;
                                                //    break;
                                            }
                                        }
                                        SuMeiMianqiXialiaodan_Table.Rows.Add(MeiWenqiBlankingSheetTableRow);
                                    }
                                    SuMeiMianqiXialiaodan_Table.TableName = "IssueMaterialBills2";
                                    if (SuMeiMianqiXialiaodan_Table.Rows.Count > 0)
                                    {
                                        DS.Tables.Add(SuMeiMianqiXialiaodan_Table);
                                    }
                                    SuMeiMianqiLingliaodan_Table.Dispose();
                                }
                                catch (Exception ex)
                                {
                                    MessageBox.Show(ex.Message);
                                }
                            }
                        }
                        #endregion
                        //if (IsNull == false)
                        //{
                            //速美免漆领料单
                            #region
                            ExcelWorksheet MeiWenqiRequisitionSheet = null;
                            MeiWenqiRequisitionSheet = pck.Workbook.Worksheets["速美免漆领料单"];
                            if (MeiWenqiRequisitionSheet != null)
                            {
                                if (MeiWenqiRequisitionSheet.Hidden.ToString() == "Visible")
                                {
                                    try
                                    {
                                        int MeiWenqiRequisitionSheetStartRow = MeiWenqiRequisitionSheet.Dimension.Start.Row;
                                        int MeiWenqiRequisitionSheetEndRow = MeiWenqiRequisitionSheet.Dimension.End.Row;
                                        int MeiWenqiRequisitionSheetStartColum = MeiWenqiRequisitionSheet.Dimension.Start.Column;
                                        int MeiWenqiRequisitionSheetEndColum = MeiWenqiRequisitionSheet.Dimension.End.Column;
                                        int MeiWenqiRequisitionSheetSRow = 5;
                                        int MeiWenqiRequisitionSheetERow = 0;
                                        int MeiWenqiRequisitionSheetSColum = 1;
                                        int MeiWenqiRequisitionSheetEColum = 6;

                                        for (int i = MeiWenqiRequisitionSheetSRow; i < MeiWenqiRequisitionSheetEndRow; i++)
                                        {
                                            if (MeiWenqiRequisitionSheet.Cells[i, 1].Value == null)
                                            {
                                                continue;
                                            }
                                            if (MeiWenqiRequisitionSheet.Cells[i, 1].Value.ToString() == "配料")
                                            {
                                                MeiWenqiRequisitionSheetERow = i;
                                                break;
                                            }
                                        }

                                        DataTable ProductTable = new DataTable();
                                        ProductTable.Columns.Add(string.Format("ProductDes"), Type.GetType("System.String"));
                                        ProductTable.Columns.Add(string.Format("ProductName"), Type.GetType("System.String"));

                                        DataRow ProductTableRow = ProductTable.NewRow();
                                        for (int i = MeiWenqiRequisitionSheetSRow; i < MeiWenqiRequisitionSheetERow; i++)
                                        {
                                            string Qty = CStr(MeiWenqiRequisitionSheet.Cells[i, 4].Value);
                                            if (Qty == null || Qty == "" || Qty == "数量" || Convert.ToSingle(Qty) <= 0)
                                            {
                                                continue;
                                            }
                                            object ProductDes = MeiWenqiRequisitionSheet.Cells[i, 3].Value;
                                            ProductTableRow["ProductDes"] = MeiWenqiRequisitionSheet.Cells[i, 3].Value;
                                            ProductTable.Rows.Add(ProductTableRow.ItemArray);
                                        }
                                        SqlConnection conn = new SqlConnection("Data Source=192.168.124.72;Initial Catalog=OrBitXI;User ID=sa;PassWord=admin@2017");
                                        conn.Open();
                                        //调用存储过程根据物料描述获取到物料编号存放在另一个datatable中
                                        SqlCommand Productcmd = new SqlCommand();
                                        Productcmd.CommandText = "Pro_GetProductName";
                                        Productcmd.Connection = conn;
                                        Productcmd.CommandType = CommandType.StoredProcedure;
                                        SqlParameter parameters =
                                        new SqlParameter("@Pro_GetProductName", SqlDbType.Structured)
                                        {
                                            Value = ProductTable
                                        };

                                        Productcmd.Parameters.Add(parameters);
                                        Productcmd.ExecuteNonQuery();
                                        Productcmd.Parameters.Add(new SqlParameter("@return", SqlDbType.Int));
                                        Productcmd.Parameters["@return"].Direction = ParameterDirection.ReturnValue;
                                        SqlDataReader readerproduct = Productcmd.ExecuteReader();
                                        DataTable ProductDt = new DataTable();
                                        ProductDt.Load(readerproduct);
                                        conn.Close();
                                        //读取Excel数据
                                        for (int i = MeiWenqiRequisitionSheetSRow; i < MeiWenqiRequisitionSheetERow; i++)
                                        {
                                            DataRow MeiWenqiRequisitionSheetTableRow = SuMeiMianqiLingliaodan_Table.NewRow();
                                            //string CellValue = MeiWenqiRequisitionSheet.Cells[i, 2].Value.ToString();||!System.Text.RegularExpressions.Regex.IsMatch(CellValue, @"^[-+]?[0-9]*\.?[0-9]+$")
                                            object ProductDes = MeiWenqiRequisitionSheet.Cells[i, 3].Value;
                                            if (ProductDes == null || ProductDes.ToString() == "" || ProductDes.ToString() == "材料名称")
                                            {
                                                continue;
                                            }

                                            MeiWenqiRequisitionSheetTableRow["ProductOrderId"] = ParentId;
                                            string CateGory = MeiWenqiRequisitionSheet.Cells[1, 1].Value.ToString();
                                            MeiWenqiRequisitionSheetTableRow["CateGory"] = CateGory.Substring(5, 2);
                                            for (int a = 0; a < ProductDt.Rows.Count; a++)
                                            {
                                                string ProductName = ProductDt.Rows[a]["ProductName"].ToString();
                                                string ProductDescription = ProductDt.Rows[a]["ProductDescription"].ToString();
                                                if (ProductDescription == MeiWenqiRequisitionSheet.Cells[i, 3].Value.ToString())
                                                {
                                                    if (ProductName == null || ProductName == "")
                                                    {
                                                        NullCount++;
                                                    }
                                                    MeiWenqiRequisitionSheetTableRow["ProductName"] = ProductName;
                                                    break;
                                                }
                                            }
                                            string GetMaterialBillsId = Guid.NewGuid().ToString().Substring(0, 12);
                                            MeiWenqiRequisitionSheetTableRow["GetMaterialBillsId"] = GetMaterialBillsId.ToUpper();
                                            MeiWenqiRequisitionSheetTableRow["Texture"] = Texture;
                                            MeiWenqiRequisitionSheetTableRow["FaceConduct"] = CateGory.Substring(1,4);
                                            for (int j = MeiWenqiRequisitionSheetSColum; j < MeiWenqiRequisitionSheetEColum; j++)
                                            {
                                                switch (j)
                                                {
                                                    case 1:
                                                        MeiWenqiRequisitionSheetTableRow["MaterialType"] = GetMergeValue(MeiWenqiRequisitionSheet, i, j);
                                                        break;
                                                    case 3:
                                                        MeiWenqiRequisitionSheetTableRow["ProductDes"] = MeiWenqiRequisitionSheet.Cells[i, j].Value;
                                                        break;
                                                    case 4:
                                                        MeiWenqiRequisitionSheetTableRow["Qty"] = MeiWenqiRequisitionSheet.Cells[i, j].Value;
                                                        break;
                                                    case 5:
                                                        MeiWenqiRequisitionSheetTableRow["Unit"] = MeiWenqiRequisitionSheet.Cells[i, j].Value;
                                                        break;
                                                    case 6:
                                                        MeiWenqiRequisitionSheetTableRow["Remark"] = MeiWenqiRequisitionSheet.Cells[i, j].Value;
                                                        break;
                                                }
                                            }
                                            SuMeiMianqiLingliaodan_Table.Rows.Add(MeiWenqiRequisitionSheetTableRow);
                                        }
                                        SuMeiMianqiLingliaodan_Table.TableName = "GetMaterialBills2";
                                        if (SuMeiMianqiLingliaodan_Table.Rows.Count > 0)
                                        {
                                            DS.Tables.Add(SuMeiMianqiLingliaodan_Table);
                                        }
                                        SuMeiMianqiLingliaodan_Table.Dispose();
                                        //释放资源
                                        readerproduct.Close();
                                        readerproduct.Dispose();
                                        ProductDt.Clear();
                                        ProductDt.Dispose();
                                    }
                                    catch (Exception ex)
                                    {
                                        MessageBox.Show(ex.Message);
                                    }
                                }
                            }
                            #endregion
                            //aa: 
                            //吸塑门板下料单
                            #region
                            ExcelWorksheet FeedSingleBlisterDoorPlankSheet = pck.Workbook.Worksheets["吸塑门板下料单"];
                            if (FeedSingleBlisterDoorPlankSheet != null)
                            {
                                if (FeedSingleBlisterDoorPlankSheet.Hidden.ToString() == "Visible")
                                {
                                    try
                                    {
                                        int StartColums = FeedSingleBlisterDoorPlankSheet.Dimension.Start.Column;
                                        int EndCol = FeedSingleBlisterDoorPlankSheet.Dimension.End.Column;
                                        int SRows = FeedSingleBlisterDoorPlankSheet.Dimension.Start.Row;
                                        int ERows = FeedSingleBlisterDoorPlankSheet.Dimension.End.Row;

                                        int SColum = 1;
                                        int Ecolum = 14;
                                        int Srow = 7;
                                        int Erow = 0;

                                        for (int i = Srow; i < ERows; i++)
                                        {
                                            object PlateName = FeedSingleBlisterDoorPlankSheet.Cells[i, 1].Value;
                                            if (PlateName == null)
                                            {
                                                continue;
                                            }
                                            if (PlateName.ToString() == "制单人：")
                                            {
                                                Erow = i - 4;
                                                break;
                                            }
                                        }



                                        for (int i = Srow; i < Erow; i++)
                                        {
                                            DataRow FeedSingleBlisterDoorPlankSheetTableRow = XiSuMenbanXialiaodan_Table.NewRow();

                                            object PlateName = FeedSingleBlisterDoorPlankSheet.Cells[i, 9].Value;
                                            if (PlateName == null)
                                            {
                                                continue;
                                            }
                                            if (System.Text.RegularExpressions.Regex.IsMatch(PlateName.ToString(), @"^[-+]?[0-9]*\.?[0-9]+$"))
                                            {
                                                if (Convert.ToSingle(PlateName) > 0)
                                                {
                                                    string IssueMaterialBillsId = Guid.NewGuid().ToString().Substring(0, 12);
                                                    FeedSingleBlisterDoorPlankSheetTableRow["IssueMaterialBillsId"] = IssueMaterialBillsId.ToUpper();
                                                    FeedSingleBlisterDoorPlankSheetTableRow["ProductOrderId"] = ParentId;
                                                    FeedSingleBlisterDoorPlankSheetTableRow["HandType"] = FeedSingleBlisterDoorPlankSheet.Cells[3, 2].Value;
                                                    string PlateType = FeedSingleBlisterDoorPlankSheet.Cells[1, 1].Value.ToString();
                                                    FeedSingleBlisterDoorPlankSheetTableRow["PlateType"] = PlateType.Substring(1, 4);//板件类型
                                                    Texture = FeedSingleBlisterDoorPlankSheet.Cells[4, 2].Value.ToString();//材质（传给领料单）

                                                    FeedSingleBlisterDoorPlankSheetTableRow["Stytle"] = FeedSingleBlisterDoorPlankSheet.Cells[3, 7].Value;//款式
                                                    //FeedSingleBlisterDoorPlankSheetTableRow["SealingSide"] = FeedSingleBlisterDoorPlankSheet.Cells[4, 2].Value;//门板封边信息
                                                    for (int j = SColum; j < Ecolum; j++)
                                                    {
                                                        ExcelRange Rang = FeedSingleBlisterDoorPlankSheet.Cells[i, j];
                                                        object objectCellValue = FeedSingleBlisterDoorPlankSheet.GetValue(i, j);//单元格数据
                                                        string CellValue = objectCellValue != null ? objectCellValue.ToString().Trim() : "";
                                                        if (Rang.Merge)
                                                        {
                                                            CellValue = GetMergeValue(FeedSingleBlisterDoorPlankSheet, i, j);

                                                        }
                                                        switch (j)
                                                        {
                                                            case 1:
                                                                FeedSingleBlisterDoorPlankSheetTableRow["OrderDetailId"] = FeedSingleBlisterDoorPlankSheet.Cells[i, j].Value;
                                                                break;
                                                            case 2:
                                                                if (CellValue == "" || CellValue == null)
                                                                {
                                                                    FeedSingleBlisterDoorPlankSheetTableRow["FLong"] = 0;
                                                                }
                                                                else
                                                                {
                                                                    FeedSingleBlisterDoorPlankSheetTableRow["FLong"] = CellValue;
                                                                }
                                                                //FeedSingleBlisterDoorPlankSheetTableRow["FWide"] = FeedSingleBlisterDoorPlankSheet.Cells[i, j].Value;
                                                                break;
                                                            case 3:
                                                                if (CellValue == "" || CellValue == null)
                                                                {
                                                                    FeedSingleBlisterDoorPlankSheetTableRow["FWide"] = 0;
                                                                }
                                                                else
                                                                {
                                                                    FeedSingleBlisterDoorPlankSheetTableRow["FWide"] = CellValue;
                                                                }
                                                                //FeedSingleBlisterDoorPlankSheetTableRow["FHigh"] = FeedSingleBlisterDoorPlankSheet.Cells[i, j].Value;
                                                                break;
                                                            case 4:
                                                                if (CellValue == "" || CellValue == null)
                                                                {
                                                                    FeedSingleBlisterDoorPlankSheetTableRow["Qty"] = 0;
                                                                }
                                                                else
                                                                {
                                                                    FeedSingleBlisterDoorPlankSheetTableRow["Qty"] = CellValue;
                                                                }
                                                                //FeedSingleBlisterDoorPlankSheetTableRow["Qty"] = FeedSingleBlisterDoorPlankSheet.Cells[i, j].Value;
                                                                break;
                                                            case 5:
                                                                //object ThisPlateName = FeedSingleBlisterDoorPlankSheet.Cells[i, j].Value;
                                                                //if (ThisPlateName == null || ThisPlateName.ToString() == "")
                                                                //{
                                                                //    IsNull = true;
                                                                //    ThisSheetName = FeedSingleBlisterDoorPlankSheet.Name.ToString();
                                                                //}
                                                                FeedSingleBlisterDoorPlankSheetTableRow["PlateName"] = PlateType.Substring(1, 4);
                                                                break;
                                                            case 6:
                                                                if (CellValue == "" || CellValue == null)
                                                                {
                                                                    IsNull = true;
                                                                    ThisSheetName = FeedSingleBlisterDoorPlankSheet.Name.ToString();
                                                                }
                                                                else
                                                                {
                                                                    FeedSingleBlisterDoorPlankSheetTableRow["CutThick"] = CellValue;
                                                                }
                                                                //FeedSingleBlisterDoorPlankSheetTableRow["CutThick"] = FeedSingleBlisterDoorPlankSheet.Cells[i, j].Value;
                                                                break;
                                                            case 7:
                                                                if (CellValue == "" || CellValue == null)
                                                                {
                                                                    FeedSingleBlisterDoorPlankSheetTableRow["CutLong"] = 0;
                                                                }
                                                                else
                                                                {
                                                                    FeedSingleBlisterDoorPlankSheetTableRow["CutLong"] = CellValue;
                                                                }
                                                                //FeedSingleBlisterDoorPlankSheetTableRow["CutWide"] = FeedSingleBlisterDoorPlankSheet.Cells[i, j].Value;
                                                                break;
                                                            case 8:
                                                                if (CellValue == "" || CellValue == null)
                                                                {
                                                                    FeedSingleBlisterDoorPlankSheetTableRow["CutWide"] = 0;
                                                                }
                                                                else
                                                                {
                                                                    FeedSingleBlisterDoorPlankSheetTableRow["CutWide"] = CellValue;
                                                                }
                                                                //FeedSingleBlisterDoorPlankSheetTableRow["CutHigh"] = FeedSingleBlisterDoorPlankSheet.Cells[i, j].Value;
                                                                break;
                                                            case 9:
                                                                if (CellValue == "" || CellValue == null)
                                                                {
                                                                    FeedSingleBlisterDoorPlankSheetTableRow["CutQty"] = 0;
                                                                }
                                                                else
                                                                {
                                                                    FeedSingleBlisterDoorPlankSheetTableRow["CutQty"] = CellValue;
                                                                }
                                                                //FeedSingleBlisterDoorPlankSheetTableRow["CutQty"] = FeedSingleBlisterDoorPlankSheet.Cells[i, j].Value;
                                                                break;
                                                            case 10:

                                                                FeedSingleBlisterDoorPlankSheetTableRow["MaterialDescription"] = FeedSingleBlisterDoorPlankSheet.Cells[i, j].Value;
                                                                break;
                                                            case 11:
                                                                object MaterialNote = FeedSingleBlisterDoorPlankSheet.Cells[i, j].Value;
                                                                //M30柚木(竖纹)
                                                                //object MaterialNote = "M30柚木(竖纹)";
                                                                FeedSingleBlisterDoorPlankSheetTableRow["MaterialNote"] = MaterialNote;
                                                                //将dataset的表填充到datatable
                                                                DataTable TB_No_Vein = VeinDs.Tables["No_Vein"];
                                                                //指定的字符串变量，根据这个变量查询table是否包含这条数据
                                                                //String BWART1 = VeinDs.Tables["No_Vein"].Rows[0][1].ToString();
                                                                //给dataview绑定数据
                                                                DataView Dv_No_Vein = TB_No_Vein.DefaultView;
                                                                //dataview的筛选属性，等于号后面是条件（示例为查看table里面BWART列像BWART1的行）
                                                                Dv_No_Vein.RowFilter = "PlateType = '" + MaterialNote + "'";
                                                                //查询到的行（>0为有一到多条数据，=0没有查询到数据）
                                                                if (Dv_No_Vein.Count > 0)//如果材质表中包含这个材质说明此材质无纹理
                                                                {
                                                                    FeedSingleBlisterDoorPlankSheetTableRow["Vein"] = "0";//无纹理
                                                                }
                                                                else
                                                                {
                                                                    ////将dataset的表填充到datatable
                                                                    //DataTable TB_Excel_Vein = VeinDs.Tables["Excel_Vein"];
                                                                    ////指定的字符串变量，根据这个变量查询table是否包含这条数据
                                                                    ////String BWART1 = VeinDs.Tables["No_Vein"].Rows[0][1].ToString();
                                                                    ////给dataview绑定数据
                                                                    //DataView Dv_Excel_Vein = TB_Excel_Vein.DefaultView;
                                                                    ////dataview的筛选属性，等于号后面是条件（示例为查看table里面BWART列像BWART1的行）
                                                                    //Dv_Excel_Vein.RowFilter = "PlateName = '" + MaterialNote + "'";
                                                                    ////查询到的行（>0为有一到多条数据，=0没有查询到数据）
                                                                    //if (Dv_Excel_Vein.Count > 0)//横纹板件表中如果有这个板件说明该板件纹理为横纹
                                                                    //{
                                                                    //    FeedSingleBlisterDoorPlankSheetTableRow["Vein"] = "2";//横纹
                                                                    //}
                                                                    //else
                                                                    //{
                                                                    //    FeedSingleBlisterDoorPlankSheetTableRow["Vein"] = "1";//竖纹
                                                                    //}
                                                                    FeedSingleBlisterDoorPlankSheetTableRow["Vein"] = "1";//竖纹
                                                                }

                                                                // FeedSingleBlisterDoorPlankSheetTableRow["Vein"] = MaterialNote.ToString().Substring(MaterialNote.ToString().LastIndexOf("(") + 1, 2);//纹理
                                                                break;
                                                            //case 12:
                                                            //    FeedSingleBlisterDoorPlankSheetTableRow["FaceConduct"] = FeedSingleBlisterDoorPlankSheet.Cells[i, j].Value;
                                                            //    break;
                                                            case 13:
                                                                FeedSingleBlisterDoorPlankSheetTableRow["Remark"] = FeedSingleBlisterDoorPlankSheet.Cells[i, j].Value;
                                                                break;
                                                        }
                                                    }
                                                    XiSuMenbanXialiaodan_Table.Rows.Add(FeedSingleBlisterDoorPlankSheetTableRow);
                                                }
                                            }
                                        }
                                        XiSuMenbanXialiaodan_Table.TableName = "IssueMaterialBills3";
                                        if (XiSuMenbanXialiaodan_Table.Rows.Count > 0)
                                        {
                                            DS.Tables.Add(XiSuMenbanXialiaodan_Table);
                                        }
                                        XiSuMenbanXialiaodan_Table.Dispose();
                                    }
                                    catch (Exception ex)
                                    {
                                        MessageBox.Show(ex.Message);
                                    }
                                }
                            }
                            #endregion
                            //if (IsNull == false)
                            //{
                            //    //aa:
                                //吸塑门板领料单
                                #region
                                ExcelWorksheet SuctionMoldingDoorSheetMaterialList = null;
                                SuctionMoldingDoorSheetMaterialList = pck.Workbook.Worksheets["吸塑门板领料单"];
                                if (SuctionMoldingDoorSheetMaterialList != null)
                                {
                                    if (SuctionMoldingDoorSheetMaterialList.Hidden.ToString() == "Visible")
                                    {
                                        try
                                        {
                                            int StartColum = SuctionMoldingDoorSheetMaterialList.Dimension.Start.Column;
                                            int EndColum = SuctionMoldingDoorSheetMaterialList.Dimension.End.Column;
                                            int StartRow = SuctionMoldingDoorSheetMaterialList.Dimension.Start.Row;
                                            int EndRow = SuctionMoldingDoorSheetMaterialList.Dimension.End.Row;

                                            int startColums = 1;
                                            int EndColums = 7;
                                            int StartRows = 6;
                                            int EndRows = 0;

                                            for (int i = StartRows; i < EndRow; i++)
                                            {
                                                object endRowName = SuctionMoldingDoorSheetMaterialList.Cells[i, 1].Value;
                                                if (endRowName == null)
                                                {
                                                    continue;
                                                }
                                                if (endRowName.ToString() == "配料")
                                                {
                                                    EndRows = i - 1;
                                                    break;
                                                }
                                            }

                                            DataTable ProductsTable = new DataTable();
                                            ProductsTable.Columns.Add(string.Format("ProductDes"), Type.GetType("System.String"));
                                            ProductsTable.Columns.Add(string.Format("ProductName"), Type.GetType("System.String"));
                                            DataRow ProductsTableRow = ProductsTable.NewRow();

                                            for (int i = StartRows; i < EndRows; i++)
                                            {
                                                string Qty = CStr(SuctionMoldingDoorSheetMaterialList.Cells[i, 4].Value);
                                                if (Qty == null || Qty == "" || Convert.ToSingle(Qty) <= 0)
                                                {
                                                    continue;
                                                }
                                                object ProductDess = SuctionMoldingDoorSheetMaterialList.Cells[i, 3].Value;
                                                ProductsTableRow["ProductDes"] = SuctionMoldingDoorSheetMaterialList.Cells[i, 3].Value;

                                                ProductsTable.Rows.Add(ProductsTableRow.ItemArray);
                                            }
                                            SqlConnection connection = new SqlConnection("Data Source=192.168.124.72;Initial Catalog=OrBitXI;User ID=sa;PassWord=admin@2017");
                                            connection.Open();
                                            SqlCommand com = new SqlCommand();
                                            com.Connection = connection;
                                            com.CommandText = "Pro_GetproductName";
                                            com.CommandType = CommandType.StoredProcedure;
                                            SqlParameter pare = new SqlParameter("@Pro_GetproductName", SqlDbType.Structured)
                                            {
                                                Value = ProductsTable
                                            };
                                            com.Parameters.Add(pare);
                                            com.ExecuteNonQuery();
                                            com.Parameters.Add(new SqlParameter("@return", SqlDbType.Int));
                                            com.Parameters["@return"].Direction = ParameterDirection.ReturnValue;
                                            SqlDataReader read = com.ExecuteReader();
                                            DataTable ProductTB = new DataTable();
                                            ProductTB.Load(read);
                                            //DS.Tables.Add(ProductTB);
                                            connection.Close();
                                            read.Close();
                                            read.Dispose();
                                            DataRow SuctionMoldingDoorSheetMaterialListTableRow = XiSuMenbanLingliaodan_Table.NewRow();
                                            for (int i = StartRows; i < EndRows; i++)
                                            {
                                                string QTY = CStr(SuctionMoldingDoorSheetMaterialList.Cells[i, 4].Value);
                                                if (QTY == null || QTY == "" || Convert.ToSingle(QTY) <= 0)
                                                {
                                                    continue;
                                                }
                                                else
                                                {
                                                    string ProductDes = CStr(SuctionMoldingDoorSheetMaterialList.Cells[i, 3].Value);
                                                    string ProductQty = SuctionMoldingDoorSheetMaterialList.Cells[i, 4].Value.ToString();
                                                    if (Convert.ToSingle(ProductQty) > 0)
                                                    {
                                                        string CateGory = SuctionMoldingDoorSheetMaterialList.Cells[1, 1].Value.ToString();
                                                        SuctionMoldingDoorSheetMaterialListTableRow["CateGory"] = CateGory.Substring(3, 2);
                                                        string GetMaterialBillsId = Guid.NewGuid().ToString().Substring(0, 12);
                                                        SuctionMoldingDoorSheetMaterialListTableRow["GetMaterialBillsId"] = GetMaterialBillsId.ToUpper();
                                                        SuctionMoldingDoorSheetMaterialListTableRow["ProductOrderId"] = ParentId;
                                                        SuctionMoldingDoorSheetMaterialListTableRow["FaceConduct"] = CateGory.Substring(1,2);
                                                        SuctionMoldingDoorSheetMaterialListTableRow["Texture"] = Texture;
                                                        for (int j = startColums; j < EndColums; j++)
                                                        {
                                                            switch (j)
                                                            {
                                                                case 1:
                                                                    SuctionMoldingDoorSheetMaterialListTableRow["MaterialType"] = GetMergeValue(SuctionMoldingDoorSheetMaterialList, i, j);
                                                                    break;
                                                                case 3:
                                                                    for (int a = 0; a < ProductTB.Rows.Count; a++)
                                                                    {
                                                                        string ProductDescription = ProductTB.Rows[a]["ProductDescription"].ToString();
                                                                        if (ProductDes == ProductDescription)
                                                                        {
                                                                            object ProductName = ProductTB.Rows[a]["ProductName"];
                                                                            if (ProductName == null || ProductName.ToString() == "")
                                                                            {
                                                                                NullCount++;
                                                                            }
                                                                            SuctionMoldingDoorSheetMaterialListTableRow["ProductName"] = ProductName;

                                                                            SuctionMoldingDoorSheetMaterialListTableRow["ProductDes"] = ProductDescription;
                                                                            break;
                                                                        }
                                                                    }
                                                                    break;
                                                                case 4:
                                                                    SuctionMoldingDoorSheetMaterialListTableRow["Qty"] = SuctionMoldingDoorSheetMaterialList.Cells[i, j].Value;
                                                                    break;
                                                                case 5:
                                                                    SuctionMoldingDoorSheetMaterialListTableRow["Unit"] = SuctionMoldingDoorSheetMaterialList.Cells[i, j].Value;
                                                                    break;
                                                                case 6:
                                                                    SuctionMoldingDoorSheetMaterialListTableRow["PackingConfirmed"] = SuctionMoldingDoorSheetMaterialList.Cells[i, j].Value;
                                                                    break;
                                                            }
                                                        }
                                                        XiSuMenbanLingliaodan_Table.Rows.Add(SuctionMoldingDoorSheetMaterialListTableRow.ItemArray);
                                                    }
                                                }
                                            }
                                            XiSuMenbanLingliaodan_Table.TableName = "GetMaterialBills3";
                                            if (XiSuMenbanLingliaodan_Table.Rows.Count > 0)
                                            {
                                                DS.Tables.Add(XiSuMenbanLingliaodan_Table);
                                            }
                                            XiSuMenbanLingliaodan_Table.Dispose();
                                            ProductTB.Clear();
                                            ProductTB.Dispose();
                                        }
                                        catch (Exception ex)
                                        {
                                            MessageBox.Show(ex.Message);
                                        }
                                    }
                                }
                                #endregion


                                goto bb;
                                //无毒系列作业单 
                                #region
                                try
                                {
                                    ExcelWorksheet Non_toxicSeriesOfMaterialsSheet = null;
                                    Non_toxicSeriesOfMaterialsSheet = pck.Workbook.Worksheets["无毒系列作业单"];
                                    if (Non_toxicSeriesOfMaterialsSheet != null)
                                    {
                                        if (Non_toxicSeriesOfMaterialsSheet.Hidden.ToString() == "Visible")
                                        {
                                            //if (Sheet.Name == "无毒系列作业单")
                                            //{
                                            int maxColumnNum = Non_toxicSeriesOfMaterialsSheet.Dimension.End.Column;//最大列
                                            int minColumnNum = Non_toxicSeriesOfMaterialsSheet.Dimension.Start.Column;//最小列
                                            int minRowNum = Non_toxicSeriesOfMaterialsSheet.Dimension.Start.Row;//最小行
                                            int maxRowNum = Non_toxicSeriesOfMaterialsSheet.Dimension.End.Row;//最大行
                                            int sRowNum = 7;//开始行
                                            int eRowNum = 0;//结束行
                                            int sAColNum = 1;//区域A的开始栏位
                                            int eAColNum = 13;//区域A的结束栏位
                                            string PlateName = "";
                                            string OrderDetailId = "";
                                            //获取结束行
                                            for (int d = 1; d < maxRowNum; d++)
                                            {
                                                if ((CStr(Non_toxicSeriesOfMaterialsSheet.Cells[d, 1].Value)).Trim() == "拆解人")
                                                {
                                                    eRowNum = d - 1;
                                                    break;
                                                }
                                            }
                                            ////创建datatable存放箱体序号
                                            //DataTable BoxNum = new DataTable();
                                            //BoxNum.Columns.Add(string.Format("BoxNumId"), Type.GetType("System.String"));
                                            //BoxNum.Columns.Add(string.Format("BoxNum"), Type.GetType("System.String"));
                                            //BoxNum.Columns.Add(string.Format("OrderDetailId"), Type.GetType("System.String"));
                                            //BoxNum.Columns.Add(string.Format("Identification"), Type.GetType("System.String"));
                                            //DataRow BoxRow = BoxNum.NewRow();
                                            //for (int i = sRowNum; i < eRowNum; i++)
                                            //{
                                            //    string BoxNumId = CStr(Sheet.Cells[i, 1].Value);
                                            //    string BoxName = CStr(Sheet.Cells[i, 5].Value);
                                            //    if (BoxName == "" || BoxName == null)
                                            //    {
                                            //        continue;
                                            //    }
                                            //    else
                                            //    {
                                            //        BoxRow["BoxNumId"] = System.Guid.NewGuid().ToString().Substring(0, 12).ToUpper();
                                            //        BoxRow["BoxNum"] = BoxNumId;
                                            //        BoxRow["OrderDetailId"] = ParentId;
                                            //    }
                                            //    BoxNum.Rows.Add(BoxRow.ItemArray);
                                            //}
                                            ////调用存储过程，判断数据库表是否存在记录
                                            //SqlCommand com = new SqlCommand();
                                            //con.Open();
                                            //com.CommandText = "Pro_SelectCaseNumber";
                                            //com.Connection = con;
                                            //com.CommandType = CommandType.StoredProcedure;
                                            //SqlParameter paremeter = new SqlParameter("@Pro_SelectCaseNumber", SqlDbType.Structured)
                                            //{
                                            //    Value = BoxNum
                                            //};
                                            //com.ExecuteNonQuery();
                                            //com.Parameters.Add(paremeter);
                                            //com.Parameters.Add(new SqlParameter("@return", SqlDbType.Int));
                                            //com.Parameters["@return"].Direction = ParameterDirection.ReturnValue;
                                            //com.ExecuteNonQuery();
                                            ////数据库存储过程返回0表示存在记录
                                            //if (Convert.ToInt32(com.Parameters["@return"].Value) == 0)
                                            //{
                                            //领料单数据读取
                                            for (int i = sRowNum; i <= eRowNum; i++)
                                            {
                                                DataRow newARow = Non_toxicSeriesOfMaterialsTable.NewRow();
                                                PlateName = CStr(Non_toxicSeriesOfMaterialsSheet.Cells[i, 9].Value);
                                                //OrderDetailId = CStr(Non_toxicSeriesOfMaterialsSheet.Cells[i, 1].Value); || OrderDetailId == "" || OrderDetailId == null
                                                if (PlateName == "" || PlateName == null)
                                                {
                                                    continue;
                                                }
                                                if (System.Text.RegularExpressions.Regex.IsMatch(PlateName, @"^[-+]?[0-9]*\.?[0-9]+$"))
                                                {
                                                    if (Convert.ToSingle(PlateName) > 0)
                                                    {
                                                        newARow["PlateType"] = Non_toxicSeriesOfMaterialsSheet.Cells[1, 1].Value.ToString().Substring(0, 2);
                                                        newARow["HandType"] = Non_toxicSeriesOfMaterialsSheet.Cells[3, 2].Value;
                                                        newARow["CenterMaterials"] = Non_toxicSeriesOfMaterialsSheet.Cells[4, 2].Value;
                                                        newARow["FaceConduct"] = Non_toxicSeriesOfMaterialsSheet.Cells[3, 4].Value;
                                                        for (int j = sAColNum; j <= eAColNum; j++)
                                                        {
                                                            //con.Close();
                                                            newARow["ProductOrderId"] = ParentId;
                                                            ExcelRange Rang = Non_toxicSeriesOfMaterialsSheet.Cells[i, j];
                                                            object objectCellValue = Non_toxicSeriesOfMaterialsSheet.GetValue(i, j);//单元格数据
                                                            string CellValue = objectCellValue != null ? objectCellValue.ToString().Trim() : "";
                                                            if (Rang.Merge)
                                                            {
                                                                CellValue = GetMergeValue(Non_toxicSeriesOfMaterialsSheet, i, j);
                                                            }
                                                            switch (j)
                                                            {
                                                                case 1:
                                                                    newARow["OrderDetailId"] = CellValue;
                                                                    break;
                                                                case 2:
                                                                    if (CellValue == "" || CellValue == null)
                                                                    {
                                                                        CellValue = "0";
                                                                        Convert.ToSingle(CellValue);
                                                                        newARow["FWide"] = CellValue;
                                                                    }
                                                                    else
                                                                    {
                                                                        if (System.Text.RegularExpressions.Regex.IsMatch(CellValue, @"^[-+]?[0-9]*\.?[0-9]+$"))
                                                                        {

                                                                            newARow["FWide"] = CellValue;
                                                                        }
                                                                        else
                                                                        {
                                                                            MessageBox.Show("请检查工作表" + Non_toxicSeriesOfMaterialsSheet.Name + "第" + i + "行第" + j + "列数据是否正确");
                                                                            //TheWorksheetExists = false;
                                                                        }
                                                                    }
                                                                    //newARow["FWide"] = CellValue;
                                                                    break;
                                                                case 3:
                                                                    if (CellValue == "" || CellValue == null)
                                                                    {
                                                                        CellValue = "0";
                                                                        Convert.ToSingle(CellValue);
                                                                        newARow["FHigh"] = CellValue;
                                                                    }
                                                                    else
                                                                    {
                                                                        if (System.Text.RegularExpressions.Regex.IsMatch(CellValue, @"^[-+]?[0-9]*\.?[0-9]+$"))
                                                                        {

                                                                            newARow["FHigh"] = CellValue;
                                                                        }
                                                                        else
                                                                        {
                                                                            MessageBox.Show("请检查工作表" + Non_toxicSeriesOfMaterialsSheet.Name + "第" + i + "行第" + j + "列数据是否正确");
                                                                            //TheWorksheetExists = false;
                                                                        }
                                                                    }
                                                                    //newARow["FLong"] = CellValue;
                                                                    break;
                                                                case 4:
                                                                    if (CellValue == "" || CellValue == null)
                                                                    {
                                                                        CellValue = "0";
                                                                        Convert.ToSingle(CellValue);
                                                                        newARow["Qty"] = CellValue;
                                                                    }
                                                                    else
                                                                    {
                                                                        if (System.Text.RegularExpressions.Regex.IsMatch(CellValue, @"^[-+]?[0-9]*\.?[0-9]+$"))
                                                                        {

                                                                            newARow["Qty"] = CellValue;
                                                                        }
                                                                        else
                                                                        {
                                                                            MessageBox.Show("请检查工作表" + Non_toxicSeriesOfMaterialsSheet.Name + "第" + i + "行第" + j + "列数据是否正确");
                                                                            //TheWorksheetExists = false;
                                                                        }
                                                                        //newARow["Qty"] = CellValue;
                                                                    }
                                                                    break;
                                                                case 5:
                                                                    newARow["PlateName"] = CellValue;
                                                                    break;
                                                                case 6:
                                                                    if (CellValue == "" || CellValue == null)
                                                                    {
                                                                        CellValue = "0";
                                                                        Convert.ToSingle(CellValue);
                                                                        newARow["CutThick"] = CellValue;
                                                                    }
                                                                    else
                                                                    {
                                                                        if (System.Text.RegularExpressions.Regex.IsMatch(CellValue, @"^[-+]?[0-9]*\.?[0-9]+$"))
                                                                        {

                                                                            newARow["CutThick"] = CellValue;
                                                                        }
                                                                        else
                                                                        {
                                                                            MessageBox.Show("请检查工作表" + Non_toxicSeriesOfMaterialsSheet.Name + "第" + i + "行第" + j + "列数据是否正确");
                                                                            //TheWorksheetExists = false;
                                                                        }
                                                                        //newARow["CutThick"] = CellValue;
                                                                    }
                                                                    //newARow["CutThick"] = CellValue;
                                                                    break;
                                                                case 7:
                                                                    if (CellValue == "" || CellValue == null)
                                                                    {
                                                                        CellValue = "0";
                                                                        Convert.ToSingle(CellValue);
                                                                        newARow["CutWide"] = CellValue;
                                                                    }
                                                                    else
                                                                    {
                                                                        if (System.Text.RegularExpressions.Regex.IsMatch(CellValue, @"^[-+]?[0-9]*\.?[0-9]+$"))
                                                                        {

                                                                            newARow["CutWide"] = CellValue;
                                                                        }
                                                                        else
                                                                        {
                                                                            MessageBox.Show("请检查工作表" + Non_toxicSeriesOfMaterialsSheet.Name + "第" + i + "行第" + j + "列数据是否正确");
                                                                            //TheWorksheetExists = false;
                                                                        }
                                                                        //newARow["CutQty"] = CellValue;
                                                                    }
                                                                    //newARow["CutWide"] = CellValue;
                                                                    break;
                                                                case 8:
                                                                    if (CellValue == "" || CellValue == null)
                                                                    {
                                                                        CellValue = "0";
                                                                        Convert.ToSingle(CellValue);
                                                                        newARow["CutHigh"] = CellValue;
                                                                    }
                                                                    else
                                                                    {
                                                                        if (System.Text.RegularExpressions.Regex.IsMatch(CellValue, @"^[-+]?[0-9]*\.?[0-9]+$"))
                                                                        {

                                                                            newARow["CutHigh"] = CellValue;
                                                                        }
                                                                        else
                                                                        {
                                                                            MessageBox.Show("请检查工作表" + Non_toxicSeriesOfMaterialsSheet.Name + "第" + i + "行第" + j + "列数据是否正确");
                                                                            //TheWorksheetExists = false;
                                                                        }
                                                                        //newARow["CutLong"] = CellValue;
                                                                    }
                                                                    //newARow["CutLong"] = CellValue;
                                                                    break;
                                                                case 9:
                                                                    if (CellValue == "" || CellValue == null)
                                                                    {
                                                                        CellValue = "0";
                                                                        Convert.ToSingle(CellValue);
                                                                        newARow["CutQty"] = CellValue;
                                                                    }
                                                                    else
                                                                    {
                                                                        if (System.Text.RegularExpressions.Regex.IsMatch(CellValue, @"^[-+]?[0-9]*\.?[0-9]+$"))
                                                                        {

                                                                            newARow["CutQty"] = CellValue;
                                                                        }
                                                                        else
                                                                        {
                                                                            MessageBox.Show("请检查工作表" + Non_toxicSeriesOfMaterialsSheet.Name + "第" + i + "行第" + j + "列数据是否正确");
                                                                            //TheWorksheetExists = false;
                                                                        }
                                                                        //newARow["CutQty"] = CellValue;
                                                                    }
                                                                    break;
                                                                case 10: newARow["MaterialDescription"] = CellValue; break;
                                                                case 11: newARow["MaterialNote"] = CellValue; break;
                                                                case 12: newARow["DisplayMaterialSummary"] = CellValue; break;
                                                                case 13: newARow["AreaOfContour"] = CellValue; break;
                                                            }
                                                        }
                                                        //if (IsOrderDetailQueryDoMethod == false)
                                                        //{
                                                        //    break;
                                                        //}
                                                        Non_toxicSeriesOfMaterialsTable.Rows.Add(newARow);
                                                    }
                                                    //}
                                                }
                                                //}
                                                //else
                                                //{
                                                //    con.Close();
                                                //}
                                            }
                                            Non_toxicSeriesOfMaterialsTable.TableName = "IssueMaterialBills1";
                                            if (Non_toxicSeriesOfMaterialsTable.Rows.Count > 0)
                                            {
                                                DS.Tables.Add(Non_toxicSeriesOfMaterialsTable);
                                            }
                                            Non_toxicSeriesOfMaterialsTable.Dispose();
                                        }
                                        //else
                                        //{
                                        //    MessageBox.Show("无毒系列作业单工作表不存在");
                                        //    //TheWorksheetExists = false;
                                        //}
                                    }
                                }
                                catch (Exception ex)
                                {
                                    throw ex;
                                }
                                #endregion
                                //无毒系列领料单
                                #region
                                try
                                {
                                    //if (IsOrderDetailQueryDoMethod == true)
                                    //{
                                    //    if (TheWorksheetExists)
                                    //    {
                                    ExcelWorksheet WuDuSheet1 = null;//数据所在Sheet
                                    WuDuSheet1 = pck.Workbook.Worksheets["无毒系列领料单"];
                                    if (WuDuSheet1 != null)
                                    {
                                        if (WuDuSheet1.Hidden.ToString() == "Visible")
                                        {
                                            //if (Sheet1.Name == "无毒系列领料单")
                                            //{
                                            int maxColumnNum1 = WuDuSheet1.Dimension.End.Column;//最大列
                                            int maxRowNum1 = WuDuSheet1.Dimension.End.Row;//最大行
                                            int Sheet1RowNum = 5;//开始行
                                            int Sheet1EndRowNum = 0;//结束行
                                            int Sheet1StartAColNum = 1;//区域A的开始栏位
                                            int Sheet1EndAColNum = 6;//区域A的结束栏位
                                            string ExcelValue2 = "";
                                            for (int d = Sheet1RowNum; d <= maxRowNum1; d++)
                                            {
                                                if (CStr(WuDuSheet1.Cells[d, 1].Value) == "拆解人")
                                                {
                                                    Sheet1EndRowNum = d - 1;
                                                    break;
                                                }
                                            }
                                            SqlConnection con = new SqlConnection("Data Source=192.168.124.72;Initial Catalog=OrBitXI;User ID=sa;Password=admin@2017");
                                            //创建datatable 存放物料描述信息
                                            DataTable GetproductNameTable = new DataTable();
                                            GetproductNameTable.Columns.Add(string.Format("ProductDescription"), Type.GetType("System.String"));
                                            GetproductNameTable.Columns.Add(string.Format("ProductName"), Type.GetType("System.String"));
                                            DataRow GetproductNameRow = GetproductNameTable.NewRow();
                                            for (int i = Sheet1RowNum; i < Sheet1EndRowNum; i++)
                                            {
                                                string ProductDescription = CStr(WuDuSheet1.Cells[i, 3].Value);

                                                if (ProductDescription == "" || ProductDescription == null)
                                                {
                                                    continue;
                                                }
                                                else
                                                {
                                                    GetproductNameRow["ProductDescription"] = ProductDescription;
                                                }
                                                GetproductNameTable.Rows.Add(GetproductNameRow.ItemArray);
                                            }
                                            //调用存储过程根据物料描述获取物料号存放进另一个datatable
                                            con.Open();
                                            SqlCommand com = new SqlCommand();
                                            com.CommandText = "Pro_GetproductName";
                                            com.Connection = con;
                                            com.CommandType = CommandType.StoredProcedure;
                                            SqlParameter para = new SqlParameter("@Pro_GetproductName", SqlDbType.Structured)
                                            {
                                                Value = GetproductNameTable
                                            };
                                            com.Parameters.Add(para);
                                            com.ExecuteNonQuery();
                                            com.Parameters.Add(new SqlParameter("@return", SqlDbType.Int));
                                            com.Parameters["@return"].Direction = ParameterDirection.ReturnValue;
                                            DataTable dt = new DataTable();
                                            SqlDataReader reader = com.ExecuteReader();
                                            dt.Load(reader);
                                            //存储过程返回0为true
                                            if (Convert.ToInt32(com.Parameters["@return"].Value) == 0)
                                            {
                                                con.Close();
                                                //领料单数据读取
                                                for (int i = Sheet1RowNum; i <= Sheet1EndRowNum; i++)
                                                {
                                                    DataRow newARow = GetMaterialBillsTable.NewRow();
                                                    string ProductDescription = CStr(WuDuSheet1.Cells[i, 3].Value);
                                                    ExcelValue2 = CStr(WuDuSheet1.Cells[i, 4].Value);

                                                    //string ExcelValue1 = Sheet.GetValue(i, 3).ToString();
                                                    if ((ExcelValue2 == "") || (ExcelValue2 == null))
                                                    {
                                                        continue;
                                                    }
                                                    if (System.Text.RegularExpressions.Regex.IsMatch(ExcelValue2, @"^[-+]?[0-9]*\.?[0-9]+$"))
                                                    {
                                                        if (Convert.ToSingle(ExcelValue2) > 0)
                                                        {
                                                            for (int j = Sheet1StartAColNum; j <= Sheet1EndAColNum; j++)
                                                            {
                                                                newARow["ProductOrderId"] = ParentId;

                                                                ExcelRange Rang = WuDuSheet1.Cells[i, j];
                                                                object objectCellValue = WuDuSheet1.GetValue(i, j);//单元格数据
                                                                string CellValue = objectCellValue != null ? objectCellValue.ToString().Trim() : "";
                                                                if (Rang.Merge)
                                                                {
                                                                    CellValue = GetMergeValue(WuDuSheet1, i, j);

                                                                }
                                                                switch (j)
                                                                {
                                                                    case 1: newARow["ProjectName"] = CellValue; break;
                                                                    case 2:
                                                                        newARow["NumericalOrder"] = CellValue;
                                                                        break;
                                                                    case 3:
                                                                        for (int q = 0; q < dt.Rows.Count; q++)
                                                                        {
                                                                            string SQLProductDescription = dt.Rows[q]["ProductDescription"].ToString();
                                                                            if (SQLProductDescription == ProductDescription)
                                                                            {
                                                                                newARow["ProductName"] = dt.Rows[q]["ProductName"];
                                                                                newARow["ProductDes"] = SQLProductDescription;
                                                                            }
                                                                        }
                                                                        break;
                                                                    case 4:
                                                                        if (CellValue == "" || CellValue == null)
                                                                        {
                                                                            CellValue = "0";
                                                                            Convert.ToSingle(CellValue);
                                                                            newARow["Qty"] = CellValue;
                                                                        }
                                                                        else
                                                                        {
                                                                            if (System.Text.RegularExpressions.Regex.IsMatch(CellValue, @"^[-+]?[0-9]*\.?[0-9]+$"))
                                                                            {
                                                                                decimal Qty = Math.Round(decimal.Parse(CellValue), 3, MidpointRounding.AwayFromZero);

                                                                                newARow["Qty"] = Qty;
                                                                            }
                                                                            else
                                                                            {
                                                                                MessageBox.Show("请检查工作表" + WuDuSheet1.Name + "第" + i + "行第" + j + "列数据是否正确");
                                                                                //TheWorksheetExists = false;
                                                                            }
                                                                            //newARow["Qty"] = CellValue;
                                                                        }
                                                                        break;
                                                                    case 5: newARow["Unit"] = CellValue; break;
                                                                    case 6: newARow["PackingConfirmed"] = CellValue; break;
                                                                }
                                                            }
                                                            GetMaterialBillsTable.Rows.Add(newARow);
                                                        }
                                                    }
                                                }
                                                GetMaterialBillsTable.TableName = "GetMaterialBills1";
                                                if (GetMaterialBillsTable.Rows.Count > 0)
                                                {
                                                    DS.Tables.Add(GetMaterialBillsTable);
                                                }
                                                dt.Dispose();
                                                GetMaterialBillsTable.Dispose();
                                            }
                                            else
                                            {
                                                con.Close();
                                            }
                                            //}
                                        }
                                    }
                                    //    }
                                    //}
                                }
                                catch (Exception ex)
                                {
                                    throw ex;
                                }

                                #endregion

                                //油漆包装Sheet页
                                #region
                                try
                                {
                                    ExcelWorksheet Sheet = null;//数据所在Sheet
                                    Sheet = pck.Workbook.Worksheets["油漆包装"];
                                    if (Sheet != null)
                                    {
                                        if (Sheet.Hidden.ToString() == "Visible")
                                        {
                                            int maxColumnNum = Sheet.Dimension.End.Column;//最大列
                                            int minColumnNum = Sheet.Dimension.Start.Column;//最小列
                                            int minRowNum = Sheet.Dimension.Start.Row;//最小行
                                            int maxRowNum = Sheet.Dimension.End.Row;//最大行
                                            int sRowNum = 5;//开始行
                                            int eRowNum = 0;//结束行
                                            //List<int> list = new List<int>();
                                            int[] list = new int[maxRowNum + 1];
                                            if (Convert.ToString(Sheet.Hidden) != "Hidden")
                                            {
                                                for (int d = 5; d <= maxRowNum; d++)
                                                {
                                                    string Num1Value = CStr(Sheet.Cells[d, 1].Value);
                                                    if (Num1Value.Trim() == "备注：灯箱底板、拉篮、含玻璃镜子的板件都需要打硬包装" || Num1Value == "包装编号" || Num1Value.Trim() == "序号" || Num1Value.Trim() == "三、整件发货部分（功能柜）" || Num1Value.Trim() == "1.整件包装---可使用对口箱的柜体（抽屉柜、拉篮柜）（备注：所有整柜包装需增加蜂窝纸板)" || Num1Value.Trim() == "2.整件包装--所有无法使用对口箱的所有柜体（备注：所有整柜包装需增加蜂窝纸板)" || Num1Value.Trim() == "散件包装的柜体---可使用一片成型包装箱的明细" || Num1Value.Trim() == "注：以上包装箱适用地柜560深、720高散件柜体；吊柜300深、720高柜体；高柜560深2160高的散件柜体（除特定两种柜形外），外地所有玻璃层板单独包装" || Num1Value.Trim() == "散件包装的柜体--所有无法使用一片成型包装箱的柜体散件（玻璃层板单独包装）" || Num1Value.Trim() == "散件包装柜体的背板" || Num1Value.Trim() == "二、散件门板部分" || Num1Value.Trim() == "1.散件包装的门板---可使用一片成型包装箱的明细" || Num1Value.Trim() == "2.散件包装的门板--所有无法使用一片成型包装箱的门板散件" || Num1Value.Trim() == "四、装饰部件部分（本地、外地通用）")
                                                    {
                                                        eRowNum = d;
                                                        //list[d] = d;
                                                        //将非数据列放进数组
                                                        if (Num1Value == "序号" || Num1Value == "包装编号" || Num1Value.Trim() == "三、整件发货部分（功能柜）" || Num1Value.Trim() == "1.整件包装---可使用对口箱的柜体（抽屉柜、拉篮柜）（备注：所有整柜包装需增加蜂窝纸板)" || Num1Value.Trim() == "2.整件包装--所有无法使用对口箱的所有柜体（备注：所有整柜包装需增加蜂窝纸板)" || Num1Value.Trim() == "散件包装的柜体---可使用一片成型包装箱的明细" || Num1Value.Trim() == "注：以上包装箱适用地柜560深、720高散件柜体；吊柜300深、720高柜体；高柜560深2160高的散件柜体（除特定两种柜形外），外地所有玻璃层板单独包装" || Num1Value.Trim() == "散件包装的柜体--所有无法使用一片成型包装箱的柜体散件（玻璃层板单独包装）" || Num1Value.Trim() == "散件包装柜体的背板" || Num1Value.Trim() == "二、散件门板部分" || Num1Value.Trim() == "1.散件包装的门板---可使用一片成型包装箱的明细" || Num1Value.Trim() == "2.散件包装的门板--所有无法使用一片成型包装箱的门板散件" || Num1Value.Trim() == "四、装饰部件部分（本地、外地通用）")
                                                        {
                                                            list[d] = d;
                                                        }
                                                        continue;
                                                    }
                                                }
                                                for (int i = sRowNum; i < eRowNum; i++)
                                                {
                                                    DataRow Li_PackingListTableRow = YouQi_Table.NewRow();
                                                    Li_PackingListTableRow["ProductOrderId"] = ParentId;
                                                    ExcelRange rang1 = Sheet.Cells[i, 5];
                                                    object objectCellValue1 = Sheet.GetValue(i, 5);//单元格数据
                                                    string CellValue1 = objectCellValue1 != null ? objectCellValue1.ToString().Trim() : "";
                                                    if (rang1.Merge)
                                                    {
                                                        CellValue1 = GetMergeValue(Sheet, i, 5);
                                                    }
                                                    if (CellValue1 == "" || CellValue1 == null || CellValue1 == "包数")
                                                    {
                                                        continue;
                                                    }
                                                    if (System.Text.RegularExpressions.Regex.IsMatch(CellValue1.ToString(), @"^[-+]?[0-9]*\.?[0-9]+$"))
                                                    {
                                                        if (Convert.ToSingle(CellValue1) > 0)
                                                        {
                                                            for (int j = 1; j < 12; j++)
                                                            {
                                                                ExcelRange rang = Sheet.Cells[i, j];
                                                                object objectCellValue = Sheet.GetValue(i, j);//单元格数据
                                                                string CellValue = objectCellValue != null ? objectCellValue.ToString().Trim() : "";
                                                                if (rang.Merge)
                                                                {
                                                                    CellValue = GetMergeValue(Sheet, i, j);
                                                                }
                                                                switch (j)
                                                                {
                                                                    case 1:
                                                                        Li_PackingListTableRow["PackingNumber"] = CellValue;
                                                                        break;
                                                                    case 2:
                                                                        Li_PackingListTableRow["Wide"] = CellValue;
                                                                        break;
                                                                    case 3:
                                                                        Li_PackingListTableRow["High"] = CellValue;
                                                                        break;
                                                                    case 4:
                                                                        Li_PackingListTableRow["Depth"] = CellValue;
                                                                        break;
                                                                    //case 5:
                                                                    //    //if (System.Text.RegularExpressions.Regex.IsMatch(CellValue.ToString(), @"^[-+]?[0-9]*\.?[0-9]+$"))
                                                                    //    //{
                                                                    //    //    Li_PackingListTableRow["Quantity"] = Convert.ToInt32(CellValue);
                                                                    //    //}
                                                                    //    //else
                                                                    //    //{
                                                                    //    //    Li_PackingListTableRow["Quantity"] = 0;
                                                                    //    //}
                                                                    //    break;
                                                                    case 5:
                                                                        Li_PackingListTableRow["Cell"] = CellValue;
                                                                        break;
                                                                    case 6:
                                                                        Li_PackingListTableRow["CabinetType"] = CellValue;
                                                                        break;
                                                                    case 7:
                                                                        Li_PackingListTableRow["NameOfPackagingMaterials"] = CellValue;
                                                                        break;
                                                                    case 8:
                                                                        Li_PackingListTableRow["MaterialCode"] = CellValue;
                                                                        break;
                                                                    case 9:
                                                                        if (System.Text.RegularExpressions.Regex.IsMatch(CellValue.ToString(), @"^[-+]?[0-9]*\.?[0-9]+$"))
                                                                        {
                                                                            Li_PackingListTableRow["Qty"] = CellValue;
                                                                        }
                                                                        else
                                                                        {
                                                                            Li_PackingListTableRow["PackingQuantity"] = CellValue;
                                                                        }
                                                                        break;
                                                                    case 10:
                                                                        Li_PackingListTableRow["Unit"] = Sheet.Cells[i, j].Value;
                                                                        break;
                                                                    case 11:
                                                                        Li_PackingListTableRow["Remark"] = CellValue;
                                                                        break;
                                                                }
                                                            }
                                                            int TheDeliveryCateGoryId = 0;
                                                            int TheDeliveryCateGoryId1 = 0;
                                                            int TheDeliveryCateGoryId2 = 0;
                                                            string TheDeliveryCateGory = "";
                                                            string PackingGroup = "";
                                                            for (int q = 5; q < eRowNum; q++)
                                                            {
                                                                if (list[q] == 0 || CStr(Sheet.Cells[list[q], 1].Value).Trim() == "序号" || CStr(Sheet.Cells[list[q], 1].Value).Trim() == "注：以上包装箱适用地柜560深、720高散件柜体；吊柜300深、720高柜体；高柜560深2160高的散件柜体（除特定两种柜形外），外地所有玻璃层板单独包装")
                                                                {
                                                                    continue;
                                                                }
                                                                TheDeliveryCateGory = CStr(Sheet.Cells[list[q], 1].Value).Trim();
                                                                if (TheDeliveryCateGory == "三、整件发货部分（功能柜）")
                                                                {
                                                                    TheDeliveryCateGoryId = q;
                                                                }
                                                                if (TheDeliveryCateGory == "二、散件门板部分")
                                                                {
                                                                    TheDeliveryCateGoryId1 = q;
                                                                }
                                                                if (TheDeliveryCateGory == "四、装饰部件部分（本地、外地通用）")
                                                                {
                                                                    TheDeliveryCateGoryId2 = q;
                                                                }
                                                            }
                                                            int PackingGroupId = 0;
                                                            int PackingGroupId1 = 0;
                                                            int PackingGroupId2 = 0;
                                                            int PackingGroupId3 = 0;
                                                            int PackingGroupId4 = 0;
                                                            int PackingGroupId5 = 0;
                                                            int PackingGroupId6 = 0;

                                                            for (int q = 6; q < eRowNum; q++)
                                                            {
                                                                if (list[q] == 0 || CStr(Sheet.Cells[list[q], 1].Value).Trim() == "序号" || CStr(Sheet.Cells[list[q], 1].Value).Trim() == "注：以上包装箱适用地柜560深、720高散件柜体；吊柜300深、720高柜体；高柜560深2160高的散件柜体（除特定两种柜形外），外地所有玻璃层板单独包装")
                                                                {
                                                                    continue;
                                                                }
                                                                PackingGroup = CStr(Sheet.Cells[list[q], 1].Value).Trim();
                                                                if (PackingGroup == "1.整件包装---可使用对口箱的柜体（抽屉柜、拉篮柜）（备注：所有整柜包装需增加蜂窝纸板)")
                                                                {
                                                                    PackingGroupId = q;
                                                                }
                                                                if (PackingGroup == "2.整件包装--所有无法使用对口箱的所有柜体（备注：所有整柜包装需增加蜂窝纸板)")
                                                                {
                                                                    PackingGroupId1 = q;
                                                                }
                                                                if (PackingGroup == "散件包装的柜体---可使用一片成型包装箱的明细")
                                                                {
                                                                    PackingGroupId2 = q;
                                                                }
                                                                if (PackingGroup == "散件包装的柜体--所有无法使用一片成型包装箱的柜体散件（玻璃层板单独包装）")
                                                                {
                                                                    PackingGroupId3 = q;
                                                                }
                                                                if (PackingGroup == "散件包装柜体的背板")
                                                                {
                                                                    PackingGroupId4 = q;
                                                                }
                                                                if (PackingGroup == "1.散件包装的门板---可使用一片成型包装箱的明细")
                                                                {
                                                                    PackingGroupId5 = q;
                                                                }
                                                                if (PackingGroup == "2.散件包装的门板--所有无法使用一片成型包装箱的门板散件")
                                                                {
                                                                    PackingGroupId6 = q;
                                                                }
                                                            }


                                                            if (i >= TheDeliveryCateGoryId && i < TheDeliveryCateGoryId1)
                                                            {
                                                                Li_PackingListTableRow["TheDeliveryCateGory"] = CStr(Sheet.Cells[TheDeliveryCateGoryId, 1].Value).Trim();
                                                            }
                                                            else if (i >= TheDeliveryCateGoryId1 && i < TheDeliveryCateGoryId2)
                                                            {
                                                                Li_PackingListTableRow["TheDeliveryCateGory"] = CStr(Sheet.Cells[TheDeliveryCateGoryId1, 1].Value).Trim();
                                                            }
                                                            else if (i >= TheDeliveryCateGoryId2)
                                                            {
                                                                Li_PackingListTableRow["TheDeliveryCateGory"] = CStr(Sheet.Cells[TheDeliveryCateGoryId2, 1].Value).Trim();
                                                            }

                                                            if (i >= PackingGroupId && i < PackingGroupId1)
                                                            {
                                                                Li_PackingListTableRow["PackingGroup"] = CStr(Sheet.Cells[PackingGroupId, 1].Value).Trim();
                                                            }
                                                            if (i >= PackingGroupId1 && i < PackingGroupId2)
                                                            {
                                                                Li_PackingListTableRow["PackingGroup"] = CStr(Sheet.Cells[PackingGroupId1, 1].Value).Trim();
                                                            }
                                                            if (i >= PackingGroupId2 && i < PackingGroupId3)
                                                            {
                                                                Li_PackingListTableRow["PackingGroup"] = CStr(Sheet.Cells[PackingGroupId2, 1].Value).Trim();
                                                            }
                                                            if (i >= PackingGroupId3 && i < PackingGroupId4)
                                                            {
                                                                Li_PackingListTableRow["PackingGroup"] = CStr(Sheet.Cells[PackingGroupId3, 1].Value).Trim();
                                                            }
                                                            if (i >= PackingGroupId4 && i < PackingGroupId5)
                                                            {
                                                                Li_PackingListTableRow["PackingGroup"] = CStr(Sheet.Cells[PackingGroupId4, 1].Value).Trim();
                                                            }
                                                            if (i >= PackingGroupId5 && i < PackingGroupId6)
                                                            {
                                                                Li_PackingListTableRow["PackingGroup"] = CStr(Sheet.Cells[PackingGroupId5, 1].Value).Trim();
                                                            }
                                                            if (i >= PackingGroupId6 && i < TheDeliveryCateGoryId2)
                                                            {
                                                                Li_PackingListTableRow["PackingGroup"] = CStr(Sheet.Cells[PackingGroupId6, 1].Value).Trim();
                                                            }
                                                            if (i >= TheDeliveryCateGoryId2)
                                                            {
                                                                Li_PackingListTableRow["PackingGroup"] = null;
                                                            }
                                                            YouQi_Table.Rows.Add(Li_PackingListTableRow);
                                                        }
                                                    }
                                                }
                                            }
                                            YouQi_Table.TableName = "SuMeiLi_Packaging1";
                                            DS.Tables.Add(YouQi_Table);
                                        }
                                    }
                                }
                                catch (Exception ex)
                                {
                                    throw ex;
                                }
                                #endregion
                                //混油帕拉迪奥下料单
                                #region
                                try
                                {
                                    ExcelWorksheet Non_toxicSeriesOfMaterialsSheet = null;
                                    Non_toxicSeriesOfMaterialsSheet = pck.Workbook.Worksheets["混油帕拉迪奥下料单"];
                                    if (Non_toxicSeriesOfMaterialsSheet != null)
                                    {
                                        if (Non_toxicSeriesOfMaterialsSheet.Hidden.ToString() == "Visible")
                                        {
                                            //if (Sheet.Name == "无毒系列作业单")
                                            //{
                                            int maxColumnNum = Non_toxicSeriesOfMaterialsSheet.Dimension.End.Column;//最大列
                                            int minColumnNum = Non_toxicSeriesOfMaterialsSheet.Dimension.Start.Column;//最小列
                                            int minRowNum = Non_toxicSeriesOfMaterialsSheet.Dimension.Start.Row;//最小行
                                            int maxRowNum = Non_toxicSeriesOfMaterialsSheet.Dimension.End.Row;//最大行
                                            int sRowNum = 7;//开始行
                                            int eRowNum = 0;//结束行
                                            int sAColNum = 1;//区域A的开始栏位
                                            int eAColNum = 13;//区域A的结束栏位
                                            string PlateName = "";
                                            string OrderDetailId = "";
                                            //获取结束行
                                            for (int d = 1; d < maxRowNum; d++)
                                            {
                                                if ((CStr(Non_toxicSeriesOfMaterialsSheet.Cells[d, 1].Value)).Trim() == "制单")
                                                {
                                                    eRowNum = d - 6;
                                                    break;
                                                }
                                            }
                                            ////创建datatable存放箱体序号
                                            //DataTable BoxNum = new DataTable();
                                            //BoxNum.Columns.Add(string.Format("BoxNumId"), Type.GetType("System.String"));
                                            //BoxNum.Columns.Add(string.Format("BoxNum"), Type.GetType("System.String"));
                                            //BoxNum.Columns.Add(string.Format("OrderDetailId"), Type.GetType("System.String"));
                                            //BoxNum.Columns.Add(string.Format("Identification"), Type.GetType("System.String"));
                                            //DataRow BoxRow = BoxNum.NewRow();
                                            //for (int i = sRowNum; i < eRowNum; i++)
                                            //{
                                            //    string BoxNumId = CStr(Sheet.Cells[i, 1].Value);
                                            //    string BoxName = CStr(Sheet.Cells[i, 5].Value);
                                            //    if (BoxName == "" || BoxName == null)
                                            //    {
                                            //        continue;
                                            //    }
                                            //    else
                                            //    {
                                            //        BoxRow["BoxNumId"] = System.Guid.NewGuid().ToString().Substring(0, 12).ToUpper();
                                            //        BoxRow["BoxNum"] = BoxNumId;
                                            //        BoxRow["OrderDetailId"] = ParentId;
                                            //    }
                                            //    BoxNum.Rows.Add(BoxRow.ItemArray);
                                            //}
                                            ////调用存储过程，判断数据库表是否存在记录
                                            //SqlCommand com = new SqlCommand();
                                            //con.Open();
                                            //com.CommandText = "Pro_SelectCaseNumber";
                                            //com.Connection = con;
                                            //com.CommandType = CommandType.StoredProcedure;
                                            //SqlParameter paremeter = new SqlParameter("@Pro_SelectCaseNumber", SqlDbType.Structured)
                                            //{
                                            //    Value = BoxNum
                                            //};
                                            //com.ExecuteNonQuery();
                                            //com.Parameters.Add(paremeter);
                                            //com.Parameters.Add(new SqlParameter("@return", SqlDbType.Int));
                                            //com.Parameters["@return"].Direction = ParameterDirection.ReturnValue;
                                            //com.ExecuteNonQuery();
                                            ////数据库存储过程返回0表示存在记录
                                            //if (Convert.ToInt32(com.Parameters["@return"].Value) == 0)
                                            //{
                                            //领料单数据读取
                                            for (int i = sRowNum; i <= eRowNum; i++)
                                            {
                                                DataRow newARow = PalaDiaoXiaLiaoDanTable.NewRow();
                                                PlateName = CStr(Non_toxicSeriesOfMaterialsSheet.Cells[i, 9].Value);
                                                //OrderDetailId = CStr(Non_toxicSeriesOfMaterialsSheet.Cells[i, 1].Value); || OrderDetailId == "" || OrderDetailId == null
                                                if (PlateName == "" || PlateName == null)
                                                {
                                                    continue;
                                                }
                                                if (System.Text.RegularExpressions.Regex.IsMatch(PlateName, @"^[-+]?[0-9]*\.?[0-9]+$"))
                                                {
                                                    if (Convert.ToSingle(PlateName) > 0)
                                                    {
                                                        //板件类型
                                                        newARow["PlateType"] = Non_toxicSeriesOfMaterialsSheet.Cells[1, 1].Value.ToString().Substring(0, 2);
                                                        //拉手类型
                                                        newARow["HandType"] = Non_toxicSeriesOfMaterialsSheet.Cells[3, 2].Value;
                                                        //芯材
                                                        newARow["CenterMaterials"] = Non_toxicSeriesOfMaterialsSheet.Cells[4, 2].Value;
                                                        //材质颜色(材质备注)
                                                        newARow["MaterialNote"] = Non_toxicSeriesOfMaterialsSheet.Cells[6, 8].Value;
                                                        //款式名称
                                                        newARow["Stytle"] = Non_toxicSeriesOfMaterialsSheet.Cells[5, 13].Value;
                                                        //MES板件Id
                                                        newARow["PlateType"] = System.Guid.NewGuid().ToString().Substring(0, 12).ToUpper();
                                                        for (int j = sAColNum; j <= eAColNum; j++)
                                                        {
                                                            //con.Close();
                                                            newARow["ProductOrderId"] = ParentId;
                                                            ExcelRange Rang = Non_toxicSeriesOfMaterialsSheet.Cells[i, j];
                                                            object objectCellValue = Non_toxicSeriesOfMaterialsSheet.GetValue(i, j);//单元格数据
                                                            string CellValue = objectCellValue != null ? objectCellValue.ToString().Trim() : "";
                                                            if (Rang.Merge)
                                                            {
                                                                CellValue = GetMergeValue(Non_toxicSeriesOfMaterialsSheet, i, j);
                                                            }
                                                            switch (j)
                                                            {
                                                                case 1:
                                                                    newARow["OrderDetailId"] = CellValue;
                                                                    break;
                                                                case 2:
                                                                    if (CellValue == "" || CellValue == null)
                                                                    {
                                                                        CellValue = "0";
                                                                        Convert.ToSingle(CellValue);
                                                                        newARow["FWide"] = CellValue;
                                                                    }
                                                                    else
                                                                    {
                                                                        if (System.Text.RegularExpressions.Regex.IsMatch(CellValue, @"^[-+]?[0-9]*\.?[0-9]+$"))
                                                                        {

                                                                            newARow["FWide"] = CellValue;
                                                                        }
                                                                        else
                                                                        {
                                                                            MessageBox.Show("请检查工作表" + Non_toxicSeriesOfMaterialsSheet.Name + "第" + i + "行第" + j + "列数据是否正确");
                                                                            //TheWorksheetExists = false;
                                                                        }
                                                                    }
                                                                    //newARow["FWide"] = CellValue;
                                                                    break;
                                                                case 3:
                                                                    if (CellValue == "" || CellValue == null)
                                                                    {
                                                                        CellValue = "0";
                                                                        Convert.ToSingle(CellValue);
                                                                        newARow["FHigh"] = CellValue;
                                                                    }
                                                                    else
                                                                    {
                                                                        if (System.Text.RegularExpressions.Regex.IsMatch(CellValue, @"^[-+]?[0-9]*\.?[0-9]+$"))
                                                                        {

                                                                            newARow["FHigh"] = CellValue;
                                                                        }
                                                                        else
                                                                        {
                                                                            MessageBox.Show("请检查工作表" + Non_toxicSeriesOfMaterialsSheet.Name + "第" + i + "行第" + j + "列数据是否正确");
                                                                            //TheWorksheetExists = false;
                                                                        }
                                                                    }
                                                                    //newARow["FLong"] = CellValue;
                                                                    break;
                                                                case 4:
                                                                    if (CellValue == "" || CellValue == null)
                                                                    {
                                                                        CellValue = "0";
                                                                        Convert.ToSingle(CellValue);
                                                                        newARow["Qty"] = CellValue;
                                                                    }
                                                                    else
                                                                    {
                                                                        if (System.Text.RegularExpressions.Regex.IsMatch(CellValue, @"^[-+]?[0-9]*\.?[0-9]+$"))
                                                                        {

                                                                            newARow["Qty"] = CellValue;
                                                                        }
                                                                        else
                                                                        {
                                                                            MessageBox.Show("请检查工作表" + Non_toxicSeriesOfMaterialsSheet.Name + "第" + i + "行第" + j + "列数据是否正确");
                                                                            //TheWorksheetExists = false;
                                                                        }
                                                                        //newARow["Qty"] = CellValue;
                                                                    }
                                                                    break;
                                                                case 5:
                                                                    newARow["PlateName"] = CellValue;
                                                                    break;
                                                                case 6:
                                                                    if (CellValue == "" || CellValue == null)
                                                                    {
                                                                        CellValue = "0";
                                                                        Convert.ToSingle(CellValue);
                                                                        newARow["CutThick"] = CellValue;
                                                                    }
                                                                    else
                                                                    {
                                                                        if (System.Text.RegularExpressions.Regex.IsMatch(CellValue, @"^[-+]?[0-9]*\.?[0-9]+$"))
                                                                        {

                                                                            newARow["CutThick"] = CellValue;
                                                                        }
                                                                        else
                                                                        {
                                                                            MessageBox.Show("请检查工作表" + Non_toxicSeriesOfMaterialsSheet.Name + "第" + i + "行第" + j + "列数据是否正确");
                                                                            //TheWorksheetExists = false;
                                                                        }
                                                                        //newARow["CutThick"] = CellValue;
                                                                    }
                                                                    //newARow["CutThick"] = CellValue;
                                                                    break;
                                                                case 7:
                                                                    if (CellValue == "" || CellValue == null)
                                                                    {
                                                                        CellValue = "0";
                                                                        Convert.ToSingle(CellValue);
                                                                        newARow["CutWide"] = CellValue;
                                                                    }
                                                                    else
                                                                    {
                                                                        if (System.Text.RegularExpressions.Regex.IsMatch(CellValue, @"^[-+]?[0-9]*\.?[0-9]+$"))
                                                                        {

                                                                            newARow["CutWide"] = CellValue;
                                                                        }
                                                                        else
                                                                        {
                                                                            MessageBox.Show("请检查工作表" + Non_toxicSeriesOfMaterialsSheet.Name + "第" + i + "行第" + j + "列数据是否正确");
                                                                            //TheWorksheetExists = false;
                                                                        }
                                                                        //newARow["CutQty"] = CellValue;
                                                                    }
                                                                    //newARow["CutWide"] = CellValue;
                                                                    break;
                                                                case 8:
                                                                    if (CellValue == "" || CellValue == null)
                                                                    {
                                                                        CellValue = "0";
                                                                        Convert.ToSingle(CellValue);
                                                                        newARow["CutHigh"] = CellValue;
                                                                    }
                                                                    else
                                                                    {
                                                                        if (System.Text.RegularExpressions.Regex.IsMatch(CellValue, @"^[-+]?[0-9]*\.?[0-9]+$"))
                                                                        {

                                                                            newARow["CutHigh"] = CellValue;
                                                                        }
                                                                        else
                                                                        {
                                                                            MessageBox.Show("请检查工作表" + Non_toxicSeriesOfMaterialsSheet.Name + "第" + i + "行第" + j + "列数据是否正确");
                                                                            //TheWorksheetExists = false;
                                                                        }
                                                                        //newARow["CutLong"] = CellValue;
                                                                    }
                                                                    //newARow["CutLong"] = CellValue;
                                                                    break;
                                                                case 9:
                                                                    if (CellValue == "" || CellValue == null)
                                                                    {
                                                                        CellValue = "0";
                                                                        Convert.ToSingle(CellValue);
                                                                        newARow["CutQty"] = CellValue;
                                                                    }
                                                                    else
                                                                    {
                                                                        if (System.Text.RegularExpressions.Regex.IsMatch(CellValue, @"^[-+]?[0-9]*\.?[0-9]+$"))
                                                                        {

                                                                            newARow["CutQty"] = CellValue;
                                                                        }
                                                                        else
                                                                        {
                                                                            MessageBox.Show("请检查工作表" + Non_toxicSeriesOfMaterialsSheet.Name + "第" + i + "行第" + j + "列数据是否正确");
                                                                            //TheWorksheetExists = false;
                                                                        }
                                                                        //newARow["CutQty"] = CellValue;
                                                                    }
                                                                    break;
                                                                case 10: newARow["MaterialDescription"] = CellValue; break;
                                                                case 12: newARow["Remark"] = CellValue; break;
                                                                //case 12: newARow["DisplayMaterialSummary"] = CellValue; break;
                                                                //case 13: newARow["AreaOfContour"] = CellValue; break;
                                                            }
                                                        }
                                                        //if (IsOrderDetailQueryDoMethod == false)
                                                        //{
                                                        //    break;
                                                        //}
                                                        PalaDiaoXiaLiaoDanTable.Rows.Add(newARow);
                                                    }
                                                    //}
                                                }
                                                //}
                                                //else
                                                //{
                                                //    con.Close();
                                                //}
                                            }
                                            PalaDiaoXiaLiaoDanTable.TableName = "IssueMaterialBills2";
                                            DS.Tables.Add(PalaDiaoXiaLiaoDanTable);
                                        }
                                        //else
                                        //{
                                        //    MessageBox.Show("无毒系列作业单工作表不存在");
                                        //    //TheWorksheetExists = false;
                                        //}
                                    }
                                }
                                catch (Exception ex)
                                {
                                    throw ex;
                                }
                                #endregion
                                //混油帕拉迪奥领料单
                                #region
                                try
                                {
                                    //if (IsOrderDetailQueryDoMethod == true)
                                    //{
                                    //    if (TheWorksheetExists)
                                    //    {
                                    ExcelWorksheet WuDuSheet1 = null;//数据所在Sheet
                                    WuDuSheet1 = pck.Workbook.Worksheets["混油帕拉迪奥领料单"];
                                    if (WuDuSheet1 != null)
                                    {
                                        if (WuDuSheet1.Hidden.ToString() == "Visible")
                                        {
                                            //if (Sheet1.Name == "无毒系列领料单")
                                            //{
                                            int maxColumnNum1 = WuDuSheet1.Dimension.End.Column;//最大列
                                            int maxRowNum1 = WuDuSheet1.Dimension.End.Row;//最大行
                                            int Sheet1RowNum = 5;//开始行
                                            int Sheet1EndRowNum = 0;//结束行
                                            int Sheet1StartAColNum = 1;//区域A的开始栏位
                                            int Sheet1EndAColNum = 10;//区域A的结束栏位
                                            string ExcelValue2 = "";
                                            for (int d = Sheet1RowNum; d <= maxRowNum1; d++)
                                            {
                                                if (CStr(WuDuSheet1.Cells[d, 1].Value) == "拆解人")
                                                {
                                                    Sheet1EndRowNum = d - 1;
                                                    break;
                                                }
                                            }
                                            SqlConnection con = new SqlConnection("Data Source=192.168.124.72;Initial Catalog=OrBitXI;User ID=sa;Password=admin@2017");
                                            //创建datatable 存放物料描述信息
                                            DataTable GetproductNameTable = new DataTable();
                                            GetproductNameTable.Columns.Add(string.Format("ProductDescription"), Type.GetType("System.String"));
                                            GetproductNameTable.Columns.Add(string.Format("ProductName"), Type.GetType("System.String"));
                                            DataRow GetproductNameRow = GetproductNameTable.NewRow();
                                            for (int i = Sheet1RowNum; i < Sheet1EndRowNum; i++)
                                            {
                                                ExcelRange Rang = WuDuSheet1.Cells[i, 3];
                                                object objectCellValue = WuDuSheet1.GetValue(i, 3);//单元格数据
                                                string CellValue = objectCellValue != null ? objectCellValue.ToString().Trim() : "";
                                                if (Rang.Merge)
                                                {
                                                    CellValue = GetMergeValue(WuDuSheet1, i, 3);
                                                }
                                                ExcelRange Rang1 = WuDuSheet1.Cells[i, 4];
                                                object objectCellValue1 = WuDuSheet1.GetValue(i, 4);//单元格数据
                                                string CellValue1 = objectCellValue1 != null ? objectCellValue1.ToString().Trim() : "";
                                                if (Rang1.Merge)
                                                {
                                                    CellValue1 = GetMergeValue(WuDuSheet1, i, 4);
                                                }
                                                string ProductDescription = CellValue;
                                                object ProductDescription1 = CellValue1;
                                                if (ProductDescription == "" || ProductDescription == null)
                                                {
                                                    continue;
                                                }
                                                else
                                                {
                                                    if (ProductDescription == ProductDescription1)
                                                    {
                                                        GetproductNameRow["ProductDescription"] = ProductDescription;
                                                    }
                                                    else
                                                    {
                                                        GetproductNameRow["ProductDescription"] = ProductDescription + ProductDescription1;
                                                    }
                                                }
                                                GetproductNameTable.Rows.Add(GetproductNameRow.ItemArray);
                                            }
                                            //调用存储过程根据物料描述获取物料号存放进另一个datatable
                                            con.Open();
                                            SqlCommand com = new SqlCommand();
                                            com.CommandText = "Pro_GetproductName";
                                            com.Connection = con;
                                            com.CommandType = CommandType.StoredProcedure;
                                            SqlParameter para = new SqlParameter("@Pro_GetproductName", SqlDbType.Structured)
                                            {
                                                Value = GetproductNameTable
                                            };
                                            com.Parameters.Add(para);
                                            com.ExecuteNonQuery();
                                            com.Parameters.Add(new SqlParameter("@return", SqlDbType.Int));
                                            com.Parameters["@return"].Direction = ParameterDirection.ReturnValue;
                                            DataTable dt = new DataTable();
                                            SqlDataReader reader = com.ExecuteReader();
                                            dt.Load(reader);
                                            //存储过程返回0为true
                                            if (Convert.ToInt32(com.Parameters["@return"].Value) == 0)
                                            {
                                                con.Close();
                                                //领料单数据读取
                                                for (int i = Sheet1RowNum; i <= Sheet1EndRowNum; i++)
                                                {
                                                    DataRow newARow = PalaDiaoLingLiaoDanTable.NewRow();
                                                    string ProductDescription = "";
                                                    ExcelRange Rang = WuDuSheet1.Cells[i, 3];
                                                    object objectCellValue = WuDuSheet1.GetValue(i, 3);//单元格数据
                                                    string CellValue = objectCellValue != null ? objectCellValue.ToString().Trim() : "";
                                                    if (Rang.Merge)
                                                    {
                                                        CellValue = GetMergeValue(WuDuSheet1, i, 3);
                                                    }
                                                    ExcelRange Rang1 = WuDuSheet1.Cells[i, 4];
                                                    object objectCellValue1 = WuDuSheet1.GetValue(i, 4);//单元格数据
                                                    string CellValue1 = objectCellValue1 != null ? objectCellValue1.ToString().Trim() : "";
                                                    if (Rang1.Merge)
                                                    {
                                                        CellValue1 = GetMergeValue(WuDuSheet1, i, 4);
                                                    }
                                                    if (CellValue == CellValue1)
                                                    {
                                                        ProductDescription = CellValue;
                                                    }
                                                    else
                                                    {
                                                        ProductDescription = CellValue + CellValue1;
                                                    }
                                                    ExcelValue2 = CStr(WuDuSheet1.Cells[i, 6].Value);

                                                    //string ExcelValue1 = Sheet.GetValue(i, 3).ToString();
                                                    if ((ExcelValue2 == "") || (ExcelValue2 == null))
                                                    {
                                                        continue;
                                                    }
                                                    if (System.Text.RegularExpressions.Regex.IsMatch(ExcelValue2, @"^[-+]?[0-9]*\.?[0-9]+$"))
                                                    {
                                                        if (Convert.ToSingle(ExcelValue2) > 0)
                                                        {
                                                            for (int j = Sheet1StartAColNum; j <= Sheet1EndAColNum; j++)
                                                            {
                                                                newARow["ProductOrderId"] = ParentId;

                                                                ExcelRange Rang2 = WuDuSheet1.Cells[i, j];
                                                                object objectCellValue2 = WuDuSheet1.GetValue(i, j);//单元格数据
                                                                string CellValue2 = objectCellValue2 != null ? objectCellValue2.ToString().Trim() : "";
                                                                if (Rang2.Merge)
                                                                {
                                                                    CellValue2 = GetMergeValue(WuDuSheet1, i, j);

                                                                }
                                                                switch (j)
                                                                {
                                                                    case 1: newARow["CateGory"] = CellValue2; break;
                                                                    case 2:
                                                                        newARow["NumericalOrder"] = CellValue2;
                                                                        break;
                                                                    case 3:
                                                                        for (int q = 0; q < dt.Rows.Count; q++)
                                                                        {
                                                                            string SQLProductDescription = dt.Rows[q]["ProductDescription"].ToString();
                                                                            if (SQLProductDescription == ProductDescription)
                                                                            {
                                                                                newARow["ProductName"] = dt.Rows[q]["ProductName"];
                                                                                newARow["ProductDes"] = SQLProductDescription;
                                                                            }
                                                                        }
                                                                        break;
                                                                    case 6:
                                                                        if (CellValue2 == "" || CellValue2 == null)
                                                                        {
                                                                            CellValue = "0";
                                                                            Convert.ToSingle(CellValue2);
                                                                            newARow["Qty"] = CellValue2;
                                                                        }
                                                                        else
                                                                        {
                                                                            if (System.Text.RegularExpressions.Regex.IsMatch(CellValue2, @"^[-+]?[0-9]*\.?[0-9]+$"))
                                                                            {
                                                                                decimal Qty = Math.Round(decimal.Parse(CellValue2), 3, MidpointRounding.AwayFromZero);

                                                                                newARow["Qty"] = Qty;
                                                                            }
                                                                            else
                                                                            {
                                                                                MessageBox.Show("请检查工作表" + WuDuSheet1.Name + "第" + i + "行第" + j + "列数据是否正确");
                                                                                //TheWorksheetExists = false;
                                                                            }
                                                                            //newARow["Qty"] = CellValue;
                                                                        }
                                                                        break;
                                                                    case 7: newARow["Unit"] = CStr(WuDuSheet1.Cells[i, j].Value); break;
                                                                    //材质
                                                                    case 8: newARow["Texture"] = CellValue2; break;
                                                                }
                                                            }
                                                            PalaDiaoLingLiaoDanTable.Rows.Add(newARow);
                                                        }
                                                    }
                                                }
                                                PalaDiaoLingLiaoDanTable.TableName = "GetMaterialBills2";
                                                DS.Tables.Add(PalaDiaoLingLiaoDanTable);

                                            }
                                            else
                                            {
                                                con.Close();
                                            }
                                            //}
                                        }
                                    }
                                    //    }
                                    //}
                                }
                                catch (Exception ex)
                                {
                                    throw ex;
                                }

                                #endregion
                            bb:
                                pck.Dispose();
                                Fs.Dispose();
                                DialogResult ResultYes = MessageBox.Show("是否推送？", "提示", MessageBoxButtons.OKCancel, MessageBoxIcon.Question);
                                if (ResultYes == DialogResult.OK)
                                {

                                    //实例化通用方法类
                                    DataToSQL data1 = new DataToSQL();
                                    //调用导入数据库通用方法
                                    data1.DataToSQLobj(DS);
                                    //上传Excel文件到服务器上
                                    data1.UpLoadExcel(Path);
                                    //获取芯材
                                    data1.GetXinCai(ParentId);
                                    //特殊处理
                                    data1.Special_Handling(MaterialParentType,ParentId);
                                    //修改订单推送状态
                                    data1.UpdProductOrderCurrentStatus(ParentId);
                                    //释放资源
                                    DS.Dispose();
                                    VeinDs.Dispose();
                                    MessageBox.Show("推送成功，领料单物料号为空的记录有" + NullCount + "条");
                                }
                                //通用方法测试方法
                                //data1.DataToSQLobj2(materialBillsDataTable);
                //            }
                //            else
                //            {
                //                MessageBox.Show(ThisSheetName + "名称或厚度为空", "提示", MessageBoxButtons.OKCancel, MessageBoxIcon.Error);
                //            }
                //        }
                //        else
                //        {
                //            MessageBox.Show(ThisSheetName + "名称或厚度为空", "提示", MessageBoxButtons.OKCancel, MessageBoxIcon.Error);
                //        }
                //    }
                //    else
                //    {
                //        MessageBox.Show(ThisSheetName + "名称或厚度为空", "提示", MessageBoxButtons.OKCancel, MessageBoxIcon.Error);
                //    }
                //}
                //else
                //{
                //    MessageBox.Show(ThisSheetName + "名称或厚度为空", "提示", MessageBoxButtons.OKCancel, MessageBoxIcon.Error);
                //}
            }
        }


        //把Excel文件上传到服务器



























        /// <summary>
        /// 判断合并单元格获取值
        /// </summary>
        /// <param name="worksheet"></param>
        /// <param name="row">单元格行</param>
        /// <param name="column">单元格列</param>
        /// <returns></returns>
        public static string GetMergeValue(ExcelWorksheet worksheet, int row, int column)
        {
            string MergeValue = "";
            ExcelWorksheet.MergeCellsCollection<string> MergeCells = worksheet.MergedCells;
            for (int i = 0; i < MergeCells.Count; i++)
            {
                string range = MergeCells[i];
                ExcelAddress add = new ExcelAddress(range);
                int srow = add.Start.Row;//合并单元格开始行
                int scol = add.Start.Column;//合并单元格开始行
                int erow = add.End.Row;//合并单元格结束行
                int ecol = add.End.Column;//合并单元格结束行
                object value = worksheet.Cells[(new ExcelAddress(range)).Start.Row, (new ExcelAddress(range)).Start.Column].Value;
                if (row >= srow && row <= erow && column >= scol && column <= ecol)
                {
                    if (value == null || value.ToString() == "")
                    {
                        MergeValue = "";
                    }
                    else
                    {
                        MergeValue = value.ToString();
                    }
                    break;
                }
            }
            return MergeValue;
        }

        protected string CStr(object o) { return o != null ? o.ToString() : ""; }


    }






}




